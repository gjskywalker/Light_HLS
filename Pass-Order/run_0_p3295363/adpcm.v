//----------------------------------------------------------------------------//
// Generated by LegUp High-Level Synthesis Tool Version 4.0 (http://legup.org)
// Compiled: Tue Aug 29 18:59:51 2023
// University of Toronto
// For research and academic purposes only. Commercial use is prohibited.
// Please send bugs to: legup@eecg.toronto.edu
// Date: Thu Sep 21 15:35:52 2023
//----------------------------------------------------------------------------//

`define MEMORY_CONTROLLER_ADDR_SIZE 32
`define MEMORY_CONTROLLER_DATA_SIZE 64
// Number of RAM elements: 26
`define MEMORY_CONTROLLER_TAG_SIZE 9
// @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
`define TAG_g_accumc `MEMORY_CONTROLLER_TAG_SIZE'd21
`define TAG_g_accumc_a {`TAG_g_accumc, 23'd0}
// @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
`define TAG_g_accumd `MEMORY_CONTROLLER_TAG_SIZE'd22
`define TAG_g_accumd_a {`TAG_g_accumd, 23'd0}
// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_compressed `MEMORY_CONTROLLER_TAG_SIZE'd26
`define TAG_g_compressed_a {`TAG_g_compressed, 23'd0}
// @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bph `MEMORY_CONTROLLER_TAG_SIZE'd19
`define TAG_g_dec_del_bph_a {`TAG_g_dec_del_bph, 23'd0}
// @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_bpl `MEMORY_CONTROLLER_TAG_SIZE'd17
`define TAG_g_dec_del_bpl_a {`TAG_g_dec_del_bpl, 23'd0}
// @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dhx `MEMORY_CONTROLLER_TAG_SIZE'd20
`define TAG_g_dec_del_dhx_a {`TAG_g_dec_del_dhx, 23'd0}
// @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_dec_del_dltx `MEMORY_CONTROLLER_TAG_SIZE'd18
`define TAG_g_dec_del_dltx_a {`TAG_g_dec_del_dltx, 23'd0}
// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
`define TAG_g_decis_levl `MEMORY_CONTROLLER_TAG_SIZE'd7
`define TAG_g_decis_levl_a {`TAG_g_decis_levl, 23'd0}
// @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bph `MEMORY_CONTROLLER_TAG_SIZE'd15
`define TAG_g_delay_bph_a {`TAG_g_delay_bph, 23'd0}
// @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_bpl `MEMORY_CONTROLLER_TAG_SIZE'd13
`define TAG_g_delay_bpl_a {`TAG_g_delay_bpl, 23'd0}
// @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dhx `MEMORY_CONTROLLER_TAG_SIZE'd16
`define TAG_g_delay_dhx_a {`TAG_g_delay_dhx, 23'd0}
// @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
`define TAG_g_delay_dltx `MEMORY_CONTROLLER_TAG_SIZE'd14
`define TAG_g_delay_dltx_a {`TAG_g_delay_dltx, 23'd0}
// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
`define TAG_g_h `MEMORY_CONTROLLER_TAG_SIZE'd2
`define TAG_g_h_a {`TAG_g_h, 23'd0}
// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
`define TAG_g_ilb_table `MEMORY_CONTROLLER_TAG_SIZE'd6
`define TAG_g_ilb_table_a {`TAG_g_ilb_table, 23'd0}
// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
`define TAG_g_qq2_code2_table `MEMORY_CONTROLLER_TAG_SIZE'd10
`define TAG_g_qq2_code2_table_a {`TAG_g_qq2_code2_table, 23'd0}
// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
`define TAG_g_qq4_code4_table `MEMORY_CONTROLLER_TAG_SIZE'd3
`define TAG_g_qq4_code4_table_a {`TAG_g_qq4_code4_table, 23'd0}
// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
`define TAG_g_qq6_code6_table `MEMORY_CONTROLLER_TAG_SIZE'd4
`define TAG_g_qq6_code6_table_a {`TAG_g_qq6_code6_table, 23'd0}
// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
`define TAG_g_quant26bt_neg `MEMORY_CONTROLLER_TAG_SIZE'd9
`define TAG_g_quant26bt_neg_a {`TAG_g_quant26bt_neg, 23'd0}
// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
`define TAG_g_quant26bt_pos `MEMORY_CONTROLLER_TAG_SIZE'd8
`define TAG_g_quant26bt_pos_a {`TAG_g_quant26bt_pos, 23'd0}
// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
`define TAG_g_result `MEMORY_CONTROLLER_TAG_SIZE'd27
`define TAG_g_result_a {`TAG_g_result, 23'd0}
// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
`define TAG_g_test_compressed `MEMORY_CONTROLLER_TAG_SIZE'd24
`define TAG_g_test_compressed_a {`TAG_g_test_compressed, 23'd0}
// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
`define TAG_g_test_data `MEMORY_CONTROLLER_TAG_SIZE'd23
`define TAG_g_test_data_a {`TAG_g_test_data, 23'd0}
// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
`define TAG_g_test_result `MEMORY_CONTROLLER_TAG_SIZE'd25
`define TAG_g_test_result_a {`TAG_g_test_result, 23'd0}
// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
`define TAG_g_tqmf `MEMORY_CONTROLLER_TAG_SIZE'd12
`define TAG_g_tqmf_a {`TAG_g_tqmf, 23'd0}
// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
`define TAG_g_wh_code_table `MEMORY_CONTROLLER_TAG_SIZE'd11
`define TAG_g_wh_code_table_a {`TAG_g_wh_code_table, 23'd0}
// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
`define TAG_g_wl_code_table `MEMORY_CONTROLLER_TAG_SIZE'd5
`define TAG_g_wl_code_table_a {`TAG_g_wl_code_table, 23'd0}

// Turn off warning 'ignoring unsupported system task'
// altera message_off 10175

`timescale 1 ns / 1 ns
module top
	(
		clk,
		reset,
		start,
		finish,
		waitrequest,
		return_val
	);
input clk;
input reset;
input start;
output wire finish;
input waitrequest;
output wire [31:0] return_val;
wire memory_controller_waitrequest;
wire memory_controller_enable_a;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
wire memory_controller_write_enable_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
wire [1:0] memory_controller_size_a;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;

wire memory_controller_enable_b;
wire [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
wire memory_controller_write_enable_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
wire [1:0] memory_controller_size_b;
wire [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;

/* synthesis translate_off */
assign memory_controller_waitrequest = waitrequest;
/* synthesis translate_on */

memory_controller memory_controller_inst (
	.clk( clk ),
	.memory_controller_enable_a( memory_controller_enable_a ),
	.memory_controller_enable_b( memory_controller_enable_b ),
	.memory_controller_address_a( memory_controller_address_a ),
	.memory_controller_address_b( memory_controller_address_b ),
	.memory_controller_write_enable_a( memory_controller_write_enable_a ),
	.memory_controller_write_enable_b( memory_controller_write_enable_b ),
	.memory_controller_in_a( memory_controller_in_a ),
	.memory_controller_in_b( memory_controller_in_b ),
	.memory_controller_size_a( memory_controller_size_a ),
	.memory_controller_size_b( memory_controller_size_b ),
	.memory_controller_waitrequest( memory_controller_waitrequest ),
	.memory_controller_out_reg_a( memory_controller_out_a ),
	.memory_controller_out_reg_b( memory_controller_out_b )
);

main main_inst(
	.clk( clk ),
	.clk2x( clk2x ),
	.clk1x_follower( clk1x_follower ),
	.reset( reset ),
	.start( start ),
	.finish( finish ),
	.return_val( return_val ),
	.memory_controller_waitrequest(memory_controller_waitrequest),
	.memory_controller_enable_a(memory_controller_enable_a),
	.memory_controller_address_a(memory_controller_address_a),
	.memory_controller_write_enable_a(memory_controller_write_enable_a),
	.memory_controller_in_a(memory_controller_in_a),
	.memory_controller_size_a(memory_controller_size_a),
	.memory_controller_out_a(memory_controller_out_a),
	.memory_controller_enable_b(memory_controller_enable_b),
	.memory_controller_address_b(memory_controller_address_b),
	.memory_controller_write_enable_b(memory_controller_write_enable_b),
	.memory_controller_in_b(memory_controller_in_b),
	.memory_controller_size_b(memory_controller_size_b),
	.memory_controller_out_b(memory_controller_out_b)
);

endmodule

`timescale 1 ns / 1 ns
module memory_controller
(
	clk,
	memory_controller_address_a,
	memory_controller_address_b,
	memory_controller_enable_a,
	memory_controller_enable_b,
	memory_controller_write_enable_a,
	memory_controller_write_enable_b,
	memory_controller_in_a,
	memory_controller_in_b,
	memory_controller_size_a,
	memory_controller_size_b,
	memory_controller_waitrequest,
	memory_controller_out_reg_a,
	memory_controller_out_reg_b
);

parameter latency = 2;

parameter ram_latency = latency-1;

integer j;

input clk;
input memory_controller_waitrequest;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
input memory_controller_enable_a;
input memory_controller_write_enable_a;
input [64-1:0] memory_controller_in_a;
input [1:0] memory_controller_size_a;
output reg [64-1:0] memory_controller_out_reg_a;
reg [64-1:0] memory_controller_out_prev_a;
reg [64-1:0] memory_controller_out_a;

reg memory_controller_enable_reg_a;
input [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
input memory_controller_enable_b;
input memory_controller_write_enable_b;
input [64-1:0] memory_controller_in_b;
input [1:0] memory_controller_size_b;
output reg [64-1:0] memory_controller_out_reg_b;
reg [64-1:0] memory_controller_out_prev_b;
reg [64-1:0] memory_controller_out_b;

reg memory_controller_enable_reg_b;

reg [4:0] h_address_a;
reg [4:0] h_address_b;
reg h_write_enable_a;
reg h_write_enable_b;
reg [31:0] h_in_a;
reg [31:0] h_in_b;
wire [31:0] h_out_a;
wire [31:0] h_out_b;

// @h = internal unnamed_addr constant [24 x i32] [i32 12, i32 -44, i32 -44, i32 212, i32 48, i32 -624, i32 128, i32 1448, i32 -840, i32 -3220, i32 3804, i32 15504, i32 15504, i32 3804, i32 -3220, i32 -8...
rom_dual_port h (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( h_address_a ),
	.address_b( h_address_b ),
	.q_a( h_out_a ),
	.q_b( h_out_b)
);
defparam h.width_a = 32;
defparam h.width_b = 32;
defparam h.widthad_a = 5;
defparam h.widthad_b = 5;
defparam h.numwords_a = 24;
defparam h.numwords_b = 24;
defparam h.latency = ram_latency;
defparam h.init_file = "h.mif";

reg [3:0] qq4_code4_table_address_a;
reg [3:0] qq4_code4_table_address_b;
reg qq4_code4_table_write_enable_a;
reg qq4_code4_table_write_enable_b;
reg [31:0] qq4_code4_table_in_a;
reg [31:0] qq4_code4_table_in_b;
wire [31:0] qq4_code4_table_out_a;
wire [31:0] qq4_code4_table_out_b;

// @qq4_code4_table = internal unnamed_addr constant [16 x i32] [i32 0, i32 -20456, i32 -12896, i32 -8968, i32 -6288, i32 -4240, i32 -2584, i32 -1200, i32 20456, i32 12896, i32 8968, i32 6288, i32 4240, ...
rom_dual_port qq4_code4_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq4_code4_table_address_a ),
	.address_b( qq4_code4_table_address_b ),
	.q_a( qq4_code4_table_out_a ),
	.q_b( qq4_code4_table_out_b)
);
defparam qq4_code4_table.width_a = 32;
defparam qq4_code4_table.width_b = 32;
defparam qq4_code4_table.widthad_a = 4;
defparam qq4_code4_table.widthad_b = 4;
defparam qq4_code4_table.numwords_a = 16;
defparam qq4_code4_table.numwords_b = 16;
defparam qq4_code4_table.latency = ram_latency;
defparam qq4_code4_table.init_file = "qq4_code4_table.mif";

reg [5:0] qq6_code6_table_address_a;
reg [5:0] qq6_code6_table_address_b;
reg qq6_code6_table_write_enable_a;
reg qq6_code6_table_write_enable_b;
reg [31:0] qq6_code6_table_in_a;
reg [31:0] qq6_code6_table_in_b;
wire [31:0] qq6_code6_table_out_a;
wire [31:0] qq6_code6_table_out_b;

// @qq6_code6_table = internal unnamed_addr constant [64 x i32] [i32 -136, i32 -136, i32 -136, i32 -136, i32 -24808, i32 -21904, i32 -19008, i32 -16704, i32 -14984, i32 -13512, i32 -12280, i32 -11192, i3...
rom_dual_port qq6_code6_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq6_code6_table_address_a ),
	.address_b( qq6_code6_table_address_b ),
	.q_a( qq6_code6_table_out_a ),
	.q_b( qq6_code6_table_out_b)
);
defparam qq6_code6_table.width_a = 32;
defparam qq6_code6_table.width_b = 32;
defparam qq6_code6_table.widthad_a = 6;
defparam qq6_code6_table.widthad_b = 6;
defparam qq6_code6_table.numwords_a = 64;
defparam qq6_code6_table.numwords_b = 64;
defparam qq6_code6_table.latency = ram_latency;
defparam qq6_code6_table.init_file = "qq6_code6_table.mif";

reg [3:0] wl_code_table_address_a;
reg [3:0] wl_code_table_address_b;
reg wl_code_table_write_enable_a;
reg wl_code_table_write_enable_b;
reg [31:0] wl_code_table_in_a;
reg [31:0] wl_code_table_in_b;
wire [31:0] wl_code_table_out_a;
wire [31:0] wl_code_table_out_b;

// @wl_code_table = internal unnamed_addr constant [16 x i32] [i32 -60, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32 3042, i32 1198, i32 538, i32 334, i32 172, i32 58, i32 -30, i32...
rom_dual_port wl_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wl_code_table_address_a ),
	.address_b( wl_code_table_address_b ),
	.q_a( wl_code_table_out_a ),
	.q_b( wl_code_table_out_b)
);
defparam wl_code_table.width_a = 32;
defparam wl_code_table.width_b = 32;
defparam wl_code_table.widthad_a = 4;
defparam wl_code_table.widthad_b = 4;
defparam wl_code_table.numwords_a = 16;
defparam wl_code_table.numwords_b = 16;
defparam wl_code_table.latency = ram_latency;
defparam wl_code_table.init_file = "wl_code_table.mif";

reg [4:0] ilb_table_address_a;
reg [4:0] ilb_table_address_b;
reg ilb_table_write_enable_a;
reg ilb_table_write_enable_b;
reg [31:0] ilb_table_in_a;
reg [31:0] ilb_table_in_b;
wire [31:0] ilb_table_out_a;
wire [31:0] ilb_table_out_b;

// @ilb_table = internal unnamed_addr constant [32 x i32] [i32 2048, i32 2093, i32 2139, i32 2186, i32 2233, i32 2282, i32 2332, i32 2383, i32 2435, i32 2489, i32 2543, i32 2599, i32 2656, i32 2714, i32 ...
rom_dual_port ilb_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( ilb_table_address_a ),
	.address_b( ilb_table_address_b ),
	.q_a( ilb_table_out_a ),
	.q_b( ilb_table_out_b)
);
defparam ilb_table.width_a = 32;
defparam ilb_table.width_b = 32;
defparam ilb_table.widthad_a = 5;
defparam ilb_table.widthad_b = 5;
defparam ilb_table.numwords_a = 32;
defparam ilb_table.numwords_b = 32;
defparam ilb_table.latency = ram_latency;
defparam ilb_table.init_file = "ilb_table.mif";

reg [4:0] decis_levl_address_a;
reg [4:0] decis_levl_address_b;
reg decis_levl_write_enable_a;
reg decis_levl_write_enable_b;
reg [31:0] decis_levl_in_a;
reg [31:0] decis_levl_in_b;
wire [31:0] decis_levl_out_a;
wire [31:0] decis_levl_out_b;

// @decis_levl = internal unnamed_addr constant [30 x i32] [i32 280, i32 576, i32 880, i32 1200, i32 1520, i32 1864, i32 2208, i32 2584, i32 2960, i32 3376, i32 3784, i32 4240, i32 4696, i32 5200, i32 57...
rom_dual_port decis_levl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( decis_levl_address_a ),
	.address_b( decis_levl_address_b ),
	.q_a( decis_levl_out_a ),
	.q_b( decis_levl_out_b)
);
defparam decis_levl.width_a = 32;
defparam decis_levl.width_b = 32;
defparam decis_levl.widthad_a = 5;
defparam decis_levl.widthad_b = 5;
defparam decis_levl.numwords_a = 30;
defparam decis_levl.numwords_b = 30;
defparam decis_levl.latency = ram_latency;
defparam decis_levl.init_file = "decis_levl.mif";

reg [4:0] quant26bt_pos_address_a;
reg [4:0] quant26bt_pos_address_b;
reg quant26bt_pos_write_enable_a;
reg quant26bt_pos_write_enable_b;
reg [31:0] quant26bt_pos_in_a;
reg [31:0] quant26bt_pos_in_b;
wire [31:0] quant26bt_pos_out_a;
wire [31:0] quant26bt_pos_out_b;

// @quant26bt_pos = internal unnamed_addr constant [31 x i32] [i32 61, i32 60, i32 59, i32 58, i32 57, i32 56, i32 55, i32 54, i32 53, i32 52, i32 51, i32 50, i32 49, i32 48, i32 47, i32 46, i32 45, i32 ...
rom_dual_port quant26bt_pos (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( quant26bt_pos_address_a ),
	.address_b( quant26bt_pos_address_b ),
	.q_a( quant26bt_pos_out_a ),
	.q_b( quant26bt_pos_out_b)
);
defparam quant26bt_pos.width_a = 32;
defparam quant26bt_pos.width_b = 32;
defparam quant26bt_pos.widthad_a = 5;
defparam quant26bt_pos.widthad_b = 5;
defparam quant26bt_pos.numwords_a = 31;
defparam quant26bt_pos.numwords_b = 31;
defparam quant26bt_pos.latency = ram_latency;
defparam quant26bt_pos.init_file = "quant26bt_pos.mif";

reg [4:0] quant26bt_neg_address_a;
reg [4:0] quant26bt_neg_address_b;
reg quant26bt_neg_write_enable_a;
reg quant26bt_neg_write_enable_b;
reg [31:0] quant26bt_neg_in_a;
reg [31:0] quant26bt_neg_in_b;
wire [31:0] quant26bt_neg_out_a;
wire [31:0] quant26bt_neg_out_b;

// @quant26bt_neg = internal unnamed_addr constant [31 x i32] [i32 63, i32 62, i32 31, i32 30, i32 29, i32 28, i32 27, i32 26, i32 25, i32 24, i32 23, i32 22, i32 21, i32 20, i32 19, i32 18, i32 17, i32 ...
rom_dual_port quant26bt_neg (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( quant26bt_neg_address_a ),
	.address_b( quant26bt_neg_address_b ),
	.q_a( quant26bt_neg_out_a ),
	.q_b( quant26bt_neg_out_b)
);
defparam quant26bt_neg.width_a = 32;
defparam quant26bt_neg.width_b = 32;
defparam quant26bt_neg.widthad_a = 5;
defparam quant26bt_neg.widthad_b = 5;
defparam quant26bt_neg.numwords_a = 31;
defparam quant26bt_neg.numwords_b = 31;
defparam quant26bt_neg.latency = ram_latency;
defparam quant26bt_neg.init_file = "quant26bt_neg.mif";

reg [1:0] qq2_code2_table_address_a;
reg [1:0] qq2_code2_table_address_b;
reg qq2_code2_table_write_enable_a;
reg qq2_code2_table_write_enable_b;
reg [31:0] qq2_code2_table_in_a;
reg [31:0] qq2_code2_table_in_b;
wire [31:0] qq2_code2_table_out_a;
wire [31:0] qq2_code2_table_out_b;

// @qq2_code2_table = internal unnamed_addr constant [4 x i32] [i32 -7408, i32 -1616, i32 7408, i32 1616], align 4
rom_dual_port qq2_code2_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( qq2_code2_table_address_a ),
	.address_b( qq2_code2_table_address_b ),
	.q_a( qq2_code2_table_out_a ),
	.q_b( qq2_code2_table_out_b)
);
defparam qq2_code2_table.width_a = 32;
defparam qq2_code2_table.width_b = 32;
defparam qq2_code2_table.widthad_a = 2;
defparam qq2_code2_table.widthad_b = 2;
defparam qq2_code2_table.numwords_a = 4;
defparam qq2_code2_table.numwords_b = 4;
defparam qq2_code2_table.latency = ram_latency;
defparam qq2_code2_table.init_file = "qq2_code2_table.mif";

reg [1:0] wh_code_table_address_a;
reg [1:0] wh_code_table_address_b;
reg wh_code_table_write_enable_a;
reg wh_code_table_write_enable_b;
reg [31:0] wh_code_table_in_a;
reg [31:0] wh_code_table_in_b;
wire [31:0] wh_code_table_out_a;
wire [31:0] wh_code_table_out_b;

// @wh_code_table = internal unnamed_addr constant [4 x i32] [i32 798, i32 -214, i32 798, i32 -214], align 4
rom_dual_port wh_code_table (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( wh_code_table_address_a ),
	.address_b( wh_code_table_address_b ),
	.q_a( wh_code_table_out_a ),
	.q_b( wh_code_table_out_b)
);
defparam wh_code_table.width_a = 32;
defparam wh_code_table.width_b = 32;
defparam wh_code_table.widthad_a = 2;
defparam wh_code_table.widthad_b = 2;
defparam wh_code_table.numwords_a = 4;
defparam wh_code_table.numwords_b = 4;
defparam wh_code_table.latency = ram_latency;
defparam wh_code_table.init_file = "wh_code_table.mif";

reg [4:0] tqmf_address_a;
reg [4:0] tqmf_address_b;
reg tqmf_write_enable_a;
reg tqmf_write_enable_b;
reg [31:0] tqmf_in_a;
reg [31:0] tqmf_in_b;
wire [31:0] tqmf_out_a;
wire [31:0] tqmf_out_b;

// @tqmf = internal unnamed_addr global [24 x i32] zeroinitializer, align 4
ram_dual_port tqmf (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( tqmf_address_a ),
	.address_b( tqmf_address_b ),
	.wren_a( tqmf_write_enable_a ),
	.wren_b( tqmf_write_enable_b ),
	.data_a( tqmf_in_a ),
	.data_b( tqmf_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( tqmf_out_a ),
	.q_b( tqmf_out_b)
);
defparam tqmf.width_a = 32;
defparam tqmf.width_b = 32;
defparam tqmf.widthad_a = 5;
defparam tqmf.widthad_b = 5;
defparam tqmf.width_be_a = 1;
defparam tqmf.width_be_b = 1;
defparam tqmf.numwords_a = 24;
defparam tqmf.numwords_b = 24;
defparam tqmf.latency = ram_latency;
defparam tqmf.init_file = "tqmf.mif";

reg [2:0] delay_bpl_address_a;
reg [2:0] delay_bpl_address_b;
reg delay_bpl_write_enable_a;
reg delay_bpl_write_enable_b;
reg [31:0] delay_bpl_in_a;
reg [31:0] delay_bpl_in_b;
wire [31:0] delay_bpl_out_a;
wire [31:0] delay_bpl_out_b;

// @delay_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_bpl_address_a ),
	.address_b( delay_bpl_address_b ),
	.wren_a( delay_bpl_write_enable_a ),
	.wren_b( delay_bpl_write_enable_b ),
	.data_a( delay_bpl_in_a ),
	.data_b( delay_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_bpl_out_a ),
	.q_b( delay_bpl_out_b)
);
defparam delay_bpl.width_a = 32;
defparam delay_bpl.width_b = 32;
defparam delay_bpl.widthad_a = 3;
defparam delay_bpl.widthad_b = 3;
defparam delay_bpl.width_be_a = 1;
defparam delay_bpl.width_be_b = 1;
defparam delay_bpl.numwords_a = 6;
defparam delay_bpl.numwords_b = 6;
defparam delay_bpl.latency = ram_latency;
defparam delay_bpl.init_file = "delay_bpl.mif";

reg [2:0] delay_dltx_address_a;
reg [2:0] delay_dltx_address_b;
reg delay_dltx_write_enable_a;
reg delay_dltx_write_enable_b;
reg [31:0] delay_dltx_in_a;
reg [31:0] delay_dltx_in_b;
wire [31:0] delay_dltx_out_a;
wire [31:0] delay_dltx_out_b;

// @delay_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_dltx_address_a ),
	.address_b( delay_dltx_address_b ),
	.wren_a( delay_dltx_write_enable_a ),
	.wren_b( delay_dltx_write_enable_b ),
	.data_a( delay_dltx_in_a ),
	.data_b( delay_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_dltx_out_a ),
	.q_b( delay_dltx_out_b)
);
defparam delay_dltx.width_a = 32;
defparam delay_dltx.width_b = 32;
defparam delay_dltx.widthad_a = 3;
defparam delay_dltx.widthad_b = 3;
defparam delay_dltx.width_be_a = 1;
defparam delay_dltx.width_be_b = 1;
defparam delay_dltx.numwords_a = 6;
defparam delay_dltx.numwords_b = 6;
defparam delay_dltx.latency = ram_latency;
defparam delay_dltx.init_file = "delay_dltx.mif";

reg [2:0] delay_bph_address_a;
reg [2:0] delay_bph_address_b;
reg delay_bph_write_enable_a;
reg delay_bph_write_enable_b;
reg [31:0] delay_bph_in_a;
reg [31:0] delay_bph_in_b;
wire [31:0] delay_bph_out_a;
wire [31:0] delay_bph_out_b;

// @delay_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_bph_address_a ),
	.address_b( delay_bph_address_b ),
	.wren_a( delay_bph_write_enable_a ),
	.wren_b( delay_bph_write_enable_b ),
	.data_a( delay_bph_in_a ),
	.data_b( delay_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_bph_out_a ),
	.q_b( delay_bph_out_b)
);
defparam delay_bph.width_a = 32;
defparam delay_bph.width_b = 32;
defparam delay_bph.widthad_a = 3;
defparam delay_bph.widthad_b = 3;
defparam delay_bph.width_be_a = 1;
defparam delay_bph.width_be_b = 1;
defparam delay_bph.numwords_a = 6;
defparam delay_bph.numwords_b = 6;
defparam delay_bph.latency = ram_latency;
defparam delay_bph.init_file = "delay_bph.mif";

reg [2:0] delay_dhx_address_a;
reg [2:0] delay_dhx_address_b;
reg delay_dhx_write_enable_a;
reg delay_dhx_write_enable_b;
reg [31:0] delay_dhx_in_a;
reg [31:0] delay_dhx_in_b;
wire [31:0] delay_dhx_out_a;
wire [31:0] delay_dhx_out_b;

// @delay_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port delay_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( delay_dhx_address_a ),
	.address_b( delay_dhx_address_b ),
	.wren_a( delay_dhx_write_enable_a ),
	.wren_b( delay_dhx_write_enable_b ),
	.data_a( delay_dhx_in_a ),
	.data_b( delay_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( delay_dhx_out_a ),
	.q_b( delay_dhx_out_b)
);
defparam delay_dhx.width_a = 32;
defparam delay_dhx.width_b = 32;
defparam delay_dhx.widthad_a = 3;
defparam delay_dhx.widthad_b = 3;
defparam delay_dhx.width_be_a = 1;
defparam delay_dhx.width_be_b = 1;
defparam delay_dhx.numwords_a = 6;
defparam delay_dhx.numwords_b = 6;
defparam delay_dhx.latency = ram_latency;
defparam delay_dhx.init_file = "delay_dhx.mif";

reg [2:0] dec_del_bpl_address_a;
reg [2:0] dec_del_bpl_address_b;
reg dec_del_bpl_write_enable_a;
reg dec_del_bpl_write_enable_b;
reg [31:0] dec_del_bpl_in_a;
reg [31:0] dec_del_bpl_in_b;
wire [31:0] dec_del_bpl_out_a;
wire [31:0] dec_del_bpl_out_b;

// @dec_del_bpl = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bpl (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bpl_address_a ),
	.address_b( dec_del_bpl_address_b ),
	.wren_a( dec_del_bpl_write_enable_a ),
	.wren_b( dec_del_bpl_write_enable_b ),
	.data_a( dec_del_bpl_in_a ),
	.data_b( dec_del_bpl_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bpl_out_a ),
	.q_b( dec_del_bpl_out_b)
);
defparam dec_del_bpl.width_a = 32;
defparam dec_del_bpl.width_b = 32;
defparam dec_del_bpl.widthad_a = 3;
defparam dec_del_bpl.widthad_b = 3;
defparam dec_del_bpl.width_be_a = 1;
defparam dec_del_bpl.width_be_b = 1;
defparam dec_del_bpl.numwords_a = 6;
defparam dec_del_bpl.numwords_b = 6;
defparam dec_del_bpl.latency = ram_latency;
defparam dec_del_bpl.init_file = "dec_del_bpl.mif";

reg [2:0] dec_del_dltx_address_a;
reg [2:0] dec_del_dltx_address_b;
reg dec_del_dltx_write_enable_a;
reg dec_del_dltx_write_enable_b;
reg [31:0] dec_del_dltx_in_a;
reg [31:0] dec_del_dltx_in_b;
wire [31:0] dec_del_dltx_out_a;
wire [31:0] dec_del_dltx_out_b;

// @dec_del_dltx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dltx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dltx_address_a ),
	.address_b( dec_del_dltx_address_b ),
	.wren_a( dec_del_dltx_write_enable_a ),
	.wren_b( dec_del_dltx_write_enable_b ),
	.data_a( dec_del_dltx_in_a ),
	.data_b( dec_del_dltx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dltx_out_a ),
	.q_b( dec_del_dltx_out_b)
);
defparam dec_del_dltx.width_a = 32;
defparam dec_del_dltx.width_b = 32;
defparam dec_del_dltx.widthad_a = 3;
defparam dec_del_dltx.widthad_b = 3;
defparam dec_del_dltx.width_be_a = 1;
defparam dec_del_dltx.width_be_b = 1;
defparam dec_del_dltx.numwords_a = 6;
defparam dec_del_dltx.numwords_b = 6;
defparam dec_del_dltx.latency = ram_latency;
defparam dec_del_dltx.init_file = "dec_del_dltx.mif";

reg [2:0] dec_del_bph_address_a;
reg [2:0] dec_del_bph_address_b;
reg dec_del_bph_write_enable_a;
reg dec_del_bph_write_enable_b;
reg [31:0] dec_del_bph_in_a;
reg [31:0] dec_del_bph_in_b;
wire [31:0] dec_del_bph_out_a;
wire [31:0] dec_del_bph_out_b;

// @dec_del_bph = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_bph (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_bph_address_a ),
	.address_b( dec_del_bph_address_b ),
	.wren_a( dec_del_bph_write_enable_a ),
	.wren_b( dec_del_bph_write_enable_b ),
	.data_a( dec_del_bph_in_a ),
	.data_b( dec_del_bph_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_bph_out_a ),
	.q_b( dec_del_bph_out_b)
);
defparam dec_del_bph.width_a = 32;
defparam dec_del_bph.width_b = 32;
defparam dec_del_bph.widthad_a = 3;
defparam dec_del_bph.widthad_b = 3;
defparam dec_del_bph.width_be_a = 1;
defparam dec_del_bph.width_be_b = 1;
defparam dec_del_bph.numwords_a = 6;
defparam dec_del_bph.numwords_b = 6;
defparam dec_del_bph.latency = ram_latency;
defparam dec_del_bph.init_file = "dec_del_bph.mif";

reg [2:0] dec_del_dhx_address_a;
reg [2:0] dec_del_dhx_address_b;
reg dec_del_dhx_write_enable_a;
reg dec_del_dhx_write_enable_b;
reg [31:0] dec_del_dhx_in_a;
reg [31:0] dec_del_dhx_in_b;
wire [31:0] dec_del_dhx_out_a;
wire [31:0] dec_del_dhx_out_b;

// @dec_del_dhx = internal unnamed_addr global [6 x i32] zeroinitializer, align 4
ram_dual_port dec_del_dhx (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( dec_del_dhx_address_a ),
	.address_b( dec_del_dhx_address_b ),
	.wren_a( dec_del_dhx_write_enable_a ),
	.wren_b( dec_del_dhx_write_enable_b ),
	.data_a( dec_del_dhx_in_a ),
	.data_b( dec_del_dhx_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( dec_del_dhx_out_a ),
	.q_b( dec_del_dhx_out_b)
);
defparam dec_del_dhx.width_a = 32;
defparam dec_del_dhx.width_b = 32;
defparam dec_del_dhx.widthad_a = 3;
defparam dec_del_dhx.widthad_b = 3;
defparam dec_del_dhx.width_be_a = 1;
defparam dec_del_dhx.width_be_b = 1;
defparam dec_del_dhx.numwords_a = 6;
defparam dec_del_dhx.numwords_b = 6;
defparam dec_del_dhx.latency = ram_latency;
defparam dec_del_dhx.init_file = "dec_del_dhx.mif";

reg [3:0] accumc_address_a;
reg [3:0] accumc_address_b;
reg accumc_write_enable_a;
reg accumc_write_enable_b;
reg [31:0] accumc_in_a;
reg [31:0] accumc_in_b;
wire [31:0] accumc_out_a;
wire [31:0] accumc_out_b;

// @accumc = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumc (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumc_address_a ),
	.address_b( accumc_address_b ),
	.wren_a( accumc_write_enable_a ),
	.wren_b( accumc_write_enable_b ),
	.data_a( accumc_in_a ),
	.data_b( accumc_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumc_out_a ),
	.q_b( accumc_out_b)
);
defparam accumc.width_a = 32;
defparam accumc.width_b = 32;
defparam accumc.widthad_a = 4;
defparam accumc.widthad_b = 4;
defparam accumc.width_be_a = 1;
defparam accumc.width_be_b = 1;
defparam accumc.numwords_a = 11;
defparam accumc.numwords_b = 11;
defparam accumc.latency = ram_latency;
defparam accumc.init_file = "accumc.mif";

reg [3:0] accumd_address_a;
reg [3:0] accumd_address_b;
reg accumd_write_enable_a;
reg accumd_write_enable_b;
reg [31:0] accumd_in_a;
reg [31:0] accumd_in_b;
wire [31:0] accumd_out_a;
wire [31:0] accumd_out_b;

// @accumd = internal unnamed_addr global [11 x i32] zeroinitializer, align 4
ram_dual_port accumd (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( accumd_address_a ),
	.address_b( accumd_address_b ),
	.wren_a( accumd_write_enable_a ),
	.wren_b( accumd_write_enable_b ),
	.data_a( accumd_in_a ),
	.data_b( accumd_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( accumd_out_a ),
	.q_b( accumd_out_b)
);
defparam accumd.width_a = 32;
defparam accumd.width_b = 32;
defparam accumd.widthad_a = 4;
defparam accumd.widthad_b = 4;
defparam accumd.width_be_a = 1;
defparam accumd.width_be_b = 1;
defparam accumd.numwords_a = 11;
defparam accumd.numwords_b = 11;
defparam accumd.latency = ram_latency;
defparam accumd.init_file = "accumd.mif";

reg [6:0] test_data_address_a;
reg [6:0] test_data_address_b;
reg test_data_write_enable_a;
reg test_data_write_enable_b;
reg [31:0] test_data_in_a;
reg [31:0] test_data_in_b;
wire [31:0] test_data_out_a;
wire [31:0] test_data_out_b;

// @test_data = internal unnamed_addr constant [100 x i32] [i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 68, i32 67,...
rom_dual_port test_data (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_data_address_a ),
	.address_b( test_data_address_b ),
	.q_a( test_data_out_a ),
	.q_b( test_data_out_b)
);
defparam test_data.width_a = 32;
defparam test_data.width_b = 32;
defparam test_data.widthad_a = 7;
defparam test_data.widthad_b = 7;
defparam test_data.numwords_a = 100;
defparam test_data.numwords_b = 100;
defparam test_data.latency = ram_latency;
defparam test_data.init_file = "test_data.mif";

reg [6:0] test_compressed_address_a;
reg [6:0] test_compressed_address_b;
reg test_compressed_write_enable_a;
reg test_compressed_write_enable_b;
reg [31:0] test_compressed_in_a;
reg [31:0] test_compressed_in_b;
wire [31:0] test_compressed_out_a;
wire [31:0] test_compressed_out_b;

// @test_compressed = internal unnamed_addr constant [100 x i32] [i32 253, i32 222, i32 119, i32 186, i32 244, i32 146, i32 32, i32 160, i32 236, i32 237, i32 238, i32 240, i32 241, i32 241, i32 242, i32...
rom_dual_port test_compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_compressed_address_a ),
	.address_b( test_compressed_address_b ),
	.q_a( test_compressed_out_a ),
	.q_b( test_compressed_out_b)
);
defparam test_compressed.width_a = 32;
defparam test_compressed.width_b = 32;
defparam test_compressed.widthad_a = 7;
defparam test_compressed.widthad_b = 7;
defparam test_compressed.numwords_a = 100;
defparam test_compressed.numwords_b = 100;
defparam test_compressed.latency = ram_latency;
defparam test_compressed.init_file = "test_compressed.mif";

reg [6:0] test_result_address_a;
reg [6:0] test_result_address_b;
reg test_result_write_enable_a;
reg test_result_write_enable_b;
reg [31:0] test_result_in_a;
reg [31:0] test_result_in_b;
wire [31:0] test_result_out_a;
wire [31:0] test_result_out_b;

// @test_result = internal unnamed_addr constant [100 x i32] [i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 -1, i32 0, i32 0, i32 -1, i32 -1, i32 0, i32 0, i32 1, i32 1, i32 0, i32 -2, i32 -1, i32 -2, i32 0, ...
rom_dual_port test_result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( test_result_address_a ),
	.address_b( test_result_address_b ),
	.q_a( test_result_out_a ),
	.q_b( test_result_out_b)
);
defparam test_result.width_a = 32;
defparam test_result.width_b = 32;
defparam test_result.widthad_a = 7;
defparam test_result.widthad_b = 7;
defparam test_result.numwords_a = 100;
defparam test_result.numwords_b = 100;
defparam test_result.latency = ram_latency;
defparam test_result.init_file = "test_result.mif";

reg [6:0] compressed_address_a;
reg [6:0] compressed_address_b;
reg compressed_write_enable_a;
reg compressed_write_enable_b;
reg [31:0] compressed_in_a;
reg [31:0] compressed_in_b;
wire [31:0] compressed_out_a;
wire [31:0] compressed_out_b;

// @compressed = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port compressed (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( compressed_address_a ),
	.address_b( compressed_address_b ),
	.wren_a( compressed_write_enable_a ),
	.wren_b( compressed_write_enable_b ),
	.data_a( compressed_in_a ),
	.data_b( compressed_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( compressed_out_a ),
	.q_b( compressed_out_b)
);
defparam compressed.width_a = 32;
defparam compressed.width_b = 32;
defparam compressed.widthad_a = 7;
defparam compressed.widthad_b = 7;
defparam compressed.width_be_a = 1;
defparam compressed.width_be_b = 1;
defparam compressed.numwords_a = 100;
defparam compressed.numwords_b = 100;
defparam compressed.latency = ram_latency;
defparam compressed.init_file = "compressed.mif";

reg [6:0] result_address_a;
reg [6:0] result_address_b;
reg result_write_enable_a;
reg result_write_enable_b;
reg [31:0] result_in_a;
reg [31:0] result_in_b;
wire [31:0] result_out_a;
wire [31:0] result_out_b;

// @result = internal unnamed_addr global [100 x i32] zeroinitializer, align 4
ram_dual_port result (
	.clk( clk ),
	.clken( !memory_controller_waitrequest ),
	.address_a( result_address_a ),
	.address_b( result_address_b ),
	.wren_a( result_write_enable_a ),
	.wren_b( result_write_enable_b ),
	.data_a( result_in_a ),
	.data_b( result_in_b ),
	.byteena_a( 1'b1 ),
	.byteena_b( 1'b1 ),
	.q_a( result_out_a ),
	.q_b( result_out_b)
);
defparam result.width_a = 32;
defparam result.width_b = 32;
defparam result.widthad_a = 7;
defparam result.widthad_b = 7;
defparam result.width_be_a = 1;
defparam result.width_be_b = 1;
defparam result.numwords_a = 100;
defparam result.numwords_b = 100;
defparam result.latency = ram_latency;
defparam result.init_file = "result.mif";
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_a;
assign tag_a = memory_controller_address_a[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_a;
reg [1:0] prevSize_a;
reg [2:0] prevSize_a_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_a <= memory_controller_address_a[2:0];
	prevSize_a <= memory_controller_size_a;
end
wire [`MEMORY_CONTROLLER_TAG_SIZE-1:0] tag_b;
assign tag_b = memory_controller_address_b[`MEMORY_CONTROLLER_ADDR_SIZE-1:`MEMORY_CONTROLLER_ADDR_SIZE-`MEMORY_CONTROLLER_TAG_SIZE];
reg [2:0] prevAddr_b;
reg [1:0] prevSize_b;
reg [2:0] prevSize_b_and;

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
	prevAddr_b <= memory_controller_address_b[2:0];
	prevSize_b <= memory_controller_size_b;
end

reg [2:0] select_not_struct_a;

wire select_h_a;
assign select_h_a = (tag_a == `TAG_g_h);
reg [ram_latency:0] select_h_reg_a;
wire [31:0] memory_controller_h_out_a;
assign memory_controller_h_out_a = {32{ select_h_reg_a[ram_latency]}} & h_out_a;

wire select_qq4_code4_table_a;
assign select_qq4_code4_table_a = (tag_a == `TAG_g_qq4_code4_table);
reg [ram_latency:0] select_qq4_code4_table_reg_a;
wire [31:0] memory_controller_qq4_code4_table_out_a;
assign memory_controller_qq4_code4_table_out_a = {32{ select_qq4_code4_table_reg_a[ram_latency]}} & qq4_code4_table_out_a;

wire select_qq6_code6_table_a;
assign select_qq6_code6_table_a = (tag_a == `TAG_g_qq6_code6_table);
reg [ram_latency:0] select_qq6_code6_table_reg_a;
wire [31:0] memory_controller_qq6_code6_table_out_a;
assign memory_controller_qq6_code6_table_out_a = {32{ select_qq6_code6_table_reg_a[ram_latency]}} & qq6_code6_table_out_a;

wire select_wl_code_table_a;
assign select_wl_code_table_a = (tag_a == `TAG_g_wl_code_table);
reg [ram_latency:0] select_wl_code_table_reg_a;
wire [31:0] memory_controller_wl_code_table_out_a;
assign memory_controller_wl_code_table_out_a = {32{ select_wl_code_table_reg_a[ram_latency]}} & wl_code_table_out_a;

wire select_ilb_table_a;
assign select_ilb_table_a = (tag_a == `TAG_g_ilb_table);
reg [ram_latency:0] select_ilb_table_reg_a;
wire [31:0] memory_controller_ilb_table_out_a;
assign memory_controller_ilb_table_out_a = {32{ select_ilb_table_reg_a[ram_latency]}} & ilb_table_out_a;

wire select_decis_levl_a;
assign select_decis_levl_a = (tag_a == `TAG_g_decis_levl);
reg [ram_latency:0] select_decis_levl_reg_a;
wire [31:0] memory_controller_decis_levl_out_a;
assign memory_controller_decis_levl_out_a = {32{ select_decis_levl_reg_a[ram_latency]}} & decis_levl_out_a;

wire select_quant26bt_pos_a;
assign select_quant26bt_pos_a = (tag_a == `TAG_g_quant26bt_pos);
reg [ram_latency:0] select_quant26bt_pos_reg_a;
wire [31:0] memory_controller_quant26bt_pos_out_a;
assign memory_controller_quant26bt_pos_out_a = {32{ select_quant26bt_pos_reg_a[ram_latency]}} & quant26bt_pos_out_a;

wire select_quant26bt_neg_a;
assign select_quant26bt_neg_a = (tag_a == `TAG_g_quant26bt_neg);
reg [ram_latency:0] select_quant26bt_neg_reg_a;
wire [31:0] memory_controller_quant26bt_neg_out_a;
assign memory_controller_quant26bt_neg_out_a = {32{ select_quant26bt_neg_reg_a[ram_latency]}} & quant26bt_neg_out_a;

wire select_qq2_code2_table_a;
assign select_qq2_code2_table_a = (tag_a == `TAG_g_qq2_code2_table);
reg [ram_latency:0] select_qq2_code2_table_reg_a;
wire [31:0] memory_controller_qq2_code2_table_out_a;
assign memory_controller_qq2_code2_table_out_a = {32{ select_qq2_code2_table_reg_a[ram_latency]}} & qq2_code2_table_out_a;

wire select_wh_code_table_a;
assign select_wh_code_table_a = (tag_a == `TAG_g_wh_code_table);
reg [ram_latency:0] select_wh_code_table_reg_a;
wire [31:0] memory_controller_wh_code_table_out_a;
assign memory_controller_wh_code_table_out_a = {32{ select_wh_code_table_reg_a[ram_latency]}} & wh_code_table_out_a;

wire select_tqmf_a;
assign select_tqmf_a = (tag_a == `TAG_g_tqmf);
reg [ram_latency:0] select_tqmf_reg_a;
wire [31:0] memory_controller_tqmf_out_a;
assign memory_controller_tqmf_out_a = {32{ select_tqmf_reg_a[ram_latency]}} & tqmf_out_a;

wire select_delay_bpl_a;
assign select_delay_bpl_a = (tag_a == `TAG_g_delay_bpl);
reg [ram_latency:0] select_delay_bpl_reg_a;
wire [31:0] memory_controller_delay_bpl_out_a;
assign memory_controller_delay_bpl_out_a = {32{ select_delay_bpl_reg_a[ram_latency]}} & delay_bpl_out_a;

wire select_delay_dltx_a;
assign select_delay_dltx_a = (tag_a == `TAG_g_delay_dltx);
reg [ram_latency:0] select_delay_dltx_reg_a;
wire [31:0] memory_controller_delay_dltx_out_a;
assign memory_controller_delay_dltx_out_a = {32{ select_delay_dltx_reg_a[ram_latency]}} & delay_dltx_out_a;

wire select_delay_bph_a;
assign select_delay_bph_a = (tag_a == `TAG_g_delay_bph);
reg [ram_latency:0] select_delay_bph_reg_a;
wire [31:0] memory_controller_delay_bph_out_a;
assign memory_controller_delay_bph_out_a = {32{ select_delay_bph_reg_a[ram_latency]}} & delay_bph_out_a;

wire select_delay_dhx_a;
assign select_delay_dhx_a = (tag_a == `TAG_g_delay_dhx);
reg [ram_latency:0] select_delay_dhx_reg_a;
wire [31:0] memory_controller_delay_dhx_out_a;
assign memory_controller_delay_dhx_out_a = {32{ select_delay_dhx_reg_a[ram_latency]}} & delay_dhx_out_a;

wire select_dec_del_bpl_a;
assign select_dec_del_bpl_a = (tag_a == `TAG_g_dec_del_bpl);
reg [ram_latency:0] select_dec_del_bpl_reg_a;
wire [31:0] memory_controller_dec_del_bpl_out_a;
assign memory_controller_dec_del_bpl_out_a = {32{ select_dec_del_bpl_reg_a[ram_latency]}} & dec_del_bpl_out_a;

wire select_dec_del_dltx_a;
assign select_dec_del_dltx_a = (tag_a == `TAG_g_dec_del_dltx);
reg [ram_latency:0] select_dec_del_dltx_reg_a;
wire [31:0] memory_controller_dec_del_dltx_out_a;
assign memory_controller_dec_del_dltx_out_a = {32{ select_dec_del_dltx_reg_a[ram_latency]}} & dec_del_dltx_out_a;

wire select_dec_del_bph_a;
assign select_dec_del_bph_a = (tag_a == `TAG_g_dec_del_bph);
reg [ram_latency:0] select_dec_del_bph_reg_a;
wire [31:0] memory_controller_dec_del_bph_out_a;
assign memory_controller_dec_del_bph_out_a = {32{ select_dec_del_bph_reg_a[ram_latency]}} & dec_del_bph_out_a;

wire select_dec_del_dhx_a;
assign select_dec_del_dhx_a = (tag_a == `TAG_g_dec_del_dhx);
reg [ram_latency:0] select_dec_del_dhx_reg_a;
wire [31:0] memory_controller_dec_del_dhx_out_a;
assign memory_controller_dec_del_dhx_out_a = {32{ select_dec_del_dhx_reg_a[ram_latency]}} & dec_del_dhx_out_a;

wire select_accumc_a;
assign select_accumc_a = (tag_a == `TAG_g_accumc);
reg [ram_latency:0] select_accumc_reg_a;
wire [31:0] memory_controller_accumc_out_a;
assign memory_controller_accumc_out_a = {32{ select_accumc_reg_a[ram_latency]}} & accumc_out_a;

wire select_accumd_a;
assign select_accumd_a = (tag_a == `TAG_g_accumd);
reg [ram_latency:0] select_accumd_reg_a;
wire [31:0] memory_controller_accumd_out_a;
assign memory_controller_accumd_out_a = {32{ select_accumd_reg_a[ram_latency]}} & accumd_out_a;

wire select_test_data_a;
assign select_test_data_a = (tag_a == `TAG_g_test_data);
reg [ram_latency:0] select_test_data_reg_a;
wire [31:0] memory_controller_test_data_out_a;
assign memory_controller_test_data_out_a = {32{ select_test_data_reg_a[ram_latency]}} & test_data_out_a;

wire select_test_compressed_a;
assign select_test_compressed_a = (tag_a == `TAG_g_test_compressed);
reg [ram_latency:0] select_test_compressed_reg_a;
wire [31:0] memory_controller_test_compressed_out_a;
assign memory_controller_test_compressed_out_a = {32{ select_test_compressed_reg_a[ram_latency]}} & test_compressed_out_a;

wire select_test_result_a;
assign select_test_result_a = (tag_a == `TAG_g_test_result);
reg [ram_latency:0] select_test_result_reg_a;
wire [31:0] memory_controller_test_result_out_a;
assign memory_controller_test_result_out_a = {32{ select_test_result_reg_a[ram_latency]}} & test_result_out_a;

wire select_compressed_a;
assign select_compressed_a = (tag_a == `TAG_g_compressed);
reg [ram_latency:0] select_compressed_reg_a;
wire [31:0] memory_controller_compressed_out_a;
assign memory_controller_compressed_out_a = {32{ select_compressed_reg_a[ram_latency]}} & compressed_out_a;

wire select_result_a;
assign select_result_a = (tag_a == `TAG_g_result);
reg [ram_latency:0] select_result_reg_a;
wire [31:0] memory_controller_result_out_a;
assign memory_controller_result_out_a = {32{ select_result_reg_a[ram_latency]}} & result_out_a;

always @(*)
begin
	h_address_a = memory_controller_address_a [5-1+2:2] & {5{select_h_a}};
	h_write_enable_a = memory_controller_write_enable_a & select_h_a;
	h_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	qq4_code4_table_address_a = memory_controller_address_a [4-1+2:2] & {4{select_qq4_code4_table_a}};
	qq4_code4_table_write_enable_a = memory_controller_write_enable_a & select_qq4_code4_table_a;
	qq4_code4_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	qq6_code6_table_address_a = memory_controller_address_a [6-1+2:2] & {6{select_qq6_code6_table_a}};
	qq6_code6_table_write_enable_a = memory_controller_write_enable_a & select_qq6_code6_table_a;
	qq6_code6_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	wl_code_table_address_a = memory_controller_address_a [4-1+2:2] & {4{select_wl_code_table_a}};
	wl_code_table_write_enable_a = memory_controller_write_enable_a & select_wl_code_table_a;
	wl_code_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	ilb_table_address_a = memory_controller_address_a [5-1+2:2] & {5{select_ilb_table_a}};
	ilb_table_write_enable_a = memory_controller_write_enable_a & select_ilb_table_a;
	ilb_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	decis_levl_address_a = memory_controller_address_a [5-1+2:2] & {5{select_decis_levl_a}};
	decis_levl_write_enable_a = memory_controller_write_enable_a & select_decis_levl_a;
	decis_levl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	quant26bt_pos_address_a = memory_controller_address_a [5-1+2:2] & {5{select_quant26bt_pos_a}};
	quant26bt_pos_write_enable_a = memory_controller_write_enable_a & select_quant26bt_pos_a;
	quant26bt_pos_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	quant26bt_neg_address_a = memory_controller_address_a [5-1+2:2] & {5{select_quant26bt_neg_a}};
	quant26bt_neg_write_enable_a = memory_controller_write_enable_a & select_quant26bt_neg_a;
	quant26bt_neg_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	qq2_code2_table_address_a = memory_controller_address_a [2-1+2:2] & {2{select_qq2_code2_table_a}};
	qq2_code2_table_write_enable_a = memory_controller_write_enable_a & select_qq2_code2_table_a;
	qq2_code2_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	wh_code_table_address_a = memory_controller_address_a [2-1+2:2] & {2{select_wh_code_table_a}};
	wh_code_table_write_enable_a = memory_controller_write_enable_a & select_wh_code_table_a;
	wh_code_table_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	tqmf_address_a = memory_controller_address_a [5-1+2:2] & {5{select_tqmf_a}};
	tqmf_write_enable_a = memory_controller_write_enable_a & select_tqmf_a;
	tqmf_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_bpl_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_bpl_a}};
	delay_bpl_write_enable_a = memory_controller_write_enable_a & select_delay_bpl_a;
	delay_bpl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_dltx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_dltx_a}};
	delay_dltx_write_enable_a = memory_controller_write_enable_a & select_delay_dltx_a;
	delay_dltx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_bph_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_bph_a}};
	delay_bph_write_enable_a = memory_controller_write_enable_a & select_delay_bph_a;
	delay_bph_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	delay_dhx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_delay_dhx_a}};
	delay_dhx_write_enable_a = memory_controller_write_enable_a & select_delay_dhx_a;
	delay_dhx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_bpl_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_bpl_a}};
	dec_del_bpl_write_enable_a = memory_controller_write_enable_a & select_dec_del_bpl_a;
	dec_del_bpl_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_dltx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_dltx_a}};
	dec_del_dltx_write_enable_a = memory_controller_write_enable_a & select_dec_del_dltx_a;
	dec_del_dltx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_bph_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_bph_a}};
	dec_del_bph_write_enable_a = memory_controller_write_enable_a & select_dec_del_bph_a;
	dec_del_bph_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	dec_del_dhx_address_a = memory_controller_address_a [3-1+2:2] & {3{select_dec_del_dhx_a}};
	dec_del_dhx_write_enable_a = memory_controller_write_enable_a & select_dec_del_dhx_a;
	dec_del_dhx_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	accumc_address_a = memory_controller_address_a [4-1+2:2] & {4{select_accumc_a}};
	accumc_write_enable_a = memory_controller_write_enable_a & select_accumc_a;
	accumc_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	accumd_address_a = memory_controller_address_a [4-1+2:2] & {4{select_accumd_a}};
	accumd_write_enable_a = memory_controller_write_enable_a & select_accumd_a;
	accumd_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_data_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_data_a}};
	test_data_write_enable_a = memory_controller_write_enable_a & select_test_data_a;
	test_data_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_compressed_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_compressed_a}};
	test_compressed_write_enable_a = memory_controller_write_enable_a & select_test_compressed_a;
	test_compressed_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	test_result_address_a = memory_controller_address_a [7-1+2:2] & {7{select_test_result_a}};
	test_result_write_enable_a = memory_controller_write_enable_a & select_test_result_a;
	test_result_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	compressed_address_a = memory_controller_address_a [7-1+2:2] & {7{select_compressed_a}};
	compressed_write_enable_a = memory_controller_write_enable_a & select_compressed_a;
	compressed_in_a [32-1:0] = memory_controller_in_a[32-1:0];

	result_address_a = memory_controller_address_a [7-1+2:2] & {7{select_result_a}};
	result_write_enable_a = memory_controller_write_enable_a & select_result_a;
	result_in_a [32-1:0] = memory_controller_in_a[32-1:0];

end
always @(*)
begin
	select_not_struct_a [2:0] = 3'b0 | {2{select_h_reg_a[ram_latency]}} | {2{select_qq4_code4_table_reg_a[ram_latency]}} | {2{select_qq6_code6_table_reg_a[ram_latency]}} | {2{select_wl_code_table_reg_a[ram_latency]}} | {2{select_ilb_table_reg_a[ram_latency]}} | {2{select_decis_levl_reg_a[ram_latency]}} | {2{select_quant26bt_pos_reg_a[ram_latency]}} | {2{select_quant26bt_neg_reg_a[ram_latency]}} | {2{select_qq2_code2_table_reg_a[ram_latency]}} | {2{select_wh_code_table_reg_a[ram_latency]}} | {2{select_tqmf_reg_a[ram_latency]}} | {2{select_delay_bpl_reg_a[ram_latency]}} | {2{select_delay_dltx_reg_a[ram_latency]}} | {2{select_delay_bph_reg_a[ram_latency]}} | {2{select_delay_dhx_reg_a[ram_latency]}} | {2{select_dec_del_bpl_reg_a[ram_latency]}} | {2{select_dec_del_dltx_reg_a[ram_latency]}} | {2{select_dec_del_bph_reg_a[ram_latency]}} | {2{select_dec_del_dhx_reg_a[ram_latency]}} | {2{select_accumc_reg_a[ram_latency]}} | {2{select_accumd_reg_a[ram_latency]}} | {2{select_test_data_reg_a[ram_latency]}} | {2{select_test_compressed_reg_a[ram_latency]}} | {2{select_test_result_reg_a[ram_latency]}} | {2{select_compressed_reg_a[ram_latency]}} | {2{select_result_reg_a[ram_latency]}};
	if (prevAddr_a[2:0] & select_not_struct_a[2:0] != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_a_and[0] = prevSize_a[1] | prevSize_a[0];
	prevSize_a_and[1] = prevSize_a[1];
	prevSize_a_and[2] = prevSize_a[1] & prevSize_a[0];
	if ((prevAddr_a & prevSize_a_and) != 0 && memory_controller_enable_a)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_a = memory_controller_out_reg_a & { 64{!memory_controller_enable_reg_a}};
	memory_controller_out_a = 1'b0 | memory_controller_out_prev_a | memory_controller_h_out_a | memory_controller_qq4_code4_table_out_a | memory_controller_qq6_code6_table_out_a | memory_controller_wl_code_table_out_a | memory_controller_ilb_table_out_a | memory_controller_decis_levl_out_a | memory_controller_quant26bt_pos_out_a | memory_controller_quant26bt_neg_out_a | memory_controller_qq2_code2_table_out_a | memory_controller_wh_code_table_out_a | memory_controller_tqmf_out_a | memory_controller_delay_bpl_out_a | memory_controller_delay_dltx_out_a | memory_controller_delay_bph_out_a | memory_controller_delay_dhx_out_a | memory_controller_dec_del_bpl_out_a | memory_controller_dec_del_dltx_out_a | memory_controller_dec_del_bph_out_a | memory_controller_dec_del_dhx_out_a | memory_controller_accumc_out_a | memory_controller_accumd_out_a | memory_controller_test_data_out_a | memory_controller_test_compressed_out_a | memory_controller_test_result_out_a | memory_controller_compressed_out_a | memory_controller_result_out_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_a <= memory_controller_out_a;
memory_controller_enable_reg_a <= memory_controller_enable_a;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_h_reg_a[j+1] <= select_h_reg_a[j];
select_qq4_code4_table_reg_a[j+1] <= select_qq4_code4_table_reg_a[j];
select_qq6_code6_table_reg_a[j+1] <= select_qq6_code6_table_reg_a[j];
select_wl_code_table_reg_a[j+1] <= select_wl_code_table_reg_a[j];
select_ilb_table_reg_a[j+1] <= select_ilb_table_reg_a[j];
select_decis_levl_reg_a[j+1] <= select_decis_levl_reg_a[j];
select_quant26bt_pos_reg_a[j+1] <= select_quant26bt_pos_reg_a[j];
select_quant26bt_neg_reg_a[j+1] <= select_quant26bt_neg_reg_a[j];
select_qq2_code2_table_reg_a[j+1] <= select_qq2_code2_table_reg_a[j];
select_wh_code_table_reg_a[j+1] <= select_wh_code_table_reg_a[j];
select_tqmf_reg_a[j+1] <= select_tqmf_reg_a[j];
select_delay_bpl_reg_a[j+1] <= select_delay_bpl_reg_a[j];
select_delay_dltx_reg_a[j+1] <= select_delay_dltx_reg_a[j];
select_delay_bph_reg_a[j+1] <= select_delay_bph_reg_a[j];
select_delay_dhx_reg_a[j+1] <= select_delay_dhx_reg_a[j];
select_dec_del_bpl_reg_a[j+1] <= select_dec_del_bpl_reg_a[j];
select_dec_del_dltx_reg_a[j+1] <= select_dec_del_dltx_reg_a[j];
select_dec_del_bph_reg_a[j+1] <= select_dec_del_bph_reg_a[j];
select_dec_del_dhx_reg_a[j+1] <= select_dec_del_dhx_reg_a[j];
select_accumc_reg_a[j+1] <= select_accumc_reg_a[j];
select_accumd_reg_a[j+1] <= select_accumd_reg_a[j];
select_test_data_reg_a[j+1] <= select_test_data_reg_a[j];
select_test_compressed_reg_a[j+1] <= select_test_compressed_reg_a[j];
select_test_result_reg_a[j+1] <= select_test_result_reg_a[j];
select_compressed_reg_a[j+1] <= select_compressed_reg_a[j];
select_result_reg_a[j+1] <= select_result_reg_a[j];
end
always @(*)
begin
select_h_reg_a[0] <= select_h_a;
select_qq4_code4_table_reg_a[0] <= select_qq4_code4_table_a;
select_qq6_code6_table_reg_a[0] <= select_qq6_code6_table_a;
select_wl_code_table_reg_a[0] <= select_wl_code_table_a;
select_ilb_table_reg_a[0] <= select_ilb_table_a;
select_decis_levl_reg_a[0] <= select_decis_levl_a;
select_quant26bt_pos_reg_a[0] <= select_quant26bt_pos_a;
select_quant26bt_neg_reg_a[0] <= select_quant26bt_neg_a;
select_qq2_code2_table_reg_a[0] <= select_qq2_code2_table_a;
select_wh_code_table_reg_a[0] <= select_wh_code_table_a;
select_tqmf_reg_a[0] <= select_tqmf_a;
select_delay_bpl_reg_a[0] <= select_delay_bpl_a;
select_delay_dltx_reg_a[0] <= select_delay_dltx_a;
select_delay_bph_reg_a[0] <= select_delay_bph_a;
select_delay_dhx_reg_a[0] <= select_delay_dhx_a;
select_dec_del_bpl_reg_a[0] <= select_dec_del_bpl_a;
select_dec_del_dltx_reg_a[0] <= select_dec_del_dltx_a;
select_dec_del_bph_reg_a[0] <= select_dec_del_bph_a;
select_dec_del_dhx_reg_a[0] <= select_dec_del_dhx_a;
select_accumc_reg_a[0] <= select_accumc_a;
select_accumd_reg_a[0] <= select_accumd_a;
select_test_data_reg_a[0] <= select_test_data_a;
select_test_compressed_reg_a[0] <= select_test_compressed_a;
select_test_result_reg_a[0] <= select_test_result_a;
select_compressed_reg_a[0] <= select_compressed_a;
select_result_reg_a[0] <= select_result_a;
end

reg [2:0] select_not_struct_b;

wire select_h_b;
assign select_h_b = (tag_b == `TAG_g_h);
reg [ram_latency:0] select_h_reg_b;
wire [31:0] memory_controller_h_out_b;
assign memory_controller_h_out_b = {32{ select_h_reg_b[ram_latency]}} & h_out_b;

wire select_qq4_code4_table_b;
assign select_qq4_code4_table_b = (tag_b == `TAG_g_qq4_code4_table);
reg [ram_latency:0] select_qq4_code4_table_reg_b;
wire [31:0] memory_controller_qq4_code4_table_out_b;
assign memory_controller_qq4_code4_table_out_b = {32{ select_qq4_code4_table_reg_b[ram_latency]}} & qq4_code4_table_out_b;

wire select_qq6_code6_table_b;
assign select_qq6_code6_table_b = (tag_b == `TAG_g_qq6_code6_table);
reg [ram_latency:0] select_qq6_code6_table_reg_b;
wire [31:0] memory_controller_qq6_code6_table_out_b;
assign memory_controller_qq6_code6_table_out_b = {32{ select_qq6_code6_table_reg_b[ram_latency]}} & qq6_code6_table_out_b;

wire select_wl_code_table_b;
assign select_wl_code_table_b = (tag_b == `TAG_g_wl_code_table);
reg [ram_latency:0] select_wl_code_table_reg_b;
wire [31:0] memory_controller_wl_code_table_out_b;
assign memory_controller_wl_code_table_out_b = {32{ select_wl_code_table_reg_b[ram_latency]}} & wl_code_table_out_b;

wire select_ilb_table_b;
assign select_ilb_table_b = (tag_b == `TAG_g_ilb_table);
reg [ram_latency:0] select_ilb_table_reg_b;
wire [31:0] memory_controller_ilb_table_out_b;
assign memory_controller_ilb_table_out_b = {32{ select_ilb_table_reg_b[ram_latency]}} & ilb_table_out_b;

wire select_decis_levl_b;
assign select_decis_levl_b = (tag_b == `TAG_g_decis_levl);
reg [ram_latency:0] select_decis_levl_reg_b;
wire [31:0] memory_controller_decis_levl_out_b;
assign memory_controller_decis_levl_out_b = {32{ select_decis_levl_reg_b[ram_latency]}} & decis_levl_out_b;

wire select_quant26bt_pos_b;
assign select_quant26bt_pos_b = (tag_b == `TAG_g_quant26bt_pos);
reg [ram_latency:0] select_quant26bt_pos_reg_b;
wire [31:0] memory_controller_quant26bt_pos_out_b;
assign memory_controller_quant26bt_pos_out_b = {32{ select_quant26bt_pos_reg_b[ram_latency]}} & quant26bt_pos_out_b;

wire select_quant26bt_neg_b;
assign select_quant26bt_neg_b = (tag_b == `TAG_g_quant26bt_neg);
reg [ram_latency:0] select_quant26bt_neg_reg_b;
wire [31:0] memory_controller_quant26bt_neg_out_b;
assign memory_controller_quant26bt_neg_out_b = {32{ select_quant26bt_neg_reg_b[ram_latency]}} & quant26bt_neg_out_b;

wire select_qq2_code2_table_b;
assign select_qq2_code2_table_b = (tag_b == `TAG_g_qq2_code2_table);
reg [ram_latency:0] select_qq2_code2_table_reg_b;
wire [31:0] memory_controller_qq2_code2_table_out_b;
assign memory_controller_qq2_code2_table_out_b = {32{ select_qq2_code2_table_reg_b[ram_latency]}} & qq2_code2_table_out_b;

wire select_wh_code_table_b;
assign select_wh_code_table_b = (tag_b == `TAG_g_wh_code_table);
reg [ram_latency:0] select_wh_code_table_reg_b;
wire [31:0] memory_controller_wh_code_table_out_b;
assign memory_controller_wh_code_table_out_b = {32{ select_wh_code_table_reg_b[ram_latency]}} & wh_code_table_out_b;

wire select_tqmf_b;
assign select_tqmf_b = (tag_b == `TAG_g_tqmf);
reg [ram_latency:0] select_tqmf_reg_b;
wire [31:0] memory_controller_tqmf_out_b;
assign memory_controller_tqmf_out_b = {32{ select_tqmf_reg_b[ram_latency]}} & tqmf_out_b;

wire select_delay_bpl_b;
assign select_delay_bpl_b = (tag_b == `TAG_g_delay_bpl);
reg [ram_latency:0] select_delay_bpl_reg_b;
wire [31:0] memory_controller_delay_bpl_out_b;
assign memory_controller_delay_bpl_out_b = {32{ select_delay_bpl_reg_b[ram_latency]}} & delay_bpl_out_b;

wire select_delay_dltx_b;
assign select_delay_dltx_b = (tag_b == `TAG_g_delay_dltx);
reg [ram_latency:0] select_delay_dltx_reg_b;
wire [31:0] memory_controller_delay_dltx_out_b;
assign memory_controller_delay_dltx_out_b = {32{ select_delay_dltx_reg_b[ram_latency]}} & delay_dltx_out_b;

wire select_delay_bph_b;
assign select_delay_bph_b = (tag_b == `TAG_g_delay_bph);
reg [ram_latency:0] select_delay_bph_reg_b;
wire [31:0] memory_controller_delay_bph_out_b;
assign memory_controller_delay_bph_out_b = {32{ select_delay_bph_reg_b[ram_latency]}} & delay_bph_out_b;

wire select_delay_dhx_b;
assign select_delay_dhx_b = (tag_b == `TAG_g_delay_dhx);
reg [ram_latency:0] select_delay_dhx_reg_b;
wire [31:0] memory_controller_delay_dhx_out_b;
assign memory_controller_delay_dhx_out_b = {32{ select_delay_dhx_reg_b[ram_latency]}} & delay_dhx_out_b;

wire select_dec_del_bpl_b;
assign select_dec_del_bpl_b = (tag_b == `TAG_g_dec_del_bpl);
reg [ram_latency:0] select_dec_del_bpl_reg_b;
wire [31:0] memory_controller_dec_del_bpl_out_b;
assign memory_controller_dec_del_bpl_out_b = {32{ select_dec_del_bpl_reg_b[ram_latency]}} & dec_del_bpl_out_b;

wire select_dec_del_dltx_b;
assign select_dec_del_dltx_b = (tag_b == `TAG_g_dec_del_dltx);
reg [ram_latency:0] select_dec_del_dltx_reg_b;
wire [31:0] memory_controller_dec_del_dltx_out_b;
assign memory_controller_dec_del_dltx_out_b = {32{ select_dec_del_dltx_reg_b[ram_latency]}} & dec_del_dltx_out_b;

wire select_dec_del_bph_b;
assign select_dec_del_bph_b = (tag_b == `TAG_g_dec_del_bph);
reg [ram_latency:0] select_dec_del_bph_reg_b;
wire [31:0] memory_controller_dec_del_bph_out_b;
assign memory_controller_dec_del_bph_out_b = {32{ select_dec_del_bph_reg_b[ram_latency]}} & dec_del_bph_out_b;

wire select_dec_del_dhx_b;
assign select_dec_del_dhx_b = (tag_b == `TAG_g_dec_del_dhx);
reg [ram_latency:0] select_dec_del_dhx_reg_b;
wire [31:0] memory_controller_dec_del_dhx_out_b;
assign memory_controller_dec_del_dhx_out_b = {32{ select_dec_del_dhx_reg_b[ram_latency]}} & dec_del_dhx_out_b;

wire select_accumc_b;
assign select_accumc_b = (tag_b == `TAG_g_accumc);
reg [ram_latency:0] select_accumc_reg_b;
wire [31:0] memory_controller_accumc_out_b;
assign memory_controller_accumc_out_b = {32{ select_accumc_reg_b[ram_latency]}} & accumc_out_b;

wire select_accumd_b;
assign select_accumd_b = (tag_b == `TAG_g_accumd);
reg [ram_latency:0] select_accumd_reg_b;
wire [31:0] memory_controller_accumd_out_b;
assign memory_controller_accumd_out_b = {32{ select_accumd_reg_b[ram_latency]}} & accumd_out_b;

wire select_test_data_b;
assign select_test_data_b = (tag_b == `TAG_g_test_data);
reg [ram_latency:0] select_test_data_reg_b;
wire [31:0] memory_controller_test_data_out_b;
assign memory_controller_test_data_out_b = {32{ select_test_data_reg_b[ram_latency]}} & test_data_out_b;

wire select_test_compressed_b;
assign select_test_compressed_b = (tag_b == `TAG_g_test_compressed);
reg [ram_latency:0] select_test_compressed_reg_b;
wire [31:0] memory_controller_test_compressed_out_b;
assign memory_controller_test_compressed_out_b = {32{ select_test_compressed_reg_b[ram_latency]}} & test_compressed_out_b;

wire select_test_result_b;
assign select_test_result_b = (tag_b == `TAG_g_test_result);
reg [ram_latency:0] select_test_result_reg_b;
wire [31:0] memory_controller_test_result_out_b;
assign memory_controller_test_result_out_b = {32{ select_test_result_reg_b[ram_latency]}} & test_result_out_b;

wire select_compressed_b;
assign select_compressed_b = (tag_b == `TAG_g_compressed);
reg [ram_latency:0] select_compressed_reg_b;
wire [31:0] memory_controller_compressed_out_b;
assign memory_controller_compressed_out_b = {32{ select_compressed_reg_b[ram_latency]}} & compressed_out_b;

wire select_result_b;
assign select_result_b = (tag_b == `TAG_g_result);
reg [ram_latency:0] select_result_reg_b;
wire [31:0] memory_controller_result_out_b;
assign memory_controller_result_out_b = {32{ select_result_reg_b[ram_latency]}} & result_out_b;

always @(*)
begin
	h_address_b = memory_controller_address_b [5-1+2:2] & {5{select_h_b}};
	h_write_enable_b = memory_controller_write_enable_b & select_h_b;
	h_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	qq4_code4_table_address_b = memory_controller_address_b [4-1+2:2] & {4{select_qq4_code4_table_b}};
	qq4_code4_table_write_enable_b = memory_controller_write_enable_b & select_qq4_code4_table_b;
	qq4_code4_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	qq6_code6_table_address_b = memory_controller_address_b [6-1+2:2] & {6{select_qq6_code6_table_b}};
	qq6_code6_table_write_enable_b = memory_controller_write_enable_b & select_qq6_code6_table_b;
	qq6_code6_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	wl_code_table_address_b = memory_controller_address_b [4-1+2:2] & {4{select_wl_code_table_b}};
	wl_code_table_write_enable_b = memory_controller_write_enable_b & select_wl_code_table_b;
	wl_code_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	ilb_table_address_b = memory_controller_address_b [5-1+2:2] & {5{select_ilb_table_b}};
	ilb_table_write_enable_b = memory_controller_write_enable_b & select_ilb_table_b;
	ilb_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	decis_levl_address_b = memory_controller_address_b [5-1+2:2] & {5{select_decis_levl_b}};
	decis_levl_write_enable_b = memory_controller_write_enable_b & select_decis_levl_b;
	decis_levl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	quant26bt_pos_address_b = memory_controller_address_b [5-1+2:2] & {5{select_quant26bt_pos_b}};
	quant26bt_pos_write_enable_b = memory_controller_write_enable_b & select_quant26bt_pos_b;
	quant26bt_pos_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	quant26bt_neg_address_b = memory_controller_address_b [5-1+2:2] & {5{select_quant26bt_neg_b}};
	quant26bt_neg_write_enable_b = memory_controller_write_enable_b & select_quant26bt_neg_b;
	quant26bt_neg_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	qq2_code2_table_address_b = memory_controller_address_b [2-1+2:2] & {2{select_qq2_code2_table_b}};
	qq2_code2_table_write_enable_b = memory_controller_write_enable_b & select_qq2_code2_table_b;
	qq2_code2_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	wh_code_table_address_b = memory_controller_address_b [2-1+2:2] & {2{select_wh_code_table_b}};
	wh_code_table_write_enable_b = memory_controller_write_enable_b & select_wh_code_table_b;
	wh_code_table_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	tqmf_address_b = memory_controller_address_b [5-1+2:2] & {5{select_tqmf_b}};
	tqmf_write_enable_b = memory_controller_write_enable_b & select_tqmf_b;
	tqmf_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_bpl_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_bpl_b}};
	delay_bpl_write_enable_b = memory_controller_write_enable_b & select_delay_bpl_b;
	delay_bpl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_dltx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_dltx_b}};
	delay_dltx_write_enable_b = memory_controller_write_enable_b & select_delay_dltx_b;
	delay_dltx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_bph_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_bph_b}};
	delay_bph_write_enable_b = memory_controller_write_enable_b & select_delay_bph_b;
	delay_bph_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	delay_dhx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_delay_dhx_b}};
	delay_dhx_write_enable_b = memory_controller_write_enable_b & select_delay_dhx_b;
	delay_dhx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_bpl_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_bpl_b}};
	dec_del_bpl_write_enable_b = memory_controller_write_enable_b & select_dec_del_bpl_b;
	dec_del_bpl_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_dltx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_dltx_b}};
	dec_del_dltx_write_enable_b = memory_controller_write_enable_b & select_dec_del_dltx_b;
	dec_del_dltx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_bph_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_bph_b}};
	dec_del_bph_write_enable_b = memory_controller_write_enable_b & select_dec_del_bph_b;
	dec_del_bph_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	dec_del_dhx_address_b = memory_controller_address_b [3-1+2:2] & {3{select_dec_del_dhx_b}};
	dec_del_dhx_write_enable_b = memory_controller_write_enable_b & select_dec_del_dhx_b;
	dec_del_dhx_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	accumc_address_b = memory_controller_address_b [4-1+2:2] & {4{select_accumc_b}};
	accumc_write_enable_b = memory_controller_write_enable_b & select_accumc_b;
	accumc_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	accumd_address_b = memory_controller_address_b [4-1+2:2] & {4{select_accumd_b}};
	accumd_write_enable_b = memory_controller_write_enable_b & select_accumd_b;
	accumd_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_data_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_data_b}};
	test_data_write_enable_b = memory_controller_write_enable_b & select_test_data_b;
	test_data_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_compressed_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_compressed_b}};
	test_compressed_write_enable_b = memory_controller_write_enable_b & select_test_compressed_b;
	test_compressed_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	test_result_address_b = memory_controller_address_b [7-1+2:2] & {7{select_test_result_b}};
	test_result_write_enable_b = memory_controller_write_enable_b & select_test_result_b;
	test_result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	compressed_address_b = memory_controller_address_b [7-1+2:2] & {7{select_compressed_b}};
	compressed_write_enable_b = memory_controller_write_enable_b & select_compressed_b;
	compressed_in_b [32-1:0] = memory_controller_in_b[32-1:0];

	result_address_b = memory_controller_address_b [7-1+2:2] & {7{select_result_b}};
	result_write_enable_b = memory_controller_write_enable_b & select_result_b;
	result_in_b [32-1:0] = memory_controller_in_b[32-1:0];

end
always @(*)
begin
	select_not_struct_b [2:0] = 3'b0 | {2{select_h_reg_b[ram_latency]}} | {2{select_qq4_code4_table_reg_b[ram_latency]}} | {2{select_qq6_code6_table_reg_b[ram_latency]}} | {2{select_wl_code_table_reg_b[ram_latency]}} | {2{select_ilb_table_reg_b[ram_latency]}} | {2{select_decis_levl_reg_b[ram_latency]}} | {2{select_quant26bt_pos_reg_b[ram_latency]}} | {2{select_quant26bt_neg_reg_b[ram_latency]}} | {2{select_qq2_code2_table_reg_b[ram_latency]}} | {2{select_wh_code_table_reg_b[ram_latency]}} | {2{select_tqmf_reg_b[ram_latency]}} | {2{select_delay_bpl_reg_b[ram_latency]}} | {2{select_delay_dltx_reg_b[ram_latency]}} | {2{select_delay_bph_reg_b[ram_latency]}} | {2{select_delay_dhx_reg_b[ram_latency]}} | {2{select_dec_del_bpl_reg_b[ram_latency]}} | {2{select_dec_del_dltx_reg_b[ram_latency]}} | {2{select_dec_del_bph_reg_b[ram_latency]}} | {2{select_dec_del_dhx_reg_b[ram_latency]}} | {2{select_accumc_reg_b[ram_latency]}} | {2{select_accumd_reg_b[ram_latency]}} | {2{select_test_data_reg_b[ram_latency]}} | {2{select_test_compressed_reg_b[ram_latency]}} | {2{select_test_result_reg_b[ram_latency]}} | {2{select_compressed_reg_b[ram_latency]}} | {2{select_result_reg_b[ram_latency]}};
	if (prevAddr_b[2:0] & select_not_struct_b[2:0] != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end

	prevSize_b_and[0] = prevSize_b[1] | prevSize_b[0];
	prevSize_b_and[1] = prevSize_b[1];
	prevSize_b_and[2] = prevSize_b[1] & prevSize_b[0];
	if ((prevAddr_b & prevSize_b_and) != 0 && memory_controller_enable_b)
	begin
		$display("Error: memory address not aligned to ram word size!");
		$finish;
	end
	memory_controller_out_prev_b = memory_controller_out_reg_b & { 64{!memory_controller_enable_reg_b}};
	memory_controller_out_b = 1'b0 | memory_controller_out_prev_b | memory_controller_h_out_b | memory_controller_qq4_code4_table_out_b | memory_controller_qq6_code6_table_out_b | memory_controller_wl_code_table_out_b | memory_controller_ilb_table_out_b | memory_controller_decis_levl_out_b | memory_controller_quant26bt_pos_out_b | memory_controller_quant26bt_neg_out_b | memory_controller_qq2_code2_table_out_b | memory_controller_wh_code_table_out_b | memory_controller_tqmf_out_b | memory_controller_delay_bpl_out_b | memory_controller_delay_dltx_out_b | memory_controller_delay_bph_out_b | memory_controller_delay_dhx_out_b | memory_controller_dec_del_bpl_out_b | memory_controller_dec_del_dltx_out_b | memory_controller_dec_del_bph_out_b | memory_controller_dec_del_dhx_out_b | memory_controller_accumc_out_b | memory_controller_accumd_out_b | memory_controller_test_data_out_b | memory_controller_test_compressed_out_b | memory_controller_test_result_out_b | memory_controller_compressed_out_b | memory_controller_result_out_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
begin
memory_controller_out_reg_b <= memory_controller_out_b;
memory_controller_enable_reg_b <= memory_controller_enable_b;
end

always @(posedge clk)
if (!memory_controller_waitrequest)
for (j = 0; j < ram_latency; j=j+1)
begin
select_h_reg_b[j+1] <= select_h_reg_b[j];
select_qq4_code4_table_reg_b[j+1] <= select_qq4_code4_table_reg_b[j];
select_qq6_code6_table_reg_b[j+1] <= select_qq6_code6_table_reg_b[j];
select_wl_code_table_reg_b[j+1] <= select_wl_code_table_reg_b[j];
select_ilb_table_reg_b[j+1] <= select_ilb_table_reg_b[j];
select_decis_levl_reg_b[j+1] <= select_decis_levl_reg_b[j];
select_quant26bt_pos_reg_b[j+1] <= select_quant26bt_pos_reg_b[j];
select_quant26bt_neg_reg_b[j+1] <= select_quant26bt_neg_reg_b[j];
select_qq2_code2_table_reg_b[j+1] <= select_qq2_code2_table_reg_b[j];
select_wh_code_table_reg_b[j+1] <= select_wh_code_table_reg_b[j];
select_tqmf_reg_b[j+1] <= select_tqmf_reg_b[j];
select_delay_bpl_reg_b[j+1] <= select_delay_bpl_reg_b[j];
select_delay_dltx_reg_b[j+1] <= select_delay_dltx_reg_b[j];
select_delay_bph_reg_b[j+1] <= select_delay_bph_reg_b[j];
select_delay_dhx_reg_b[j+1] <= select_delay_dhx_reg_b[j];
select_dec_del_bpl_reg_b[j+1] <= select_dec_del_bpl_reg_b[j];
select_dec_del_dltx_reg_b[j+1] <= select_dec_del_dltx_reg_b[j];
select_dec_del_bph_reg_b[j+1] <= select_dec_del_bph_reg_b[j];
select_dec_del_dhx_reg_b[j+1] <= select_dec_del_dhx_reg_b[j];
select_accumc_reg_b[j+1] <= select_accumc_reg_b[j];
select_accumd_reg_b[j+1] <= select_accumd_reg_b[j];
select_test_data_reg_b[j+1] <= select_test_data_reg_b[j];
select_test_compressed_reg_b[j+1] <= select_test_compressed_reg_b[j];
select_test_result_reg_b[j+1] <= select_test_result_reg_b[j];
select_compressed_reg_b[j+1] <= select_compressed_reg_b[j];
select_result_reg_b[j+1] <= select_result_reg_b[j];
end
always @(*)
begin
select_h_reg_b[0] <= select_h_b;
select_qq4_code4_table_reg_b[0] <= select_qq4_code4_table_b;
select_qq6_code6_table_reg_b[0] <= select_qq6_code6_table_b;
select_wl_code_table_reg_b[0] <= select_wl_code_table_b;
select_ilb_table_reg_b[0] <= select_ilb_table_b;
select_decis_levl_reg_b[0] <= select_decis_levl_b;
select_quant26bt_pos_reg_b[0] <= select_quant26bt_pos_b;
select_quant26bt_neg_reg_b[0] <= select_quant26bt_neg_b;
select_qq2_code2_table_reg_b[0] <= select_qq2_code2_table_b;
select_wh_code_table_reg_b[0] <= select_wh_code_table_b;
select_tqmf_reg_b[0] <= select_tqmf_b;
select_delay_bpl_reg_b[0] <= select_delay_bpl_b;
select_delay_dltx_reg_b[0] <= select_delay_dltx_b;
select_delay_bph_reg_b[0] <= select_delay_bph_b;
select_delay_dhx_reg_b[0] <= select_delay_dhx_b;
select_dec_del_bpl_reg_b[0] <= select_dec_del_bpl_b;
select_dec_del_dltx_reg_b[0] <= select_dec_del_dltx_b;
select_dec_del_bph_reg_b[0] <= select_dec_del_bph_b;
select_dec_del_dhx_reg_b[0] <= select_dec_del_dhx_b;
select_accumc_reg_b[0] <= select_accumc_b;
select_accumd_reg_b[0] <= select_accumd_b;
select_test_data_reg_b[0] <= select_test_data_b;
select_test_compressed_reg_b[0] <= select_test_compressed_b;
select_test_result_reg_b[0] <= select_test_result_b;
select_compressed_reg_b[0] <= select_compressed_b;
select_result_reg_b[0] <= select_result_b;
end

endmodule 

`timescale 1 ns / 1 ns
module main
(
	clk,
	clk2x,
	clk1x_follower,
	reset,
	start,
	finish,
	memory_controller_waitrequest,
	memory_controller_enable_a,
	memory_controller_address_a,
	memory_controller_write_enable_a,
	memory_controller_in_a,
	memory_controller_size_a,
	memory_controller_out_a,
	memory_controller_enable_b,
	memory_controller_address_b,
	memory_controller_write_enable_b,
	memory_controller_in_b,
	memory_controller_size_b,
	memory_controller_out_b,
	return_val
);

parameter [8:0] LEGUP_0 = 9'd0;
parameter [8:0] LEGUP_F_main_BB__1_1 = 9'd1;
parameter [8:0] LEGUP_F_main_BB_preheader49preheader_2 = 9'd2;
parameter [8:0] LEGUP_F_main_BB__3_3 = 9'd3;
parameter [8:0] LEGUP_F_main_BB__3_4 = 9'd4;
parameter [8:0] LEGUP_F_main_BB__3_5 = 9'd5;
parameter [8:0] LEGUP_F_main_BB_preheader49_6 = 9'd6;
parameter [8:0] LEGUP_F_main_BB_preheader48preheader_7 = 9'd7;
parameter [8:0] LEGUP_F_main_BB__6_8 = 9'd8;
parameter [8:0] LEGUP_F_main_BB__6_9 = 9'd9;
parameter [8:0] LEGUP_F_main_BB__6_10 = 9'd10;
parameter [8:0] LEGUP_F_main_BB_preheader48_11 = 9'd11;
parameter [8:0] LEGUP_F_main_BB_preheader47preheader_12 = 9'd12;
parameter [8:0] LEGUP_F_main_BB__9_13 = 9'd13;
parameter [8:0] LEGUP_F_main_BB__9_14 = 9'd14;
parameter [8:0] LEGUP_F_main_BB_preheader47_15 = 9'd15;
parameter [8:0] LEGUP_F_main_BB_resetexitipreheader_16 = 9'd16;
parameter [8:0] LEGUP_F_main_BB__12_17 = 9'd17;
parameter [8:0] LEGUP_F_main_BB__12_18 = 9'd18;
parameter [8:0] LEGUP_F_main_BB_resetexiti_19 = 9'd19;
parameter [8:0] LEGUP_F_main_BB__14_20 = 9'd20;
parameter [8:0] LEGUP_F_main_BB__14_21 = 9'd21;
parameter [8:0] LEGUP_F_main_BB__14_22 = 9'd22;
parameter [8:0] LEGUP_F_main_BB__14_23 = 9'd23;
parameter [8:0] LEGUP_F_main_BB__22_24 = 9'd24;
parameter [8:0] LEGUP_F_main_BB__27_25 = 9'd25;
parameter [8:0] LEGUP_F_main_BB__27_26 = 9'd26;
parameter [8:0] LEGUP_F_main_BB__27_27 = 9'd27;
parameter [8:0] LEGUP_F_main_BB__27_28 = 9'd28;
parameter [8:0] LEGUP_F_main_BB__27_29 = 9'd29;
parameter [8:0] LEGUP_F_main_BB__37_30 = 9'd30;
parameter [8:0] LEGUP_F_main_BB__37_31 = 9'd31;
parameter [8:0] LEGUP_F_main_BB__37_32 = 9'd32;
parameter [8:0] LEGUP_F_main_BB__40_33 = 9'd33;
parameter [8:0] LEGUP_F_main_BB__42_34 = 9'd34;
parameter [8:0] LEGUP_F_main_BB__42_35 = 9'd35;
parameter [8:0] LEGUP_F_main_BB__42_36 = 9'd36;
parameter [8:0] LEGUP_F_main_BB__42_37 = 9'd37;
parameter [8:0] LEGUP_F_main_BB__42_38 = 9'd38;
parameter [8:0] LEGUP_F_main_BB__47_39 = 9'd39;
parameter [8:0] LEGUP_F_main_BB__47_40 = 9'd40;
parameter [8:0] LEGUP_F_main_BB__47_41 = 9'd41;
parameter [8:0] LEGUP_F_main_BB__47_42 = 9'd42;
parameter [8:0] LEGUP_F_main_BB__47_43 = 9'd43;
parameter [8:0] LEGUP_F_main_BB__52_44 = 9'd44;
parameter [8:0] LEGUP_F_main_BB__53_45 = 9'd45;
parameter [8:0] LEGUP_F_main_BB__53_46 = 9'd46;
parameter [8:0] LEGUP_F_main_BB__53_47 = 9'd47;
parameter [8:0] LEGUP_F_main_BB__53_48 = 9'd48;
parameter [8:0] LEGUP_F_main_BB_filtezexiti23i_49 = 9'd49;
parameter [8:0] LEGUP_F_main_BB_filtezexiti23i_50 = 9'd50;
parameter [8:0] LEGUP_F_main_BB__76_51 = 9'd51;
parameter [8:0] LEGUP_F_main_BB__79_52 = 9'd52;
parameter [8:0] LEGUP_F_main_BB__79_53 = 9'd53;
parameter [8:0] LEGUP_F_main_BB__79_54 = 9'd54;
parameter [8:0] LEGUP_F_main_BB__79_55 = 9'd55;
parameter [8:0] LEGUP_F_main_BB__84_56 = 9'd56;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_57 = 9'd57;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_58 = 9'd58;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_59 = 9'd59;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_60 = 9'd60;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_61 = 9'd61;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_62 = 9'd62;
parameter [8:0] LEGUP_F_main_BB_quantlexitii_63 = 9'd63;
parameter [8:0] LEGUP_F_main_BB__97_64 = 9'd64;
parameter [8:0] LEGUP_F_main_BB_logsclexiti24i_65 = 9'd65;
parameter [8:0] LEGUP_F_main_BB_logsclexiti24i_66 = 9'd66;
parameter [8:0] LEGUP_F_main_BB_logsclexiti24i_67 = 9'd67;
parameter [8:0] LEGUP_F_main_BB_preheader45preheader_68 = 9'd68;
parameter [8:0] LEGUP_F_main_BB_preheader44preheader_69 = 9'd69;
parameter [8:0] LEGUP_F_main_BB_preheader44_70 = 9'd70;
parameter [8:0] LEGUP_F_main_BB__110_71 = 9'd71;
parameter [8:0] LEGUP_F_main_BB__110_72 = 9'd72;
parameter [8:0] LEGUP_F_main_BB__110_73 = 9'd73;
parameter [8:0] LEGUP_F_main_BB__110_74 = 9'd74;
parameter [8:0] LEGUP_F_main_BB__110_75 = 9'd75;
parameter [8:0] LEGUP_F_main_BB_preheader45_76 = 9'd76;
parameter [8:0] LEGUP_F_main_BB__116_77 = 9'd77;
parameter [8:0] LEGUP_F_main_BB__116_78 = 9'd78;
parameter [8:0] LEGUP_F_main_BB__116_79 = 9'd79;
parameter [8:0] LEGUP_F_main_BB__116_80 = 9'd80;
parameter [8:0] LEGUP_F_main_BB__116_81 = 9'd81;
parameter [8:0] LEGUP_F_main_BB_upzeroexitloopexit_82 = 9'd82;
parameter [8:0] LEGUP_F_main_BB_upzeroexitloopexit4_83 = 9'd83;
parameter [8:0] LEGUP_F_main_BB_upzeroexit_84 = 9'd84;
parameter [8:0] LEGUP_F_main_BB_upzeroexit_85 = 9'd85;
parameter [8:0] LEGUP_F_main_BB_upzeroexit_86 = 9'd86;
parameter [8:0] LEGUP_F_main_BB_upzeroexit_87 = 9'd87;
parameter [8:0] LEGUP_F_main_BB_upzeroexit_88 = 9'd88;
parameter [8:0] LEGUP_F_main_BB__143_89 = 9'd89;
parameter [8:0] LEGUP_F_main_BB_uppol2exit34_90 = 9'd90;
parameter [8:0] LEGUP_F_main_BB_uppol2exit34_91 = 9'd91;
parameter [8:0] LEGUP_F_main_BB_uppol2exit34_92 = 9'd92;
parameter [8:0] LEGUP_F_main_BB_uppol2exit34_93 = 9'd93;
parameter [8:0] LEGUP_F_main_BB__156_94 = 9'd94;
parameter [8:0] LEGUP_F_main_BB__157_95 = 9'd95;
parameter [8:0] LEGUP_F_main_BB__157_96 = 9'd96;
parameter [8:0] LEGUP_F_main_BB__157_97 = 9'd97;
parameter [8:0] LEGUP_F_main_BB__157_98 = 9'd98;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_99 = 9'd99;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_100 = 9'd100;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_101 = 9'd101;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_102 = 9'd102;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_103 = 9'd103;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_104 = 9'd104;
parameter [8:0] LEGUP_F_main_BB_filtezexit8i26i_105 = 9'd105;
parameter [8:0] LEGUP_F_main_BB__191_106 = 9'd106;
parameter [8:0] LEGUP_F_main_BB_logschexiti27i_107 = 9'd107;
parameter [8:0] LEGUP_F_main_BB_logschexiti27i_108 = 9'd108;
parameter [8:0] LEGUP_F_main_BB_logschexiti27i_109 = 9'd109;
parameter [8:0] LEGUP_F_main_BB_preheader42preheader_110 = 9'd110;
parameter [8:0] LEGUP_F_main_BB_preheader41preheader_111 = 9'd111;
parameter [8:0] LEGUP_F_main_BB_preheader41_112 = 9'd112;
parameter [8:0] LEGUP_F_main_BB__204_113 = 9'd113;
parameter [8:0] LEGUP_F_main_BB__204_114 = 9'd114;
parameter [8:0] LEGUP_F_main_BB__204_115 = 9'd115;
parameter [8:0] LEGUP_F_main_BB__204_116 = 9'd116;
parameter [8:0] LEGUP_F_main_BB__204_117 = 9'd117;
parameter [8:0] LEGUP_F_main_BB_preheader42_118 = 9'd118;
parameter [8:0] LEGUP_F_main_BB__210_119 = 9'd119;
parameter [8:0] LEGUP_F_main_BB__210_120 = 9'd120;
parameter [8:0] LEGUP_F_main_BB__210_121 = 9'd121;
parameter [8:0] LEGUP_F_main_BB__210_122 = 9'd122;
parameter [8:0] LEGUP_F_main_BB__210_123 = 9'd123;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29loopexit_124 = 9'd124;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29loopexit3_125 = 9'd125;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29_126 = 9'd126;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29_127 = 9'd127;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29_128 = 9'd128;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29_129 = 9'd129;
parameter [8:0] LEGUP_F_main_BB_upzeroexit29_130 = 9'd130;
parameter [8:0] LEGUP_F_main_BB__237_131 = 9'd131;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_132 = 9'd132;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_133 = 9'd133;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_134 = 9'd134;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_135 = 9'd135;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_136 = 9'd136;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_137 = 9'd137;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_138 = 9'd138;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_139 = 9'd139;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_140 = 9'd140;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_141 = 9'd141;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_142 = 9'd142;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_143 = 9'd143;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_144 = 9'd144;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_145 = 9'd145;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_146 = 9'd146;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_147 = 9'd147;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_148 = 9'd148;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_149 = 9'd149;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_150 = 9'd150;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_151 = 9'd151;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_152 = 9'd152;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_153 = 9'd153;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_154 = 9'd154;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_155 = 9'd155;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_156 = 9'd156;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_157 = 9'd157;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_158 = 9'd158;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_159 = 9'd159;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_160 = 9'd160;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_161 = 9'd161;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_162 = 9'd162;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_163 = 9'd163;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_164 = 9'd164;
parameter [8:0] LEGUP_F_main_BB_uppol2exit23_165 = 9'd165;
parameter [8:0] LEGUP_F_main_BB__254_166 = 9'd166;
parameter [8:0] LEGUP_F_main_BB__256_167 = 9'd167;
parameter [8:0] LEGUP_F_main_BB_adpcm_mainexitpreheader_168 = 9'd168;
parameter [8:0] LEGUP_F_main_BB__258_169 = 9'd169;
parameter [8:0] LEGUP_F_main_BB__258_170 = 9'd170;
parameter [8:0] LEGUP_F_main_BB__258_171 = 9'd171;
parameter [8:0] LEGUP_F_main_BB__258_172 = 9'd172;
parameter [8:0] LEGUP_F_main_BB__258_173 = 9'd173;
parameter [8:0] LEGUP_F_main_BB__258_174 = 9'd174;
parameter [8:0] LEGUP_F_main_BB__258_175 = 9'd175;
parameter [8:0] LEGUP_F_main_BB__258_176 = 9'd176;
parameter [8:0] LEGUP_F_main_BB__258_177 = 9'd177;
parameter [8:0] LEGUP_F_main_BB__258_178 = 9'd178;
parameter [8:0] LEGUP_F_main_BB__258_179 = 9'd179;
parameter [8:0] LEGUP_F_main_BB__258_180 = 9'd180;
parameter [8:0] LEGUP_F_main_BB__258_181 = 9'd181;
parameter [8:0] LEGUP_F_main_BB__258_182 = 9'd182;
parameter [8:0] LEGUP_F_main_BB__258_183 = 9'd183;
parameter [8:0] LEGUP_F_main_BB__258_184 = 9'd184;
parameter [8:0] LEGUP_F_main_BB__258_185 = 9'd185;
parameter [8:0] LEGUP_F_main_BB__258_186 = 9'd186;
parameter [8:0] LEGUP_F_main_BB__258_187 = 9'd187;
parameter [8:0] LEGUP_F_main_BB__258_188 = 9'd188;
parameter [8:0] LEGUP_F_main_BB__258_189 = 9'd189;
parameter [8:0] LEGUP_F_main_BB__258_190 = 9'd190;
parameter [8:0] LEGUP_F_main_BB__258_191 = 9'd191;
parameter [8:0] LEGUP_F_main_BB__258_192 = 9'd192;
parameter [8:0] LEGUP_F_main_BB__258_193 = 9'd193;
parameter [8:0] LEGUP_F_main_BB__258_194 = 9'd194;
parameter [8:0] LEGUP_F_main_BB__258_195 = 9'd195;
parameter [8:0] LEGUP_F_main_BB__258_196 = 9'd196;
parameter [8:0] LEGUP_F_main_BB__258_197 = 9'd197;
parameter [8:0] LEGUP_F_main_BB__258_198 = 9'd198;
parameter [8:0] LEGUP_F_main_BB__258_199 = 9'd199;
parameter [8:0] LEGUP_F_main_BB__258_200 = 9'd200;
parameter [8:0] LEGUP_F_main_BB__258_201 = 9'd201;
parameter [8:0] LEGUP_F_main_BB__258_202 = 9'd202;
parameter [8:0] LEGUP_F_main_BB__258_203 = 9'd203;
parameter [8:0] LEGUP_F_main_BB__265_204 = 9'd204;
parameter [8:0] LEGUP_F_main_BB__266_205 = 9'd205;
parameter [8:0] LEGUP_F_main_BB__266_206 = 9'd206;
parameter [8:0] LEGUP_F_main_BB__266_207 = 9'd207;
parameter [8:0] LEGUP_F_main_BB__266_208 = 9'd208;
parameter [8:0] LEGUP_F_main_BB_filtezexitii_209 = 9'd209;
parameter [8:0] LEGUP_F_main_BB_filtezexitii_210 = 9'd210;
parameter [8:0] LEGUP_F_main_BB_filtezexitii_211 = 9'd211;
parameter [8:0] LEGUP_F_main_BB_filtezexitii_212 = 9'd212;
parameter [8:0] LEGUP_F_main_BB__296_213 = 9'd213;
parameter [8:0] LEGUP_F_main_BB_logsclexitii_214 = 9'd214;
parameter [8:0] LEGUP_F_main_BB_logsclexitii_215 = 9'd215;
parameter [8:0] LEGUP_F_main_BB_logsclexitii_216 = 9'd216;
parameter [8:0] LEGUP_F_main_BB_preheader39preheader_217 = 9'd217;
parameter [8:0] LEGUP_F_main_BB_preheader38preheader_218 = 9'd218;
parameter [8:0] LEGUP_F_main_BB_preheader38_219 = 9'd219;
parameter [8:0] LEGUP_F_main_BB__309_220 = 9'd220;
parameter [8:0] LEGUP_F_main_BB__309_221 = 9'd221;
parameter [8:0] LEGUP_F_main_BB__309_222 = 9'd222;
parameter [8:0] LEGUP_F_main_BB__309_223 = 9'd223;
parameter [8:0] LEGUP_F_main_BB__309_224 = 9'd224;
parameter [8:0] LEGUP_F_main_BB_preheader39_225 = 9'd225;
parameter [8:0] LEGUP_F_main_BB__315_226 = 9'd226;
parameter [8:0] LEGUP_F_main_BB__315_227 = 9'd227;
parameter [8:0] LEGUP_F_main_BB__315_228 = 9'd228;
parameter [8:0] LEGUP_F_main_BB__315_229 = 9'd229;
parameter [8:0] LEGUP_F_main_BB__315_230 = 9'd230;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18loopexit_231 = 9'd231;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18loopexit2_232 = 9'd232;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18_233 = 9'd233;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18_234 = 9'd234;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18_235 = 9'd235;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18_236 = 9'd236;
parameter [8:0] LEGUP_F_main_BB_upzeroexit18_237 = 9'd237;
parameter [8:0] LEGUP_F_main_BB__342_238 = 9'd238;
parameter [8:0] LEGUP_F_main_BB_uppol2exit12_239 = 9'd239;
parameter [8:0] LEGUP_F_main_BB_uppol2exit12_240 = 9'd240;
parameter [8:0] LEGUP_F_main_BB_uppol2exit12_241 = 9'd241;
parameter [8:0] LEGUP_F_main_BB_uppol2exit12_242 = 9'd242;
parameter [8:0] LEGUP_F_main_BB__355_243 = 9'd243;
parameter [8:0] LEGUP_F_main_BB__356_244 = 9'd244;
parameter [8:0] LEGUP_F_main_BB__356_245 = 9'd245;
parameter [8:0] LEGUP_F_main_BB__356_246 = 9'd246;
parameter [8:0] LEGUP_F_main_BB__356_247 = 9'd247;
parameter [8:0] LEGUP_F_main_BB_filtezexit8ii_248 = 9'd248;
parameter [8:0] LEGUP_F_main_BB_filtezexit8ii_249 = 9'd249;
parameter [8:0] LEGUP_F_main_BB_filtezexit8ii_250 = 9'd250;
parameter [8:0] LEGUP_F_main_BB_filtezexit8ii_251 = 9'd251;
parameter [8:0] LEGUP_F_main_BB__382_252 = 9'd252;
parameter [8:0] LEGUP_F_main_BB_logschexitii_253 = 9'd253;
parameter [8:0] LEGUP_F_main_BB_logschexitii_254 = 9'd254;
parameter [8:0] LEGUP_F_main_BB_logschexitii_255 = 9'd255;
parameter [8:0] LEGUP_F_main_BB_preheader36preheader_256 = 9'd256;
parameter [8:0] LEGUP_F_main_BB_preheader35preheader_257 = 9'd257;
parameter [8:0] LEGUP_F_main_BB_preheader35_258 = 9'd258;
parameter [8:0] LEGUP_F_main_BB__395_259 = 9'd259;
parameter [8:0] LEGUP_F_main_BB__395_260 = 9'd260;
parameter [8:0] LEGUP_F_main_BB__395_261 = 9'd261;
parameter [8:0] LEGUP_F_main_BB__395_262 = 9'd262;
parameter [8:0] LEGUP_F_main_BB__395_263 = 9'd263;
parameter [8:0] LEGUP_F_main_BB_preheader36_264 = 9'd264;
parameter [8:0] LEGUP_F_main_BB__401_265 = 9'd265;
parameter [8:0] LEGUP_F_main_BB__401_266 = 9'd266;
parameter [8:0] LEGUP_F_main_BB__401_267 = 9'd267;
parameter [8:0] LEGUP_F_main_BB__401_268 = 9'd268;
parameter [8:0] LEGUP_F_main_BB__401_269 = 9'd269;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7loopexit_270 = 9'd270;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7loopexit1_271 = 9'd271;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7_272 = 9'd272;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7_273 = 9'd273;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7_274 = 9'd274;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7_275 = 9'd275;
parameter [8:0] LEGUP_F_main_BB_upzeroexit7_276 = 9'd276;
parameter [8:0] LEGUP_F_main_BB__428_277 = 9'd277;
parameter [8:0] LEGUP_F_main_BB_uppol2exit_278 = 9'd278;
parameter [8:0] LEGUP_F_main_BB_uppol2exit_279 = 9'd279;
parameter [8:0] LEGUP_F_main_BB__443_280 = 9'd280;
parameter [8:0] LEGUP_F_main_BB__446_281 = 9'd281;
parameter [8:0] LEGUP_F_main_BB__446_282 = 9'd282;
parameter [8:0] LEGUP_F_main_BB__446_283 = 9'd283;
parameter [8:0] LEGUP_F_main_BB__446_284 = 9'd284;
parameter [8:0] LEGUP_F_main_BB__446_285 = 9'd285;
parameter [8:0] LEGUP_F_main_BB__446_286 = 9'd286;
parameter [8:0] LEGUP_F_main_BB__458_287 = 9'd287;
parameter [8:0] LEGUP_F_main_BB__458_288 = 9'd288;
parameter [8:0] LEGUP_F_main_BB__458_289 = 9'd289;
parameter [8:0] LEGUP_F_main_BB__462_290 = 9'd290;
parameter [8:0] LEGUP_F_main_BB__466_291 = 9'd291;
parameter [8:0] LEGUP_F_main_BB__466_292 = 9'd292;
parameter [8:0] LEGUP_F_main_BB__466_293 = 9'd293;
parameter [8:0] LEGUP_F_main_BB__466_294 = 9'd294;
parameter [8:0] LEGUP_F_main_BB_decodeexiti_295 = 9'd295;
parameter [8:0] LEGUP_F_main_BB_decodeexiti_296 = 9'd296;
parameter [8:0] LEGUP_F_main_BB_decodeexiti_297 = 9'd297;
parameter [8:0] LEGUP_F_main_BB_adpcm_mainexit_298 = 9'd298;
parameter [8:0] LEGUP_F_main_BB_preheaderpreheader_299 = 9'd299;
parameter [8:0] LEGUP_F_main_BB__478_300 = 9'd300;
parameter [8:0] LEGUP_F_main_BB__478_301 = 9'd301;
parameter [8:0] LEGUP_F_main_BB__478_302 = 9'd302;
parameter [8:0] LEGUP_F_main_BB_preheader_303 = 9'd303;
parameter [8:0] LEGUP_F_main_BB__485_304 = 9'd304;
parameter [8:0] LEGUP_F_main_BB__485_305 = 9'd305;
parameter [8:0] LEGUP_F_main_BB__485_306 = 9'd306;
parameter [8:0] LEGUP_F_main_BB__491_307 = 9'd307;
parameter [8:0] LEGUP_F_main_BB__494_308 = 9'd308;
parameter [8:0] LEGUP_F_main_BB__496_309 = 9'd309;
parameter [8:0] LEGUP_F_main_BB__498_310 = 9'd310;
parameter [8:0] tag_offset = 9'd0;
parameter [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] tag_addr_offset = {tag_offset, 23'd0};

input  clk;
input  clk2x;
input  clk1x_follower;
input  reset;
input  start;
output reg  finish;
input  memory_controller_waitrequest;
output reg  memory_controller_enable_a;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_a;
output reg  memory_controller_write_enable_a;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_a;
output reg [1:0] memory_controller_size_a;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_a;
output reg  memory_controller_enable_b;
output reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] memory_controller_address_b;
output reg  memory_controller_write_enable_b;
output reg [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_in_b;
output reg [1:0] memory_controller_size_b;
input [`MEMORY_CONTROLLER_DATA_SIZE-1:0] memory_controller_out_b;
output reg [31:0] return_val;
reg [8:0] cur_state;
reg [8:0] next_state;
reg [31:0] main_1_2;
reg [31:0] main_1_2_reg;
reg  main_1_exitcond86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep90;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep89;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep88;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep88_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep87;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_3_scevgep87_reg;
reg [31:0] main_3_4;
reg [31:0] main_3_4_reg;
reg [31:0] main_preheader49_5;
reg [31:0] main_preheader49_5_reg;
reg  main_preheader49_exitcond81;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep84;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep83;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep83_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep82;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_6_scevgep82_reg;
reg [31:0] main_6_7;
reg [31:0] main_6_7_reg;
reg [31:0] main_preheader48_8;
reg [31:0] main_preheader48_8_reg;
reg  main_preheader48_exitcond79;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_9_scevgep80;
reg [31:0] main_9_10;
reg [31:0] main_9_10_reg;
reg [31:0] main_preheader47_11;
reg [31:0] main_preheader47_11_reg;
reg  main_preheader47_exitcond76;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_12_scevgep77;
reg [31:0] main_12_13;
reg [31:0] main_12_13_reg;
reg [31:0] main_resetexiti_indvar71;
reg [31:0] main_resetexiti_indvar71_reg;
reg [31:0] main_resetexiti_rlt10;
reg [31:0] main_resetexiti_rlt10_reg;
reg [31:0] main_resetexiti_al10;
reg [31:0] main_resetexiti_al10_reg;
reg [31:0] main_resetexiti_rlt20;
reg [31:0] main_resetexiti_rlt20_reg;
reg [31:0] main_resetexiti_al20;
reg [31:0] main_resetexiti_al20_reg;
reg [31:0] main_resetexiti_detl0;
reg [31:0] main_resetexiti_detl0_reg;
reg [31:0] main_resetexiti_il0;
reg [31:0] main_resetexiti_il0_reg;
reg [31:0] main_resetexiti_nbl0;
reg [31:0] main_resetexiti_nbl0_reg;
reg [31:0] main_resetexiti_plt10;
reg [31:0] main_resetexiti_plt10_reg;
reg [31:0] main_resetexiti_plt20;
reg [31:0] main_resetexiti_plt20_reg;
reg [31:0] main_resetexiti_rh10;
reg [31:0] main_resetexiti_rh10_reg;
reg [31:0] main_resetexiti_ah10;
reg [31:0] main_resetexiti_ah10_reg;
reg [31:0] main_resetexiti_rh20;
reg [31:0] main_resetexiti_rh20_reg;
reg [31:0] main_resetexiti_ah20;
reg [31:0] main_resetexiti_ah20_reg;
reg [31:0] main_resetexiti_deth0;
reg [31:0] main_resetexiti_deth0_reg;
reg [31:0] main_resetexiti_nbh0;
reg [31:0] main_resetexiti_nbh0_reg;
reg [31:0] main_resetexiti_ph10;
reg [31:0] main_resetexiti_ph10_reg;
reg [31:0] main_resetexiti_ph20;
reg [31:0] main_resetexiti_ph20_reg;
reg [31:0] main_resetexiti_ii0;
reg [31:0] main_resetexiti_ii0_reg;
reg  main_resetexiti_exitcond73;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_14_scevgep75;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_14_scevgep75_reg;
reg [31:0] main_14_15;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_14_scevgep74;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_14_scevgep74_reg;
reg [31:0] main_14_16;
reg [31:0] main_14_16_reg;
reg [31:0] main_14_17;
reg [31:0] main_14_17_reg;
reg [31:0] main_14_18;
reg [31:0] main_14_19;
reg [31:0] main_14_20;
reg [31:0] main_14_21;
reg [31:0] main_22_23;
reg [31:0] main_22_23_reg;
reg [31:0] main_22_xaii0;
reg [31:0] main_22_xaii0_reg;
reg [31:0] main_22_xbii0;
reg [31:0] main_22_xbii0_reg;
reg [31:0] main_22_24;
reg [31:0] main_22_25;
reg [31:0] main_22_25_reg;
reg [31:0] main_22_26;
reg [31:0] main_22_26_reg;
reg  main_22_exitcond42;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_scevgep46;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_scevgep46_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_tqmf_ptrii0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_scevgep44;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_scevgep44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_27_h_ptri22i0;
reg [31:0] main_27_28;
reg [31:0] main_27_29;
reg [31:0] main_27_30;
reg [31:0] main_27_31;
reg [31:0] main_27_31_reg;
reg [31:0] main_27_32;
reg [31:0] main_27_33;
reg [31:0] main_27_34;
reg [31:0] main_27_35;
reg [31:0] main_27_36;
reg [31:0] main_27_36_reg;
reg [31:0] main_37_38;
reg [31:0] main_37_38_reg;
reg [31:0] main_37_39;
reg [31:0] main_37_39_reg;
reg [31:0] main_40_41;
reg [31:0] main_40_41_reg;
reg  main_40_exitcond47;
reg [31:0] main_42_43;
reg [31:0] main_42_43_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_tqmf_ptr1ii0;
reg [31:0] main_42_44;
reg [31:0] main_42_44_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_tqmf_ptrii1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_42_tqmf_ptrii1_reg;
reg [31:0] main_42_45;
reg [31:0] main_42_46;
reg [31:0] main_42_46_reg;
reg [31:0] main_47_48;
reg [31:0] main_47_48_reg;
reg [31:0] main_47_49;
reg [31:0] main_47_50;
reg [31:0] main_47_50_reg;
reg [31:0] main_47_51;
reg [31:0] main_52_indvar50;
reg [31:0] main_52_indvar50_reg;
reg [31:0] main_52_zlii20i0;
reg [31:0] main_52_zlii20i0_reg;
reg [31:0] main_52_iii19i0;
reg [31:0] main_52_iii19i0_reg;
reg  main_52_exitcond52;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_53_0467;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_53_0468;
reg [31:0] main_53_54;
reg [31:0] main_53_55;
reg [31:0] main_53_56;
reg [31:0] main_53_57;
reg [31:0] main_53_indvarnext51;
reg [31:0] main_53_indvarnext51_reg;
reg [31:0] main_filtezexiti23i_58;
reg [31:0] main_filtezexiti23i_58_reg;
reg [31:0] main_filtezexiti23i_59;
reg [31:0] main_filtezexiti23i_60;
reg [31:0] main_filtezexiti23i_61;
reg [31:0] main_filtezexiti23i_62;
reg [31:0] main_filtezexiti23i_63;
reg [31:0] main_filtezexiti23i_64;
reg [31:0] main_filtezexiti23i_64_reg;
reg [31:0] main_filtezexiti23i_65;
reg [31:0] main_filtezexiti23i_65_reg;
reg [31:0] main_filtezexiti23i_66;
reg [31:0] main_filtezexiti23i_67;
reg [31:0] main_filtezexiti23i_68;
reg [31:0] main_filtezexiti23i_69;
reg [31:0] main_filtezexiti23i_70;
reg [31:0] main_filtezexiti23i_71;
reg [31:0] main_filtezexiti23i_72;
reg [31:0] main_filtezexiti23i_72_reg;
reg [31:0] main_filtezexiti23i_73;
reg  main_filtezexiti23i_74;
reg  main_filtezexiti23i_74_reg;
reg [31:0] main_filtezexiti23i_75;
reg [31:0] main_filtezexiti23i_;
reg [31:0] main_filtezexiti23i__reg;
reg [31:0] main_76_77;
reg [31:0] main_76_77_reg;
reg  main_76_78;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_79_scevgep55;
reg [31:0] main_79_80;
reg [31:0] main_79_81;
reg [31:0] main_79_82;
reg  main_79_83;
reg [31:0] main_84_85;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexitii_quant26bt_posquant26bt_neg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexitii_quant26bt_posquant26bt_neg_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexitii_riliii0in;
reg [31:0] main_quantlexitii_riliii0;
reg [31:0] main_quantlexitii_riliii0_reg;
reg [31:0] main_quantlexitii_86;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexitii_87;
reg [31:0] main_quantlexitii_88;
reg [31:0] main_quantlexitii_89;
reg [31:0] main_quantlexitii_90;
reg [31:0] main_quantlexitii_90_reg;
reg [31:0] main_quantlexitii_91;
reg [31:0] main_quantlexitii_92;
reg [31:0] main_quantlexitii_92_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_quantlexitii_93;
reg [31:0] main_quantlexitii_94;
reg [31:0] main_quantlexitii_95;
reg [31:0] main_quantlexitii_95_reg;
reg  main_quantlexitii_96;
reg  main_quantlexitii_96_reg;
reg  main_97_98;
reg [31:0] main_97_488;
reg [31:0] main_logsclexiti24i_0470;
reg [31:0] main_logsclexiti24i_0470_reg;
reg [31:0] main_logsclexiti24i_99;
reg [31:0] main_logsclexiti24i_100;
reg [31:0] main_logsclexiti24i_101;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logsclexiti24i_102;
reg [31:0] main_logsclexiti24i_103;
reg [31:0] main_logsclexiti24i_104;
reg [31:0] main_logsclexiti24i_104_reg;
reg [31:0] main_logsclexiti24i_105;
reg [31:0] main_logsclexiti24i_106;
reg [31:0] main_logsclexiti24i_106_reg;
reg [31:0] main_logsclexiti24i_107;
reg [31:0] main_logsclexiti24i_107_reg;
reg  main_logsclexiti24i_108;
reg  main_logsclexiti24i_108_reg;
reg [31:0] main_preheader44_109;
reg [31:0] main_preheader44_109_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader44_scevgep60;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader44_scevgep60_reg;
reg  main_preheader44_exitcond59;
reg [31:0] main_110_111;
reg [31:0] main_110_112;
reg [31:0] main_110_113;
reg [31:0] main_110_114;
reg [31:0] main_110_114_reg;
reg [31:0] main_preheader45_115;
reg [31:0] main_preheader45_115_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader45_scevgep57;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader45_scevgep57_reg;
reg  main_preheader45_exitcond56;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_116_scevgep58;
reg [31:0] main_116_117;
reg [31:0] main_116_118;
reg [31:0] main_116_119;
reg [31:0] main_116_120;
reg [31:0] main_116_121;
reg [31:0] main_116_122;
reg [31:0] main_116_123;
reg [31:0] main_116_124;
reg [31:0] main_116_125;
reg [31:0] main_116_126;
reg [31:0] main_116_126_reg;
reg [31:0] main_upzeroexit_127;
reg [31:0] main_upzeroexit_128;
reg [31:0] main_upzeroexit_128_reg;
reg [31:0] main_upzeroexit_129;
reg [31:0] main_upzeroexit_130;
reg [31:0] main_upzeroexit_130_reg;
reg [31:0] main_upzeroexit_131;
reg [31:0] main_upzeroexit_131_reg;
reg  main_upzeroexit_132;
reg [31:0] main_upzeroexit_133;
reg [31:0] main_upzeroexit_133_reg;
reg [31:0] main_upzeroexit_i30;
reg [31:0] main_upzeroexit_134;
reg [31:0] main_upzeroexit_135;
reg [31:0] main_upzeroexit_136;
reg [31:0] main_upzeroexit_137;
reg [31:0] main_upzeroexit_138;
reg [31:0] main_upzeroexit_wd40i31;
reg [31:0] main_upzeroexit_139;
reg [31:0] main_upzeroexit_140;
reg [31:0] main_upzeroexit_141;
reg [31:0] main_upzeroexit_141_reg;
reg  main_upzeroexit_142;
reg  main_upzeroexit_142_reg;
reg  main_143_144;
reg [31:0] main_143_9i32;
reg [31:0] main_uppol2exit34_145;
reg [31:0] main_uppol2exit34_145_reg;
reg [31:0] main_uppol2exit34_146;
reg [31:0] main_uppol2exit34_147;
reg [31:0] main_uppol2exit34_148;
reg [31:0] main_uppol2exit34_149;
reg [31:0] main_uppol2exit34_150;
reg [31:0] main_uppol2exit34_150_reg;
reg [31:0] main_uppol2exit34_apl1i11i4i0;
reg [31:0] main_uppol2exit34_apl1i11i4i0_reg;
reg [31:0] main_uppol2exit34_151;
reg [31:0] main_uppol2exit34_151_reg;
reg  main_uppol2exit34_152;
reg  main_uppol2exit34_152_reg;
reg [31:0] main_uppol2exit34_153;
reg [31:0] main_uppol2exit34_154;
reg [31:0] main_uppol2exit34_154_reg;
reg [31:0] main_uppol2exit34_155;
reg [31:0] main_156_indvar61;
reg [31:0] main_156_indvar61_reg;
reg [31:0] main_156_zli7i6i0;
reg [31:0] main_156_zli7i6i0_reg;
reg [31:0] main_156_ii6i5i0;
reg [31:0] main_156_ii6i5i0_reg;
reg  main_156_exitcond63;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_0471;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_157_0472;
reg [31:0] main_157_158;
reg [31:0] main_157_159;
reg [31:0] main_157_160;
reg [31:0] main_157_161;
reg [31:0] main_157_indvarnext62;
reg [31:0] main_157_indvarnext62_reg;
reg [31:0] main_filtezexit8i26i_162;
reg [31:0] main_filtezexit8i26i_apl1i11i4i0;
reg  main_filtezexit8i26i_163;
reg [31:0] main_filtezexit8i26i_apl1i11i4i2;
reg [31:0] main_filtezexit8i26i_apl1i11i4i2_reg;
reg [31:0] main_filtezexit8i26i_164;
reg [31:0] main_filtezexit8i26i_164_reg;
reg [31:0] main_filtezexit8i26i_165;
reg [31:0] main_filtezexit8i26i_165_reg;
reg [31:0] main_filtezexit8i26i_166;
reg [31:0] main_filtezexit8i26i_167;
reg [31:0] main_filtezexit8i26i_168;
reg [31:0] main_filtezexit8i26i_169;
reg [31:0] main_filtezexit8i26i_170;
reg [31:0] main_filtezexit8i26i_171;
reg [31:0] main_filtezexit8i26i_172;
reg [31:0] main_filtezexit8i26i_172_reg;
reg [31:0] main_filtezexit8i26i_173;
reg  main_filtezexit8i26i_174;
reg [31:0] main_filtezexit8i26i_175;
reg [31:0] main_filtezexit8i26i_176;
reg [31:0] main_filtezexit8i26i_177;
reg [31:0] main_filtezexit8i26i_178;
reg [31:0] main_filtezexit8i26i_179;
reg [31:0] main_filtezexit8i26i_179_reg;
reg [31:0] main_filtezexit8i26i_miii0;
reg  main_filtezexit8i26i_180;
reg  main_filtezexit8i26i_180_reg;
reg [31:0] main_filtezexit8i26i_ih0486v;
reg [31:0] main_filtezexit8i26i_ih0486;
reg [31:0] main_filtezexit8i26i_ih0486_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8i26i_181;
reg [31:0] main_filtezexit8i26i_182;
reg [31:0] main_filtezexit8i26i_183;
reg [31:0] main_filtezexit8i26i_184;
reg [31:0] main_filtezexit8i26i_184_reg;
reg [31:0] main_filtezexit8i26i_185;
reg [31:0] main_filtezexit8i26i_186;
reg [31:0] main_filtezexit8i26i_186_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8i26i_187;
reg [31:0] main_filtezexit8i26i_188;
reg [31:0] main_filtezexit8i26i_189;
reg [31:0] main_filtezexit8i26i_189_reg;
reg  main_filtezexit8i26i_190;
reg  main_filtezexit8i26i_190_reg;
reg  main_191_192;
reg [31:0] main_191_489;
reg [31:0] main_logschexiti27i_0469;
reg [31:0] main_logschexiti27i_0469_reg;
reg [31:0] main_logschexiti27i_193;
reg [31:0] main_logschexiti27i_194;
reg [31:0] main_logschexiti27i_195;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logschexiti27i_196;
reg [31:0] main_logschexiti27i_197;
reg [31:0] main_logschexiti27i_198;
reg [31:0] main_logschexiti27i_198_reg;
reg [31:0] main_logschexiti27i_199;
reg [31:0] main_logschexiti27i_200;
reg [31:0] main_logschexiti27i_200_reg;
reg [31:0] main_logschexiti27i_201;
reg [31:0] main_logschexiti27i_201_reg;
reg  main_logschexiti27i_202;
reg  main_logschexiti27i_202_reg;
reg [31:0] main_preheader41_203;
reg [31:0] main_preheader41_203_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader41_scevgep70;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader41_scevgep70_reg;
reg  main_preheader41_exitcond69;
reg [31:0] main_204_205;
reg [31:0] main_204_206;
reg [31:0] main_204_207;
reg [31:0] main_204_208;
reg [31:0] main_204_208_reg;
reg [31:0] main_preheader42_209;
reg [31:0] main_preheader42_209_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader42_scevgep67;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader42_scevgep67_reg;
reg  main_preheader42_exitcond66;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_210_scevgep68;
reg [31:0] main_210_211;
reg [31:0] main_210_212;
reg [31:0] main_210_213;
reg [31:0] main_210_214;
reg [31:0] main_210_215;
reg [31:0] main_210_216;
reg [31:0] main_210_217;
reg [31:0] main_210_218;
reg [31:0] main_210_219;
reg [31:0] main_210_220;
reg [31:0] main_210_220_reg;
reg [31:0] main_upzeroexit29_221;
reg [31:0] main_upzeroexit29_222;
reg [31:0] main_upzeroexit29_222_reg;
reg [31:0] main_upzeroexit29_223;
reg [31:0] main_upzeroexit29_224;
reg [31:0] main_upzeroexit29_224_reg;
reg [31:0] main_upzeroexit29_225;
reg [31:0] main_upzeroexit29_225_reg;
reg  main_upzeroexit29_226;
reg [31:0] main_upzeroexit29_227;
reg [31:0] main_upzeroexit29_227_reg;
reg [31:0] main_upzeroexit29_i19;
reg [31:0] main_upzeroexit29_228;
reg [31:0] main_upzeroexit29_229;
reg [31:0] main_upzeroexit29_230;
reg [31:0] main_upzeroexit29_231;
reg [31:0] main_upzeroexit29_232;
reg [31:0] main_upzeroexit29_wd40i20;
reg [31:0] main_upzeroexit29_233;
reg [31:0] main_upzeroexit29_234;
reg [31:0] main_upzeroexit29_235;
reg [31:0] main_upzeroexit29_235_reg;
reg  main_upzeroexit29_236;
reg  main_upzeroexit29_236_reg;
reg  main_237_238;
reg [31:0] main_237_9i21;
reg [31:0] main_uppol2exit23_239;
reg [31:0] main_uppol2exit23_239_reg;
reg [31:0] main_uppol2exit23_240;
reg [31:0] main_uppol2exit23_241;
reg [31:0] main_uppol2exit23_242;
reg [31:0] main_uppol2exit23_243;
reg [31:0] main_uppol2exit23_244;
reg [31:0] main_uppol2exit23_244_reg;
reg [31:0] main_uppol2exit23_apl1ii18i0;
reg [31:0] main_uppol2exit23_245;
reg [31:0] main_uppol2exit23_245_reg;
reg  main_uppol2exit23_246;
reg [31:0] main_uppol2exit23_apl1ii18i0_var0;
reg [31:0] main_uppol2exit23_247;
reg [31:0] main_uppol2exit23_247_reg;
reg  main_uppol2exit23_248;
reg [31:0] main_uppol2exit23_apl1ii18i2;
reg [31:0] main_uppol2exit23_apl1ii18i2_reg;
reg [31:0] main_uppol2exit23_249;
reg [31:0] main_uppol2exit23_249_reg;
reg [31:0] main_uppol2exit23_250;
reg [31:0] main_uppol2exit23_251;
reg [31:0] main_uppol2exit23_251_reg;
reg [31:0] main_uppol2exit23_252;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_uppol2exit23_253;
reg [31:0] main_uppol2exit23_indvarnext72;
reg [31:0] main_uppol2exit23_indvarnext72_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_254_255;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_254_255_reg;
reg [31:0] main_256_indvar37;
reg [31:0] main_256_indvar37_reg;
reg [31:0] main_256_dec_rlt10;
reg [31:0] main_256_dec_rlt10_reg;
reg [31:0] main_256_dec_al10;
reg [31:0] main_256_dec_al10_reg;
reg [31:0] main_256_dec_rlt20;
reg [31:0] main_256_dec_rlt20_reg;
reg [31:0] main_256_dec_al20;
reg [31:0] main_256_dec_al20_reg;
reg [31:0] main_256_dec_detl0;
reg [31:0] main_256_dec_detl0_reg;
reg [31:0] main_256_dec_nbl0;
reg [31:0] main_256_dec_nbl0_reg;
reg [31:0] main_256_dec_plt10;
reg [31:0] main_256_dec_plt10_reg;
reg [31:0] main_256_dec_plt20;
reg [31:0] main_256_dec_plt20_reg;
reg [31:0] main_256_dec_rh10;
reg [31:0] main_256_dec_rh10_reg;
reg [31:0] main_256_dec_ah10;
reg [31:0] main_256_dec_ah10_reg;
reg [31:0] main_256_dec_rh20;
reg [31:0] main_256_dec_rh20_reg;
reg [31:0] main_256_dec_ah20;
reg [31:0] main_256_dec_ah20_reg;
reg [31:0] main_256_dec_deth0;
reg [31:0] main_256_dec_deth0_reg;
reg [31:0] main_256_dec_nbh0;
reg [31:0] main_256_dec_nbh0_reg;
reg [31:0] main_256_dec_ph10;
reg [31:0] main_256_dec_ph10_reg;
reg [31:0] main_256_dec_ph20;
reg [31:0] main_256_dec_ph20_reg;
reg [31:0] main_256_ii1;
reg [31:0] main_256_ii1_reg;
reg [31:0] main_256_257;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_256_scevgep40;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_256_scevgep40_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_256_scevgep41;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_256_scevgep41_reg;
reg  main_256_exitcond39;
reg [31:0] main_258_259;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_258_260;
reg [31:0] main_258_261;
reg [31:0] main_258_261_reg;
reg [31:0] main_258_262;
reg [31:0] main_258_263;
reg [31:0] main_258_263_reg;
reg [31:0] main_258_264;
reg [31:0] main_258_264_reg;
reg [31:0] main_265_indvar;
reg [31:0] main_265_indvar_reg;
reg [31:0] main_265_zliii0;
reg [31:0] main_265_zliii0_reg;
reg [31:0] main_265_iiii0;
reg [31:0] main_265_iiii0_reg;
reg  main_265_exitcond9;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_266_0462;
reg [31:0] main_266_267;
reg [31:0] main_266_268;
reg [31:0] main_266_269;
reg [31:0] main_266_270;
reg [31:0] main_266_indvarnext;
reg [31:0] main_266_indvarnext_reg;
reg [31:0] main_filtezexitii_271;
reg [31:0] main_filtezexitii_271_reg;
reg [31:0] main_filtezexitii_272;
reg [31:0] main_filtezexitii_272_reg;
reg [31:0] main_filtezexitii_273;
reg [31:0] main_filtezexitii_274;
reg [31:0] main_filtezexitii_275;
reg [31:0] main_filtezexitii_276;
reg [31:0] main_filtezexitii_277;
reg [31:0] main_filtezexitii_278;
reg [31:0] main_filtezexitii_279;
reg [31:0] main_filtezexitii_279_reg;
reg [31:0] main_filtezexitii_280;
reg [31:0] main_filtezexitii_281;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_282;
reg [31:0] main_filtezexitii_283;
reg [31:0] main_filtezexitii_284;
reg [31:0] main_filtezexitii_285;
reg [31:0] main_filtezexitii_285_reg;
reg [31:0] main_filtezexitii_286;
reg [31:0] main_filtezexitii_287;
reg [31:0] main_filtezexitii_288;
reg [31:0] main_filtezexitii_289;
reg [31:0] main_filtezexitii_289_reg;
reg [31:0] main_filtezexitii_290;
reg [31:0] main_filtezexitii_291;
reg [31:0] main_filtezexitii_291_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_292;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexitii_292_reg;
reg [31:0] main_filtezexitii_293;
reg [31:0] main_filtezexitii_294;
reg [31:0] main_filtezexitii_294_reg;
reg  main_filtezexitii_295;
reg  main_296_297;
reg [31:0] main_296_490;
reg [31:0] main_logsclexitii_0463;
reg [31:0] main_logsclexitii_0463_reg;
reg [31:0] main_logsclexitii_298;
reg [31:0] main_logsclexitii_299;
reg [31:0] main_logsclexitii_300;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logsclexitii_301;
reg [31:0] main_logsclexitii_302;
reg [31:0] main_logsclexitii_303;
reg [31:0] main_logsclexitii_303_reg;
reg [31:0] main_logsclexitii_304;
reg [31:0] main_logsclexitii_305;
reg [31:0] main_logsclexitii_305_reg;
reg [31:0] main_logsclexitii_306;
reg [31:0] main_logsclexitii_306_reg;
reg  main_logsclexitii_307;
reg  main_logsclexitii_307_reg;
reg [31:0] main_preheader38_308;
reg [31:0] main_preheader38_308_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader38_scevgep16;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader38_scevgep16_reg;
reg  main_preheader38_exitcond15;
reg [31:0] main_309_310;
reg [31:0] main_309_311;
reg [31:0] main_309_312;
reg [31:0] main_309_313;
reg [31:0] main_309_313_reg;
reg [31:0] main_preheader39_314;
reg [31:0] main_preheader39_314_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader39_scevgep13;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader39_scevgep13_reg;
reg  main_preheader39_exitcond12;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_315_scevgep14;
reg [31:0] main_315_316;
reg [31:0] main_315_317;
reg [31:0] main_315_318;
reg [31:0] main_315_319;
reg [31:0] main_315_320;
reg [31:0] main_315_321;
reg [31:0] main_315_322;
reg [31:0] main_315_323;
reg [31:0] main_315_324;
reg [31:0] main_315_325;
reg [31:0] main_315_325_reg;
reg [31:0] main_upzeroexit18_326;
reg [31:0] main_upzeroexit18_327;
reg [31:0] main_upzeroexit18_327_reg;
reg [31:0] main_upzeroexit18_328;
reg [31:0] main_upzeroexit18_329;
reg [31:0] main_upzeroexit18_329_reg;
reg [31:0] main_upzeroexit18_330;
reg [31:0] main_upzeroexit18_330_reg;
reg  main_upzeroexit18_331;
reg [31:0] main_upzeroexit18_332;
reg [31:0] main_upzeroexit18_332_reg;
reg [31:0] main_upzeroexit18_i8;
reg [31:0] main_upzeroexit18_333;
reg [31:0] main_upzeroexit18_334;
reg [31:0] main_upzeroexit18_335;
reg [31:0] main_upzeroexit18_336;
reg [31:0] main_upzeroexit18_337;
reg [31:0] main_upzeroexit18_wd40i9;
reg [31:0] main_upzeroexit18_338;
reg [31:0] main_upzeroexit18_339;
reg [31:0] main_upzeroexit18_340;
reg [31:0] main_upzeroexit18_340_reg;
reg  main_upzeroexit18_341;
reg  main_upzeroexit18_341_reg;
reg  main_342_343;
reg [31:0] main_342_9i10;
reg [31:0] main_uppol2exit12_344;
reg [31:0] main_uppol2exit12_344_reg;
reg [31:0] main_uppol2exit12_345;
reg [31:0] main_uppol2exit12_346;
reg [31:0] main_uppol2exit12_347;
reg [31:0] main_uppol2exit12_348;
reg [31:0] main_uppol2exit12_349;
reg [31:0] main_uppol2exit12_349_reg;
reg [31:0] main_uppol2exit12_apl1i11ii0;
reg [31:0] main_uppol2exit12_apl1i11ii0_reg;
reg [31:0] main_uppol2exit12_350;
reg [31:0] main_uppol2exit12_350_reg;
reg  main_uppol2exit12_351;
reg  main_uppol2exit12_351_reg;
reg [31:0] main_uppol2exit12_352;
reg [31:0] main_uppol2exit12_353;
reg [31:0] main_uppol2exit12_353_reg;
reg [31:0] main_uppol2exit12_354;
reg [31:0] main_355_indvar17;
reg [31:0] main_355_indvar17_reg;
reg [31:0] main_355_zli7ii0;
reg [31:0] main_355_zli7ii0_reg;
reg [31:0] main_355_ii6ii0;
reg [31:0] main_355_ii6ii0_reg;
reg  main_355_exitcond19;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_356_0465;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_356_0466;
reg [31:0] main_356_357;
reg [31:0] main_356_358;
reg [31:0] main_356_359;
reg [31:0] main_356_360;
reg [31:0] main_356_indvarnext18;
reg [31:0] main_356_indvarnext18_reg;
reg [31:0] main_filtezexit8ii_361;
reg [31:0] main_filtezexit8ii_apl1i11ii0;
reg  main_filtezexit8ii_362;
reg [31:0] main_filtezexit8ii_apl1i11ii2;
reg [31:0] main_filtezexit8ii_apl1i11ii2_reg;
reg [31:0] main_filtezexit8ii_363;
reg [31:0] main_filtezexit8ii_363_reg;
reg [31:0] main_filtezexit8ii_364;
reg [31:0] main_filtezexit8ii_364_reg;
reg [31:0] main_filtezexit8ii_365;
reg [31:0] main_filtezexit8ii_366;
reg [31:0] main_filtezexit8ii_367;
reg [31:0] main_filtezexit8ii_368;
reg [31:0] main_filtezexit8ii_369;
reg [31:0] main_filtezexit8ii_370;
reg [31:0] main_filtezexit8ii_371;
reg [31:0] main_filtezexit8ii_371_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_372;
reg [31:0] main_filtezexit8ii_373;
reg [31:0] main_filtezexit8ii_374;
reg [31:0] main_filtezexit8ii_375;
reg [31:0] main_filtezexit8ii_375_reg;
reg [31:0] main_filtezexit8ii_376;
reg [31:0] main_filtezexit8ii_377;
reg [31:0] main_filtezexit8ii_377_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_filtezexit8ii_378;
reg [31:0] main_filtezexit8ii_379;
reg [31:0] main_filtezexit8ii_380;
reg [31:0] main_filtezexit8ii_380_reg;
reg  main_filtezexit8ii_381;
reg  main_filtezexit8ii_381_reg;
reg  main_382_383;
reg [31:0] main_382_491;
reg [31:0] main_logschexitii_0464;
reg [31:0] main_logschexitii_0464_reg;
reg [31:0] main_logschexitii_384;
reg [31:0] main_logschexitii_385;
reg [31:0] main_logschexitii_386;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_logschexitii_387;
reg [31:0] main_logschexitii_388;
reg [31:0] main_logschexitii_389;
reg [31:0] main_logschexitii_389_reg;
reg [31:0] main_logschexitii_390;
reg [31:0] main_logschexitii_391;
reg [31:0] main_logschexitii_391_reg;
reg [31:0] main_logschexitii_392;
reg [31:0] main_logschexitii_392_reg;
reg  main_logschexitii_393;
reg  main_logschexitii_393_reg;
reg [31:0] main_preheader35_394;
reg [31:0] main_preheader35_394_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader35_scevgep26;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader35_scevgep26_reg;
reg  main_preheader35_exitcond25;
reg [31:0] main_395_396;
reg [31:0] main_395_397;
reg [31:0] main_395_398;
reg [31:0] main_395_399;
reg [31:0] main_395_399_reg;
reg [31:0] main_preheader36_400;
reg [31:0] main_preheader36_400_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader36_scevgep23;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_preheader36_scevgep23_reg;
reg  main_preheader36_exitcond22;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_401_scevgep24;
reg [31:0] main_401_402;
reg [31:0] main_401_403;
reg [31:0] main_401_404;
reg [31:0] main_401_405;
reg [31:0] main_401_406;
reg [31:0] main_401_407;
reg [31:0] main_401_408;
reg [31:0] main_401_409;
reg [31:0] main_401_410;
reg [31:0] main_401_411;
reg [31:0] main_401_411_reg;
reg [31:0] main_upzeroexit7_412;
reg [31:0] main_upzeroexit7_413;
reg [31:0] main_upzeroexit7_413_reg;
reg [31:0] main_upzeroexit7_414;
reg [31:0] main_upzeroexit7_415;
reg [31:0] main_upzeroexit7_415_reg;
reg [31:0] main_upzeroexit7_416;
reg [31:0] main_upzeroexit7_416_reg;
reg  main_upzeroexit7_417;
reg [31:0] main_upzeroexit7_418;
reg [31:0] main_upzeroexit7_418_reg;
reg [31:0] main_upzeroexit7_i1;
reg [31:0] main_upzeroexit7_419;
reg [31:0] main_upzeroexit7_420;
reg [31:0] main_upzeroexit7_421;
reg [31:0] main_upzeroexit7_422;
reg [31:0] main_upzeroexit7_423;
reg [31:0] main_upzeroexit7_wd40i;
reg [31:0] main_upzeroexit7_424;
reg [31:0] main_upzeroexit7_425;
reg [31:0] main_upzeroexit7_426;
reg [31:0] main_upzeroexit7_426_reg;
reg  main_upzeroexit7_427;
reg  main_upzeroexit7_427_reg;
reg  main_428_429;
reg [31:0] main_428_9i;
reg [31:0] main_uppol2exit_430;
reg [31:0] main_uppol2exit_430_reg;
reg [31:0] main_uppol2exit_431;
reg [31:0] main_uppol2exit_432;
reg [31:0] main_uppol2exit_433;
reg [31:0] main_uppol2exit_434;
reg [31:0] main_uppol2exit_435;
reg [31:0] main_uppol2exit_435_reg;
reg [31:0] main_uppol2exit_apl1iii0;
reg [31:0] main_uppol2exit_apl1iii0_reg;
reg [31:0] main_uppol2exit_436;
reg [31:0] main_uppol2exit_436_reg;
reg  main_uppol2exit_437;
reg  main_uppol2exit_437_reg;
reg [31:0] main_uppol2exit_438;
reg [31:0] main_uppol2exit_438_reg;
reg [31:0] main_uppol2exit_439;
reg [31:0] main_uppol2exit_439_reg;
reg [31:0] main_uppol2exit_440;
reg [31:0] main_uppol2exit_440_reg;
reg [31:0] main_uppol2exit_441;
reg [31:0] main_uppol2exit_442;
reg [31:0] main_443_444;
reg [31:0] main_443_444_reg;
reg [31:0] main_443_xa1ii0;
reg [31:0] main_443_xa1ii0_reg;
reg [31:0] main_443_xa2ii0;
reg [31:0] main_443_xa2ii0_reg;
reg [31:0] main_443_445;
reg [31:0] main_443_445_reg;
reg  main_443_exitcond27;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_ad_ptrii0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_ad_ptrii0_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_ac_ptrii0;
reg [31:0] main_446_447;
reg [31:0] main_446_447_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_scevgep29;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_scevgep29_reg;
reg [31:0] main_446_448;
reg [31:0] main_446_448_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_446_h_ptrii0;
reg [31:0] main_446_449;
reg [31:0] main_446_449_reg;
reg [31:0] main_446_450;
reg [31:0] main_446_451;
reg [31:0] main_446_452;
reg [31:0] main_446_452_reg;
reg [31:0] main_446_453;
reg [31:0] main_446_453_reg;
reg [31:0] main_446_454;
reg [31:0] main_446_455;
reg [31:0] main_446_456;
reg [31:0] main_446_457;
reg [31:0] main_446_457_reg;
reg [31:0] main_458_459;
reg [31:0] main_458_459_reg;
reg [31:0] main_458_460;
reg [31:0] main_458_460_reg;
reg [31:0] main_458_461;
reg [31:0] main_458_461_reg;
reg [31:0] main_462_463;
reg [31:0] main_462_463_reg;
reg [31:0] main_462_464;
reg [31:0] main_462_464_reg;
reg [31:0] main_462_465;
reg [31:0] main_462_465_reg;
reg  main_462_exitcond32;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ad_ptr1ii0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ad_ptrii1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ad_ptrii1_reg;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ac_ptr1ii0;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ac_ptrii1;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_466_ac_ptrii1_reg;
reg [31:0] main_466_467;
reg [31:0] main_466_468;
reg [31:0] main_466_469;
reg [31:0] main_466_469_reg;
reg [31:0] main_decodeexiti_apl1iii0;
reg  main_decodeexiti_470;
reg [31:0] main_decodeexiti_471;
reg [31:0] main_decodeexiti_472;
reg [31:0] main_decodeexiti_apl1iii2;
reg [31:0] main_decodeexiti_apl1iii2_reg;
reg [31:0] main_decodeexiti_473;
reg [31:0] main_decodeexiti_474;
reg [31:0] main_decodeexiti_475;
reg [31:0] main_decodeexiti_476;
reg [31:0] main_decodeexiti_indvarnext38;
reg [31:0] main_decodeexiti_indvarnext38_reg;
reg [31:0] main_adpcm_mainexit_477;
reg [31:0] main_adpcm_mainexit_477_reg;
reg [31:0] main_adpcm_mainexit_main_result0;
reg [31:0] main_adpcm_mainexit_main_result0_reg;
reg  main_adpcm_mainexit_exitcond;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_478_scevgep8;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_478_scevgep7;
reg [31:0] main_478_479;
reg [31:0] main_478_480;
reg  main_478_481;
reg [31:0] main_478_482;
reg [31:0] main_478_main_result0;
reg [31:0] main_478_483;
reg [31:0] main_478_483_reg;
reg [31:0] main_preheader_484;
reg [31:0] main_preheader_484_reg;
reg [31:0] main_preheader_main_result2;
reg [31:0] main_preheader_main_result2_reg;
reg  main_preheader_exitcond5;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_485_scevgep6;
reg [`MEMORY_CONTROLLER_ADDR_SIZE-1:0] main_485_scevgep;
reg [31:0] main_485_486;
reg [31:0] main_485_487;
reg  main_485_488;
reg [31:0] main_485_489;
reg [31:0] main_485_main_result2;
reg [31:0] main_485_490;
reg [31:0] main_485_490_reg;
reg  main_491_493;
reg [31:0] main_signed_divide_32_0_op0;
reg [31:0] main_signed_divide_32_0_op1;
wire [31:0] lpm_divide_main_258_259_temp_out;
wire [31:0] main_258_259_unused;
reg  lpm_divide_main_258_259_en;
reg [31:0] lpm_divide_main_258_259_out;
reg [31:0] main_signed_divide_32_0;
reg  lpm_mult_main_14_19_en;
reg [31:0] main_14_19_stage0_reg;
reg  lpm_mult_main_14_21_en;
reg [31:0] main_14_21_stage0_reg;
reg  lpm_mult_main_27_30_en;
reg [31:0] main_27_30_stage0_reg;
reg  lpm_mult_main_27_34_en;
reg [31:0] main_27_34_stage0_reg;
reg  lpm_mult_main_47_48_en;
reg [31:0] main_47_48_stage0_reg;
reg  lpm_mult_main_47_51_en;
reg [31:0] main_47_51_stage0_reg;
reg  lpm_mult_main_53_56_en;
reg [31:0] main_53_56_stage0_reg;
reg  lpm_mult_main_filtezexiti23i_59_en;
reg [31:0] main_filtezexiti23i_59_stage0_reg;
reg  lpm_mult_main_filtezexiti23i_67_en;
reg [31:0] main_filtezexiti23i_67_stage0_reg;
reg  lpm_mult_main_filtezexiti23i_69_en;
reg [31:0] main_filtezexiti23i_69_stage0_reg;
reg  lpm_mult_main_79_81_en;
reg [31:0] main_79_81_stage0_reg;
reg  lpm_mult_main_quantlexitii_91_en;
reg [31:0] main_quantlexitii_91_stage0_reg;
reg  lpm_mult_main_quantlexitii_89_en;
reg [31:0] main_quantlexitii_89_stage0_reg;
reg  lpm_mult_main_110_112_en;
reg [31:0] main_110_112_stage0_reg;
reg  lpm_mult_main_116_118_en;
reg [31:0] main_116_118_stage0_reg;
reg  lpm_mult_main_116_123_en;
reg [31:0] main_116_123_stage0_reg;
reg  lpm_mult_main_upzeroexit_131_en;
reg [31:0] main_upzeroexit_131_stage0_reg;
reg  lpm_mult_main_upzeroexit_135_en;
reg [31:0] main_upzeroexit_135_stage0_reg;
reg  lpm_mult_main_upzeroexit_139_en;
reg [31:0] main_upzeroexit_139_stage0_reg;
reg  lpm_mult_main_uppol2exit34_146_en;
reg [31:0] main_uppol2exit34_146_stage0_reg;
reg  lpm_mult_main_uppol2exit34_155_en;
reg [31:0] main_uppol2exit34_155_stage0_reg;
reg  lpm_mult_main_157_160_en;
reg [31:0] main_157_160_stage0_reg;
reg  lpm_mult_main_filtezexit8i26i_167_en;
reg [31:0] main_filtezexit8i26i_167_stage0_reg;
reg  lpm_mult_main_filtezexit8i26i_169_en;
reg [31:0] main_filtezexit8i26i_169_stage0_reg;
reg  lpm_mult_main_filtezexit8i26i_175_en;
reg [31:0] main_filtezexit8i26i_175_stage0_reg;
reg  lpm_mult_main_filtezexit8i26i_185_en;
reg [31:0] main_filtezexit8i26i_185_stage0_reg;
reg  lpm_mult_main_filtezexit8i26i_183_en;
reg [31:0] main_filtezexit8i26i_183_stage0_reg;
reg  lpm_mult_main_204_206_en;
reg [31:0] main_204_206_stage0_reg;
reg  lpm_mult_main_210_212_en;
reg [31:0] main_210_212_stage0_reg;
reg  lpm_mult_main_210_217_en;
reg [31:0] main_210_217_stage0_reg;
reg  lpm_mult_main_upzeroexit29_225_en;
reg [31:0] main_upzeroexit29_225_stage0_reg;
reg  lpm_mult_main_upzeroexit29_229_en;
reg [31:0] main_upzeroexit29_229_stage0_reg;
reg  lpm_mult_main_upzeroexit29_233_en;
reg [31:0] main_upzeroexit29_233_stage0_reg;
reg  lpm_mult_main_uppol2exit23_240_en;
reg [31:0] main_uppol2exit23_240_stage0_reg;
reg  lpm_mult_main_258_264_en;
reg [31:0] main_258_264_stage0_reg;
reg  lpm_mult_main_266_269_en;
reg [31:0] main_266_269_stage0_reg;
reg  lpm_mult_main_filtezexitii_274_en;
reg [31:0] main_filtezexitii_274_stage0_reg;
reg  lpm_mult_main_filtezexitii_276_en;
reg [31:0] main_filtezexitii_276_stage0_reg;
reg  lpm_mult_main_filtezexitii_290_en;
reg [31:0] main_filtezexitii_290_stage0_reg;
reg  lpm_mult_main_filtezexitii_284_en;
reg [31:0] main_filtezexitii_284_stage0_reg;
reg  lpm_mult_main_filtezexitii_287_en;
reg [31:0] main_filtezexitii_287_stage0_reg;
reg  lpm_mult_main_309_311_en;
reg [31:0] main_309_311_stage0_reg;
reg  lpm_mult_main_315_317_en;
reg [31:0] main_315_317_stage0_reg;
reg  lpm_mult_main_315_322_en;
reg [31:0] main_315_322_stage0_reg;
reg  lpm_mult_main_upzeroexit18_330_en;
reg [31:0] main_upzeroexit18_330_stage0_reg;
reg  lpm_mult_main_upzeroexit18_334_en;
reg [31:0] main_upzeroexit18_334_stage0_reg;
reg  lpm_mult_main_upzeroexit18_338_en;
reg [31:0] main_upzeroexit18_338_stage0_reg;
reg  lpm_mult_main_uppol2exit12_345_en;
reg [31:0] main_uppol2exit12_345_stage0_reg;
reg  lpm_mult_main_uppol2exit12_354_en;
reg [31:0] main_uppol2exit12_354_stage0_reg;
reg  lpm_mult_main_356_359_en;
reg [31:0] main_356_359_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_366_en;
reg [31:0] main_filtezexit8ii_366_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_368_en;
reg [31:0] main_filtezexit8ii_368_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_376_en;
reg [31:0] main_filtezexit8ii_376_stage0_reg;
reg  lpm_mult_main_filtezexit8ii_374_en;
reg [31:0] main_filtezexit8ii_374_stage0_reg;
reg  lpm_mult_main_395_397_en;
reg [31:0] main_395_397_stage0_reg;
reg  lpm_mult_main_401_403_en;
reg [31:0] main_401_403_stage0_reg;
reg  lpm_mult_main_401_408_en;
reg [31:0] main_401_408_stage0_reg;
reg  lpm_mult_main_upzeroexit7_416_en;
reg [31:0] main_upzeroexit7_416_stage0_reg;
reg  lpm_mult_main_upzeroexit7_420_en;
reg [31:0] main_upzeroexit7_420_stage0_reg;
reg  lpm_mult_main_upzeroexit7_424_en;
reg [31:0] main_upzeroexit7_424_stage0_reg;
reg  lpm_mult_main_uppol2exit_431_en;
reg [31:0] main_uppol2exit_431_stage0_reg;
reg  lpm_mult_main_uppol2exit_441_en;
reg [31:0] main_uppol2exit_441_stage0_reg;
reg  lpm_mult_main_uppol2exit_442_en;
reg [31:0] main_uppol2exit_442_stage0_reg;
reg  lpm_mult_main_446_451_en;
reg [31:0] main_446_451_stage0_reg;
reg  lpm_mult_main_446_455_en;
reg [31:0] main_446_455_stage0_reg;
reg  lpm_mult_main_decodeexiti_471_en;
reg [31:0] main_decodeexiti_471_stage0_reg;
reg  lpm_mult_main_decodeexiti_472_en;
reg [31:0] main_decodeexiti_472_stage0_reg;

/*   %259 = sdiv i32 %i.i.1, 2*/
lpm_divide lpm_divide_main_258_259 (
	.quotient (lpm_divide_main_258_259_temp_out),
	.remain (main_258_259_unused),
	.clock (clk),
	.aclr (1'd0),
	.clken (lpm_divide_main_258_259_en),
	.numer (main_signed_divide_32_0_op0),
	.denom (main_signed_divide_32_0_op1)
);

defparam
	lpm_divide_main_258_259.lpm_pipeline = 32,
	lpm_divide_main_258_259.lpm_widthn = 32,
	lpm_divide_main_258_259.lpm_widthd = 32,
	lpm_divide_main_258_259.lpm_drepresentation = "SIGNED",
	lpm_divide_main_258_259.lpm_nrepresentation = "SIGNED",
	lpm_divide_main_258_259.lpm_hint = "LPM_REMAINDERPOSITIVE=FALSE";


/* Unsynthesizable Statements */
always @(posedge clk)
	if (!memory_controller_waitrequest) begin
	/* main: %491*/
	/*   %492 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @.str, i32 0, i32 0), i32 %main_result.2) #1*/
	if ((cur_state == LEGUP_F_main_BB__491_307)) begin
		$write("Result: %d\n", $signed(main_preheader_main_result2_reg));
		// to fix quartus warning
		if (reset == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) finish <= 0;
	end
	/* main: %494*/
	/*   %495 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str1, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__494_308)) begin
		$write("RESULT: PASS\n");
	end
	/* main: %496*/
	/*   %497 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str2, i32 0, i32 0)) #1*/
	if ((cur_state == LEGUP_F_main_BB__496_309)) begin
		$write("RESULT: FAIL\n");
	end
end
always @(posedge clk) begin
if (reset == 1'b1)
	cur_state <= LEGUP_0;
else if (memory_controller_waitrequest == 1'd1)
	cur_state <= cur_state;
else
	cur_state <= next_state;
end

always @(*)
begin
next_state = cur_state;
case(cur_state)  // synthesis parallel_case  
LEGUP_0:
	if ((start == 1'd1))
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__110_71:
		next_state = LEGUP_F_main_BB__110_72;
LEGUP_F_main_BB__110_72:
		next_state = LEGUP_F_main_BB__110_73;
LEGUP_F_main_BB__110_73:
		next_state = LEGUP_F_main_BB__110_74;
LEGUP_F_main_BB__110_74:
		next_state = LEGUP_F_main_BB__110_75;
LEGUP_F_main_BB__110_75:
		next_state = LEGUP_F_main_BB_preheader44_70;
LEGUP_F_main_BB__116_77:
		next_state = LEGUP_F_main_BB__116_78;
LEGUP_F_main_BB__116_78:
		next_state = LEGUP_F_main_BB__116_79;
LEGUP_F_main_BB__116_79:
		next_state = LEGUP_F_main_BB__116_80;
LEGUP_F_main_BB__116_80:
		next_state = LEGUP_F_main_BB__116_81;
LEGUP_F_main_BB__116_81:
		next_state = LEGUP_F_main_BB_preheader45_76;
LEGUP_F_main_BB__12_17:
		next_state = LEGUP_F_main_BB__12_18;
LEGUP_F_main_BB__12_18:
		next_state = LEGUP_F_main_BB_preheader47_15;
LEGUP_F_main_BB__143_89:
		next_state = LEGUP_F_main_BB_uppol2exit34_90;
LEGUP_F_main_BB__14_20:
		next_state = LEGUP_F_main_BB__14_21;
LEGUP_F_main_BB__14_21:
		next_state = LEGUP_F_main_BB__14_22;
LEGUP_F_main_BB__14_22:
		next_state = LEGUP_F_main_BB__14_23;
LEGUP_F_main_BB__14_23:
		next_state = LEGUP_F_main_BB__22_24;
LEGUP_F_main_BB__156_94:
	if ((main_156_exitcond63 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexit8i26i_99;
	else if ((main_156_exitcond63 == 1'd0))
		next_state = LEGUP_F_main_BB__157_95;
LEGUP_F_main_BB__157_95:
		next_state = LEGUP_F_main_BB__157_96;
LEGUP_F_main_BB__157_96:
		next_state = LEGUP_F_main_BB__157_97;
LEGUP_F_main_BB__157_97:
		next_state = LEGUP_F_main_BB__157_98;
LEGUP_F_main_BB__157_98:
		next_state = LEGUP_F_main_BB__156_94;
LEGUP_F_main_BB__191_106:
		next_state = LEGUP_F_main_BB_logschexiti27i_107;
LEGUP_F_main_BB__1_1:
	if ((main_1_exitcond86 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader49preheader_2;
	else if ((main_1_exitcond86 == 1'd0))
		next_state = LEGUP_F_main_BB__3_3;
LEGUP_F_main_BB__204_113:
		next_state = LEGUP_F_main_BB__204_114;
LEGUP_F_main_BB__204_114:
		next_state = LEGUP_F_main_BB__204_115;
LEGUP_F_main_BB__204_115:
		next_state = LEGUP_F_main_BB__204_116;
LEGUP_F_main_BB__204_116:
		next_state = LEGUP_F_main_BB__204_117;
LEGUP_F_main_BB__204_117:
		next_state = LEGUP_F_main_BB_preheader41_112;
LEGUP_F_main_BB__210_119:
		next_state = LEGUP_F_main_BB__210_120;
LEGUP_F_main_BB__210_120:
		next_state = LEGUP_F_main_BB__210_121;
LEGUP_F_main_BB__210_121:
		next_state = LEGUP_F_main_BB__210_122;
LEGUP_F_main_BB__210_122:
		next_state = LEGUP_F_main_BB__210_123;
LEGUP_F_main_BB__210_123:
		next_state = LEGUP_F_main_BB_preheader42_118;
LEGUP_F_main_BB__22_24:
	if ((main_22_exitcond42 == 1'd1))
		next_state = LEGUP_F_main_BB__37_30;
	else if ((main_22_exitcond42 == 1'd0))
		next_state = LEGUP_F_main_BB__27_25;
LEGUP_F_main_BB__237_131:
		next_state = LEGUP_F_main_BB_uppol2exit23_132;
LEGUP_F_main_BB__254_166:
		next_state = LEGUP_F_main_BB__256_167;
LEGUP_F_main_BB__256_167:
	if ((main_256_exitcond39 == 1'd1))
		next_state = LEGUP_F_main_BB_adpcm_mainexitpreheader_168;
	else if ((main_256_exitcond39 == 1'd0))
		next_state = LEGUP_F_main_BB__258_169;
LEGUP_F_main_BB__258_169:
		next_state = LEGUP_F_main_BB__258_170;
LEGUP_F_main_BB__258_170:
		next_state = LEGUP_F_main_BB__258_171;
LEGUP_F_main_BB__258_171:
		next_state = LEGUP_F_main_BB__258_172;
LEGUP_F_main_BB__258_172:
		next_state = LEGUP_F_main_BB__258_173;
LEGUP_F_main_BB__258_173:
		next_state = LEGUP_F_main_BB__258_174;
LEGUP_F_main_BB__258_174:
		next_state = LEGUP_F_main_BB__258_175;
LEGUP_F_main_BB__258_175:
		next_state = LEGUP_F_main_BB__258_176;
LEGUP_F_main_BB__258_176:
		next_state = LEGUP_F_main_BB__258_177;
LEGUP_F_main_BB__258_177:
		next_state = LEGUP_F_main_BB__258_178;
LEGUP_F_main_BB__258_178:
		next_state = LEGUP_F_main_BB__258_179;
LEGUP_F_main_BB__258_179:
		next_state = LEGUP_F_main_BB__258_180;
LEGUP_F_main_BB__258_180:
		next_state = LEGUP_F_main_BB__258_181;
LEGUP_F_main_BB__258_181:
		next_state = LEGUP_F_main_BB__258_182;
LEGUP_F_main_BB__258_182:
		next_state = LEGUP_F_main_BB__258_183;
LEGUP_F_main_BB__258_183:
		next_state = LEGUP_F_main_BB__258_184;
LEGUP_F_main_BB__258_184:
		next_state = LEGUP_F_main_BB__258_185;
LEGUP_F_main_BB__258_185:
		next_state = LEGUP_F_main_BB__258_186;
LEGUP_F_main_BB__258_186:
		next_state = LEGUP_F_main_BB__258_187;
LEGUP_F_main_BB__258_187:
		next_state = LEGUP_F_main_BB__258_188;
LEGUP_F_main_BB__258_188:
		next_state = LEGUP_F_main_BB__258_189;
LEGUP_F_main_BB__258_189:
		next_state = LEGUP_F_main_BB__258_190;
LEGUP_F_main_BB__258_190:
		next_state = LEGUP_F_main_BB__258_191;
LEGUP_F_main_BB__258_191:
		next_state = LEGUP_F_main_BB__258_192;
LEGUP_F_main_BB__258_192:
		next_state = LEGUP_F_main_BB__258_193;
LEGUP_F_main_BB__258_193:
		next_state = LEGUP_F_main_BB__258_194;
LEGUP_F_main_BB__258_194:
		next_state = LEGUP_F_main_BB__258_195;
LEGUP_F_main_BB__258_195:
		next_state = LEGUP_F_main_BB__258_196;
LEGUP_F_main_BB__258_196:
		next_state = LEGUP_F_main_BB__258_197;
LEGUP_F_main_BB__258_197:
		next_state = LEGUP_F_main_BB__258_198;
LEGUP_F_main_BB__258_198:
		next_state = LEGUP_F_main_BB__258_199;
LEGUP_F_main_BB__258_199:
		next_state = LEGUP_F_main_BB__258_200;
LEGUP_F_main_BB__258_200:
		next_state = LEGUP_F_main_BB__258_201;
LEGUP_F_main_BB__258_201:
		next_state = LEGUP_F_main_BB__258_202;
LEGUP_F_main_BB__258_202:
		next_state = LEGUP_F_main_BB__258_203;
LEGUP_F_main_BB__258_203:
		next_state = LEGUP_F_main_BB__265_204;
LEGUP_F_main_BB__265_204:
	if ((main_265_exitcond9 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexitii_209;
	else if ((main_265_exitcond9 == 1'd0))
		next_state = LEGUP_F_main_BB__266_205;
LEGUP_F_main_BB__266_205:
		next_state = LEGUP_F_main_BB__266_206;
LEGUP_F_main_BB__266_206:
		next_state = LEGUP_F_main_BB__266_207;
LEGUP_F_main_BB__266_207:
		next_state = LEGUP_F_main_BB__266_208;
LEGUP_F_main_BB__266_208:
		next_state = LEGUP_F_main_BB__265_204;
LEGUP_F_main_BB__27_25:
		next_state = LEGUP_F_main_BB__27_26;
LEGUP_F_main_BB__27_26:
		next_state = LEGUP_F_main_BB__27_27;
LEGUP_F_main_BB__27_27:
		next_state = LEGUP_F_main_BB__27_28;
LEGUP_F_main_BB__27_28:
		next_state = LEGUP_F_main_BB__27_29;
LEGUP_F_main_BB__27_29:
		next_state = LEGUP_F_main_BB__22_24;
LEGUP_F_main_BB__296_213:
		next_state = LEGUP_F_main_BB_logsclexitii_214;
LEGUP_F_main_BB__309_220:
		next_state = LEGUP_F_main_BB__309_221;
LEGUP_F_main_BB__309_221:
		next_state = LEGUP_F_main_BB__309_222;
LEGUP_F_main_BB__309_222:
		next_state = LEGUP_F_main_BB__309_223;
LEGUP_F_main_BB__309_223:
		next_state = LEGUP_F_main_BB__309_224;
LEGUP_F_main_BB__309_224:
		next_state = LEGUP_F_main_BB_preheader38_219;
LEGUP_F_main_BB__315_226:
		next_state = LEGUP_F_main_BB__315_227;
LEGUP_F_main_BB__315_227:
		next_state = LEGUP_F_main_BB__315_228;
LEGUP_F_main_BB__315_228:
		next_state = LEGUP_F_main_BB__315_229;
LEGUP_F_main_BB__315_229:
		next_state = LEGUP_F_main_BB__315_230;
LEGUP_F_main_BB__315_230:
		next_state = LEGUP_F_main_BB_preheader39_225;
LEGUP_F_main_BB__342_238:
		next_state = LEGUP_F_main_BB_uppol2exit12_239;
LEGUP_F_main_BB__355_243:
	if ((main_355_exitcond19 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexit8ii_248;
	else if ((main_355_exitcond19 == 1'd0))
		next_state = LEGUP_F_main_BB__356_244;
LEGUP_F_main_BB__356_244:
		next_state = LEGUP_F_main_BB__356_245;
LEGUP_F_main_BB__356_245:
		next_state = LEGUP_F_main_BB__356_246;
LEGUP_F_main_BB__356_246:
		next_state = LEGUP_F_main_BB__356_247;
LEGUP_F_main_BB__356_247:
		next_state = LEGUP_F_main_BB__355_243;
LEGUP_F_main_BB__37_30:
		next_state = LEGUP_F_main_BB__37_31;
LEGUP_F_main_BB__37_31:
		next_state = LEGUP_F_main_BB__37_32;
LEGUP_F_main_BB__37_32:
		next_state = LEGUP_F_main_BB__40_33;
LEGUP_F_main_BB__382_252:
		next_state = LEGUP_F_main_BB_logschexitii_253;
LEGUP_F_main_BB__395_259:
		next_state = LEGUP_F_main_BB__395_260;
LEGUP_F_main_BB__395_260:
		next_state = LEGUP_F_main_BB__395_261;
LEGUP_F_main_BB__395_261:
		next_state = LEGUP_F_main_BB__395_262;
LEGUP_F_main_BB__395_262:
		next_state = LEGUP_F_main_BB__395_263;
LEGUP_F_main_BB__395_263:
		next_state = LEGUP_F_main_BB_preheader35_258;
LEGUP_F_main_BB__3_3:
		next_state = LEGUP_F_main_BB__3_4;
LEGUP_F_main_BB__3_4:
		next_state = LEGUP_F_main_BB__3_5;
LEGUP_F_main_BB__3_5:
		next_state = LEGUP_F_main_BB__1_1;
LEGUP_F_main_BB__401_265:
		next_state = LEGUP_F_main_BB__401_266;
LEGUP_F_main_BB__401_266:
		next_state = LEGUP_F_main_BB__401_267;
LEGUP_F_main_BB__401_267:
		next_state = LEGUP_F_main_BB__401_268;
LEGUP_F_main_BB__401_268:
		next_state = LEGUP_F_main_BB__401_269;
LEGUP_F_main_BB__401_269:
		next_state = LEGUP_F_main_BB_preheader36_264;
LEGUP_F_main_BB__40_33:
	if ((main_40_exitcond47 == 1'd1))
		next_state = LEGUP_F_main_BB__47_39;
	else if ((main_40_exitcond47 == 1'd0))
		next_state = LEGUP_F_main_BB__42_34;
LEGUP_F_main_BB__428_277:
		next_state = LEGUP_F_main_BB_uppol2exit_278;
LEGUP_F_main_BB__42_34:
		next_state = LEGUP_F_main_BB__42_35;
LEGUP_F_main_BB__42_35:
		next_state = LEGUP_F_main_BB__42_36;
LEGUP_F_main_BB__42_36:
		next_state = LEGUP_F_main_BB__42_37;
LEGUP_F_main_BB__42_37:
		next_state = LEGUP_F_main_BB__42_38;
LEGUP_F_main_BB__42_38:
		next_state = LEGUP_F_main_BB__40_33;
LEGUP_F_main_BB__443_280:
	if ((main_443_exitcond27 == 1'd1))
		next_state = LEGUP_F_main_BB__458_287;
	else if ((main_443_exitcond27 == 1'd0))
		next_state = LEGUP_F_main_BB__446_281;
LEGUP_F_main_BB__446_281:
		next_state = LEGUP_F_main_BB__446_282;
LEGUP_F_main_BB__446_282:
		next_state = LEGUP_F_main_BB__446_283;
LEGUP_F_main_BB__446_283:
		next_state = LEGUP_F_main_BB__446_284;
LEGUP_F_main_BB__446_284:
		next_state = LEGUP_F_main_BB__446_285;
LEGUP_F_main_BB__446_285:
		next_state = LEGUP_F_main_BB__446_286;
LEGUP_F_main_BB__446_286:
		next_state = LEGUP_F_main_BB__443_280;
LEGUP_F_main_BB__458_287:
		next_state = LEGUP_F_main_BB__458_288;
LEGUP_F_main_BB__458_288:
		next_state = LEGUP_F_main_BB__458_289;
LEGUP_F_main_BB__458_289:
		next_state = LEGUP_F_main_BB__462_290;
LEGUP_F_main_BB__462_290:
	if ((main_462_exitcond32 == 1'd1))
		next_state = LEGUP_F_main_BB_decodeexiti_295;
	else if ((main_462_exitcond32 == 1'd0))
		next_state = LEGUP_F_main_BB__466_291;
LEGUP_F_main_BB__466_291:
		next_state = LEGUP_F_main_BB__466_292;
LEGUP_F_main_BB__466_292:
		next_state = LEGUP_F_main_BB__466_293;
LEGUP_F_main_BB__466_293:
		next_state = LEGUP_F_main_BB__466_294;
LEGUP_F_main_BB__466_294:
		next_state = LEGUP_F_main_BB__462_290;
LEGUP_F_main_BB__478_300:
		next_state = LEGUP_F_main_BB__478_301;
LEGUP_F_main_BB__478_301:
		next_state = LEGUP_F_main_BB__478_302;
LEGUP_F_main_BB__478_302:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_298;
LEGUP_F_main_BB__47_39:
		next_state = LEGUP_F_main_BB__47_40;
LEGUP_F_main_BB__47_40:
		next_state = LEGUP_F_main_BB__47_41;
LEGUP_F_main_BB__47_41:
		next_state = LEGUP_F_main_BB__47_42;
LEGUP_F_main_BB__47_42:
		next_state = LEGUP_F_main_BB__47_43;
LEGUP_F_main_BB__47_43:
		next_state = LEGUP_F_main_BB__52_44;
LEGUP_F_main_BB__485_304:
		next_state = LEGUP_F_main_BB__485_305;
LEGUP_F_main_BB__485_305:
		next_state = LEGUP_F_main_BB__485_306;
LEGUP_F_main_BB__485_306:
		next_state = LEGUP_F_main_BB_preheader_303;
LEGUP_F_main_BB__491_307:
	if ((main_491_493 == 1'd1))
		next_state = LEGUP_F_main_BB__494_308;
	else if ((main_491_493 == 1'd0))
		next_state = LEGUP_F_main_BB__496_309;
LEGUP_F_main_BB__494_308:
		next_state = LEGUP_F_main_BB__498_310;
LEGUP_F_main_BB__496_309:
		next_state = LEGUP_F_main_BB__498_310;
LEGUP_F_main_BB__498_310:
		next_state = LEGUP_0;
LEGUP_F_main_BB__52_44:
	if ((main_52_exitcond52 == 1'd1))
		next_state = LEGUP_F_main_BB_filtezexiti23i_49;
	else if ((main_52_exitcond52 == 1'd0))
		next_state = LEGUP_F_main_BB__53_45;
LEGUP_F_main_BB__53_45:
		next_state = LEGUP_F_main_BB__53_46;
LEGUP_F_main_BB__53_46:
		next_state = LEGUP_F_main_BB__53_47;
LEGUP_F_main_BB__53_47:
		next_state = LEGUP_F_main_BB__53_48;
LEGUP_F_main_BB__53_48:
		next_state = LEGUP_F_main_BB__52_44;
LEGUP_F_main_BB__6_10:
		next_state = LEGUP_F_main_BB_preheader49_6;
LEGUP_F_main_BB__6_8:
		next_state = LEGUP_F_main_BB__6_9;
LEGUP_F_main_BB__6_9:
		next_state = LEGUP_F_main_BB__6_10;
LEGUP_F_main_BB__76_51:
	if ((main_76_78 == 1'd1))
		next_state = LEGUP_F_main_BB__79_52;
	else if ((main_76_78 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexitii_57;
LEGUP_F_main_BB__79_52:
		next_state = LEGUP_F_main_BB__79_53;
LEGUP_F_main_BB__79_53:
		next_state = LEGUP_F_main_BB__79_54;
LEGUP_F_main_BB__79_54:
		next_state = LEGUP_F_main_BB__79_55;
LEGUP_F_main_BB__79_55:
	if ((main_79_83 == 1'd1))
		next_state = LEGUP_F_main_BB__84_56;
	else if ((main_79_83 == 1'd0))
		next_state = LEGUP_F_main_BB_quantlexitii_57;
LEGUP_F_main_BB__84_56:
		next_state = LEGUP_F_main_BB__76_51;
LEGUP_F_main_BB__97_64:
		next_state = LEGUP_F_main_BB_logsclexiti24i_65;
LEGUP_F_main_BB__9_13:
		next_state = LEGUP_F_main_BB__9_14;
LEGUP_F_main_BB__9_14:
		next_state = LEGUP_F_main_BB_preheader48_11;
LEGUP_F_main_BB_adpcm_mainexit_298:
	if ((main_adpcm_mainexit_exitcond == 1'd1))
		next_state = LEGUP_F_main_BB_preheaderpreheader_299;
	else if ((main_adpcm_mainexit_exitcond == 1'd0))
		next_state = LEGUP_F_main_BB__478_300;
LEGUP_F_main_BB_adpcm_mainexitpreheader_168:
		next_state = LEGUP_F_main_BB_adpcm_mainexit_298;
LEGUP_F_main_BB_decodeexiti_295:
		next_state = LEGUP_F_main_BB_decodeexiti_296;
LEGUP_F_main_BB_decodeexiti_296:
		next_state = LEGUP_F_main_BB_decodeexiti_297;
LEGUP_F_main_BB_decodeexiti_297:
		next_state = LEGUP_F_main_BB__256_167;
LEGUP_F_main_BB_filtezexit8i26i_100:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_101;
LEGUP_F_main_BB_filtezexit8i26i_101:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_102;
LEGUP_F_main_BB_filtezexit8i26i_102:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_103;
LEGUP_F_main_BB_filtezexit8i26i_103:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_104;
LEGUP_F_main_BB_filtezexit8i26i_104:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_105;
LEGUP_F_main_BB_filtezexit8i26i_105:
	if ((main_filtezexit8i26i_190_reg == 1'd1))
		next_state = LEGUP_F_main_BB_logschexiti27i_107;
	else if ((main_filtezexit8i26i_190_reg == 1'd0))
		next_state = LEGUP_F_main_BB__191_106;
LEGUP_F_main_BB_filtezexit8i26i_99:
		next_state = LEGUP_F_main_BB_filtezexit8i26i_100;
LEGUP_F_main_BB_filtezexit8ii_248:
		next_state = LEGUP_F_main_BB_filtezexit8ii_249;
LEGUP_F_main_BB_filtezexit8ii_249:
		next_state = LEGUP_F_main_BB_filtezexit8ii_250;
LEGUP_F_main_BB_filtezexit8ii_250:
		next_state = LEGUP_F_main_BB_filtezexit8ii_251;
LEGUP_F_main_BB_filtezexit8ii_251:
	if ((main_filtezexit8ii_381_reg == 1'd1))
		next_state = LEGUP_F_main_BB_logschexitii_253;
	else if ((main_filtezexit8ii_381_reg == 1'd0))
		next_state = LEGUP_F_main_BB__382_252;
LEGUP_F_main_BB_filtezexiti23i_49:
		next_state = LEGUP_F_main_BB_filtezexiti23i_50;
LEGUP_F_main_BB_filtezexiti23i_50:
		next_state = LEGUP_F_main_BB__76_51;
LEGUP_F_main_BB_filtezexitii_209:
		next_state = LEGUP_F_main_BB_filtezexitii_210;
LEGUP_F_main_BB_filtezexitii_210:
		next_state = LEGUP_F_main_BB_filtezexitii_211;
LEGUP_F_main_BB_filtezexitii_211:
		next_state = LEGUP_F_main_BB_filtezexitii_212;
LEGUP_F_main_BB_filtezexitii_212:
	if ((main_filtezexitii_295 == 1'd1))
		next_state = LEGUP_F_main_BB_logsclexitii_214;
	else if ((main_filtezexitii_295 == 1'd0))
		next_state = LEGUP_F_main_BB__296_213;
LEGUP_F_main_BB_logschexiti27i_107:
		next_state = LEGUP_F_main_BB_logschexiti27i_108;
LEGUP_F_main_BB_logschexiti27i_108:
		next_state = LEGUP_F_main_BB_logschexiti27i_109;
LEGUP_F_main_BB_logschexiti27i_109:
	if ((main_logschexiti27i_202_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader41preheader_111;
	else if ((main_logschexiti27i_202_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader42preheader_110;
LEGUP_F_main_BB_logschexitii_253:
		next_state = LEGUP_F_main_BB_logschexitii_254;
LEGUP_F_main_BB_logschexitii_254:
		next_state = LEGUP_F_main_BB_logschexitii_255;
LEGUP_F_main_BB_logschexitii_255:
	if ((main_logschexitii_393_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader35preheader_257;
	else if ((main_logschexitii_393_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader36preheader_256;
LEGUP_F_main_BB_logsclexiti24i_65:
		next_state = LEGUP_F_main_BB_logsclexiti24i_66;
LEGUP_F_main_BB_logsclexiti24i_66:
		next_state = LEGUP_F_main_BB_logsclexiti24i_67;
LEGUP_F_main_BB_logsclexiti24i_67:
	if ((main_logsclexiti24i_108_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader44preheader_69;
	else if ((main_logsclexiti24i_108_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader45preheader_68;
LEGUP_F_main_BB_logsclexitii_214:
		next_state = LEGUP_F_main_BB_logsclexitii_215;
LEGUP_F_main_BB_logsclexitii_215:
		next_state = LEGUP_F_main_BB_logsclexitii_216;
LEGUP_F_main_BB_logsclexitii_216:
	if ((main_logsclexitii_307_reg == 1'd1))
		next_state = LEGUP_F_main_BB_preheader38preheader_218;
	else if ((main_logsclexitii_307_reg == 1'd0))
		next_state = LEGUP_F_main_BB_preheader39preheader_217;
LEGUP_F_main_BB_preheader35_258:
	if ((main_preheader35_exitcond25 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit7loopexit_270;
	else if ((main_preheader35_exitcond25 == 1'd0))
		next_state = LEGUP_F_main_BB__395_259;
LEGUP_F_main_BB_preheader35preheader_257:
		next_state = LEGUP_F_main_BB_preheader35_258;
LEGUP_F_main_BB_preheader36_264:
	if ((main_preheader36_exitcond22 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit7loopexit1_271;
	else if ((main_preheader36_exitcond22 == 1'd0))
		next_state = LEGUP_F_main_BB__401_265;
LEGUP_F_main_BB_preheader36preheader_256:
		next_state = LEGUP_F_main_BB_preheader36_264;
LEGUP_F_main_BB_preheader38_219:
	if ((main_preheader38_exitcond15 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit18loopexit_231;
	else if ((main_preheader38_exitcond15 == 1'd0))
		next_state = LEGUP_F_main_BB__309_220;
LEGUP_F_main_BB_preheader38preheader_218:
		next_state = LEGUP_F_main_BB_preheader38_219;
LEGUP_F_main_BB_preheader39_225:
	if ((main_preheader39_exitcond12 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit18loopexit2_232;
	else if ((main_preheader39_exitcond12 == 1'd0))
		next_state = LEGUP_F_main_BB__315_226;
LEGUP_F_main_BB_preheader39preheader_217:
		next_state = LEGUP_F_main_BB_preheader39_225;
LEGUP_F_main_BB_preheader41_112:
	if ((main_preheader41_exitcond69 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit29loopexit_124;
	else if ((main_preheader41_exitcond69 == 1'd0))
		next_state = LEGUP_F_main_BB__204_113;
LEGUP_F_main_BB_preheader41preheader_111:
		next_state = LEGUP_F_main_BB_preheader41_112;
LEGUP_F_main_BB_preheader42_118:
	if ((main_preheader42_exitcond66 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexit29loopexit3_125;
	else if ((main_preheader42_exitcond66 == 1'd0))
		next_state = LEGUP_F_main_BB__210_119;
LEGUP_F_main_BB_preheader42preheader_110:
		next_state = LEGUP_F_main_BB_preheader42_118;
LEGUP_F_main_BB_preheader44_70:
	if ((main_preheader44_exitcond59 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitloopexit_82;
	else if ((main_preheader44_exitcond59 == 1'd0))
		next_state = LEGUP_F_main_BB__110_71;
LEGUP_F_main_BB_preheader44preheader_69:
		next_state = LEGUP_F_main_BB_preheader44_70;
LEGUP_F_main_BB_preheader45_76:
	if ((main_preheader45_exitcond56 == 1'd1))
		next_state = LEGUP_F_main_BB_upzeroexitloopexit4_83;
	else if ((main_preheader45_exitcond56 == 1'd0))
		next_state = LEGUP_F_main_BB__116_77;
LEGUP_F_main_BB_preheader45preheader_68:
		next_state = LEGUP_F_main_BB_preheader45_76;
LEGUP_F_main_BB_preheader47_15:
	if ((main_preheader47_exitcond76 == 1'd1))
		next_state = LEGUP_F_main_BB_resetexitipreheader_16;
	else if ((main_preheader47_exitcond76 == 1'd0))
		next_state = LEGUP_F_main_BB__12_17;
LEGUP_F_main_BB_preheader47preheader_12:
		next_state = LEGUP_F_main_BB_preheader47_15;
LEGUP_F_main_BB_preheader48_11:
	if ((main_preheader48_exitcond79 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader47preheader_12;
	else if ((main_preheader48_exitcond79 == 1'd0))
		next_state = LEGUP_F_main_BB__9_13;
LEGUP_F_main_BB_preheader48preheader_7:
		next_state = LEGUP_F_main_BB_preheader48_11;
LEGUP_F_main_BB_preheader49_6:
	if ((main_preheader49_exitcond81 == 1'd1))
		next_state = LEGUP_F_main_BB_preheader48preheader_7;
	else if ((main_preheader49_exitcond81 == 1'd0))
		next_state = LEGUP_F_main_BB__6_8;
LEGUP_F_main_BB_preheader49preheader_2:
		next_state = LEGUP_F_main_BB_preheader49_6;
LEGUP_F_main_BB_preheader_303:
	if ((main_preheader_exitcond5 == 1'd1))
		next_state = LEGUP_F_main_BB__491_307;
	else if ((main_preheader_exitcond5 == 1'd0))
		next_state = LEGUP_F_main_BB__485_304;
LEGUP_F_main_BB_preheaderpreheader_299:
		next_state = LEGUP_F_main_BB_preheader_303;
LEGUP_F_main_BB_quantlexitii_57:
		next_state = LEGUP_F_main_BB_quantlexitii_58;
LEGUP_F_main_BB_quantlexitii_58:
		next_state = LEGUP_F_main_BB_quantlexitii_59;
LEGUP_F_main_BB_quantlexitii_59:
		next_state = LEGUP_F_main_BB_quantlexitii_60;
LEGUP_F_main_BB_quantlexitii_60:
		next_state = LEGUP_F_main_BB_quantlexitii_61;
LEGUP_F_main_BB_quantlexitii_61:
		next_state = LEGUP_F_main_BB_quantlexitii_62;
LEGUP_F_main_BB_quantlexitii_62:
		next_state = LEGUP_F_main_BB_quantlexitii_63;
LEGUP_F_main_BB_quantlexitii_63:
	if ((main_quantlexitii_96_reg == 1'd1))
		next_state = LEGUP_F_main_BB_logsclexiti24i_65;
	else if ((main_quantlexitii_96_reg == 1'd0))
		next_state = LEGUP_F_main_BB__97_64;
LEGUP_F_main_BB_resetexiti_19:
	if ((main_resetexiti_exitcond73 == 1'd1))
		next_state = LEGUP_F_main_BB__254_166;
	else if ((main_resetexiti_exitcond73 == 1'd0))
		next_state = LEGUP_F_main_BB__14_20;
LEGUP_F_main_BB_resetexitipreheader_16:
		next_state = LEGUP_F_main_BB_resetexiti_19;
LEGUP_F_main_BB_uppol2exit12_239:
		next_state = LEGUP_F_main_BB_uppol2exit12_240;
LEGUP_F_main_BB_uppol2exit12_240:
		next_state = LEGUP_F_main_BB_uppol2exit12_241;
LEGUP_F_main_BB_uppol2exit12_241:
		next_state = LEGUP_F_main_BB_uppol2exit12_242;
LEGUP_F_main_BB_uppol2exit12_242:
		next_state = LEGUP_F_main_BB__355_243;
LEGUP_F_main_BB_uppol2exit23_132:
		next_state = LEGUP_F_main_BB_uppol2exit23_133;
LEGUP_F_main_BB_uppol2exit23_133:
		next_state = LEGUP_F_main_BB_uppol2exit23_134;
LEGUP_F_main_BB_uppol2exit23_134:
		next_state = LEGUP_F_main_BB_uppol2exit23_135;
LEGUP_F_main_BB_uppol2exit23_135:
		next_state = LEGUP_F_main_BB_uppol2exit23_136;
LEGUP_F_main_BB_uppol2exit23_136:
		next_state = LEGUP_F_main_BB_uppol2exit23_137;
LEGUP_F_main_BB_uppol2exit23_137:
		next_state = LEGUP_F_main_BB_uppol2exit23_138;
LEGUP_F_main_BB_uppol2exit23_138:
		next_state = LEGUP_F_main_BB_uppol2exit23_139;
LEGUP_F_main_BB_uppol2exit23_139:
		next_state = LEGUP_F_main_BB_uppol2exit23_140;
LEGUP_F_main_BB_uppol2exit23_140:
		next_state = LEGUP_F_main_BB_uppol2exit23_141;
LEGUP_F_main_BB_uppol2exit23_141:
		next_state = LEGUP_F_main_BB_uppol2exit23_142;
LEGUP_F_main_BB_uppol2exit23_142:
		next_state = LEGUP_F_main_BB_uppol2exit23_143;
LEGUP_F_main_BB_uppol2exit23_143:
		next_state = LEGUP_F_main_BB_uppol2exit23_144;
LEGUP_F_main_BB_uppol2exit23_144:
		next_state = LEGUP_F_main_BB_uppol2exit23_145;
LEGUP_F_main_BB_uppol2exit23_145:
		next_state = LEGUP_F_main_BB_uppol2exit23_146;
LEGUP_F_main_BB_uppol2exit23_146:
		next_state = LEGUP_F_main_BB_uppol2exit23_147;
LEGUP_F_main_BB_uppol2exit23_147:
		next_state = LEGUP_F_main_BB_uppol2exit23_148;
LEGUP_F_main_BB_uppol2exit23_148:
		next_state = LEGUP_F_main_BB_uppol2exit23_149;
LEGUP_F_main_BB_uppol2exit23_149:
		next_state = LEGUP_F_main_BB_uppol2exit23_150;
LEGUP_F_main_BB_uppol2exit23_150:
		next_state = LEGUP_F_main_BB_uppol2exit23_151;
LEGUP_F_main_BB_uppol2exit23_151:
		next_state = LEGUP_F_main_BB_uppol2exit23_152;
LEGUP_F_main_BB_uppol2exit23_152:
		next_state = LEGUP_F_main_BB_uppol2exit23_153;
LEGUP_F_main_BB_uppol2exit23_153:
		next_state = LEGUP_F_main_BB_uppol2exit23_154;
LEGUP_F_main_BB_uppol2exit23_154:
		next_state = LEGUP_F_main_BB_uppol2exit23_155;
LEGUP_F_main_BB_uppol2exit23_155:
		next_state = LEGUP_F_main_BB_uppol2exit23_156;
LEGUP_F_main_BB_uppol2exit23_156:
		next_state = LEGUP_F_main_BB_uppol2exit23_157;
LEGUP_F_main_BB_uppol2exit23_157:
		next_state = LEGUP_F_main_BB_uppol2exit23_158;
LEGUP_F_main_BB_uppol2exit23_158:
		next_state = LEGUP_F_main_BB_uppol2exit23_159;
LEGUP_F_main_BB_uppol2exit23_159:
		next_state = LEGUP_F_main_BB_uppol2exit23_160;
LEGUP_F_main_BB_uppol2exit23_160:
		next_state = LEGUP_F_main_BB_uppol2exit23_161;
LEGUP_F_main_BB_uppol2exit23_161:
		next_state = LEGUP_F_main_BB_uppol2exit23_162;
LEGUP_F_main_BB_uppol2exit23_162:
		next_state = LEGUP_F_main_BB_uppol2exit23_163;
LEGUP_F_main_BB_uppol2exit23_163:
		next_state = LEGUP_F_main_BB_uppol2exit23_164;
LEGUP_F_main_BB_uppol2exit23_164:
		next_state = LEGUP_F_main_BB_uppol2exit23_165;
LEGUP_F_main_BB_uppol2exit23_165:
		next_state = LEGUP_F_main_BB_resetexiti_19;
LEGUP_F_main_BB_uppol2exit34_90:
		next_state = LEGUP_F_main_BB_uppol2exit34_91;
LEGUP_F_main_BB_uppol2exit34_91:
		next_state = LEGUP_F_main_BB_uppol2exit34_92;
LEGUP_F_main_BB_uppol2exit34_92:
		next_state = LEGUP_F_main_BB_uppol2exit34_93;
LEGUP_F_main_BB_uppol2exit34_93:
		next_state = LEGUP_F_main_BB__156_94;
LEGUP_F_main_BB_uppol2exit_278:
		next_state = LEGUP_F_main_BB_uppol2exit_279;
LEGUP_F_main_BB_uppol2exit_279:
		next_state = LEGUP_F_main_BB__443_280;
LEGUP_F_main_BB_upzeroexit18_233:
		next_state = LEGUP_F_main_BB_upzeroexit18_234;
LEGUP_F_main_BB_upzeroexit18_234:
		next_state = LEGUP_F_main_BB_upzeroexit18_235;
LEGUP_F_main_BB_upzeroexit18_235:
		next_state = LEGUP_F_main_BB_upzeroexit18_236;
LEGUP_F_main_BB_upzeroexit18_236:
		next_state = LEGUP_F_main_BB_upzeroexit18_237;
LEGUP_F_main_BB_upzeroexit18_237:
	if ((main_upzeroexit18_341_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exit12_239;
	else if ((main_upzeroexit18_341_reg == 1'd0))
		next_state = LEGUP_F_main_BB__342_238;
LEGUP_F_main_BB_upzeroexit18loopexit2_232:
		next_state = LEGUP_F_main_BB_upzeroexit18_233;
LEGUP_F_main_BB_upzeroexit18loopexit_231:
		next_state = LEGUP_F_main_BB_upzeroexit18_233;
LEGUP_F_main_BB_upzeroexit29_126:
		next_state = LEGUP_F_main_BB_upzeroexit29_127;
LEGUP_F_main_BB_upzeroexit29_127:
		next_state = LEGUP_F_main_BB_upzeroexit29_128;
LEGUP_F_main_BB_upzeroexit29_128:
		next_state = LEGUP_F_main_BB_upzeroexit29_129;
LEGUP_F_main_BB_upzeroexit29_129:
		next_state = LEGUP_F_main_BB_upzeroexit29_130;
LEGUP_F_main_BB_upzeroexit29_130:
	if ((main_upzeroexit29_236_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exit23_132;
	else if ((main_upzeroexit29_236_reg == 1'd0))
		next_state = LEGUP_F_main_BB__237_131;
LEGUP_F_main_BB_upzeroexit29loopexit3_125:
		next_state = LEGUP_F_main_BB_upzeroexit29_126;
LEGUP_F_main_BB_upzeroexit29loopexit_124:
		next_state = LEGUP_F_main_BB_upzeroexit29_126;
LEGUP_F_main_BB_upzeroexit7_272:
		next_state = LEGUP_F_main_BB_upzeroexit7_273;
LEGUP_F_main_BB_upzeroexit7_273:
		next_state = LEGUP_F_main_BB_upzeroexit7_274;
LEGUP_F_main_BB_upzeroexit7_274:
		next_state = LEGUP_F_main_BB_upzeroexit7_275;
LEGUP_F_main_BB_upzeroexit7_275:
		next_state = LEGUP_F_main_BB_upzeroexit7_276;
LEGUP_F_main_BB_upzeroexit7_276:
	if ((main_upzeroexit7_427_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exit_278;
	else if ((main_upzeroexit7_427_reg == 1'd0))
		next_state = LEGUP_F_main_BB__428_277;
LEGUP_F_main_BB_upzeroexit7loopexit1_271:
		next_state = LEGUP_F_main_BB_upzeroexit7_272;
LEGUP_F_main_BB_upzeroexit7loopexit_270:
		next_state = LEGUP_F_main_BB_upzeroexit7_272;
LEGUP_F_main_BB_upzeroexit_84:
		next_state = LEGUP_F_main_BB_upzeroexit_85;
LEGUP_F_main_BB_upzeroexit_85:
		next_state = LEGUP_F_main_BB_upzeroexit_86;
LEGUP_F_main_BB_upzeroexit_86:
		next_state = LEGUP_F_main_BB_upzeroexit_87;
LEGUP_F_main_BB_upzeroexit_87:
		next_state = LEGUP_F_main_BB_upzeroexit_88;
LEGUP_F_main_BB_upzeroexit_88:
	if ((main_upzeroexit_142_reg == 1'd1))
		next_state = LEGUP_F_main_BB_uppol2exit34_90;
	else if ((main_upzeroexit_142_reg == 1'd0))
		next_state = LEGUP_F_main_BB__143_89;
LEGUP_F_main_BB_upzeroexitloopexit4_83:
		next_state = LEGUP_F_main_BB_upzeroexit_84;
LEGUP_F_main_BB_upzeroexitloopexit_82:
		next_state = LEGUP_F_main_BB_upzeroexit_84;
default:
	next_state = cur_state;
endcase

end
always @(*) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2 = 32'd0;
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__3_5) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_1_2 = main_3_4_reg;
	end
end
always @(posedge clk) begin
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if ((((cur_state == LEGUP_0) & (memory_controller_waitrequest == 1'd0)) & (start == 1'd1))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
	/* main: %1*/
	/*   %2 = phi i32 [ 0, %0 ], [ %4, %3 ]*/
	if (((cur_state == LEGUP_F_main_BB__3_5) & (memory_controller_waitrequest == 1'd0))) begin
		main_1_2_reg <= main_1_2;
		if (start == 1'b0 && ^(main_1_2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_1_2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %1*/
	/*   %exitcond86 = icmp eq i32 %2, 6*/
		main_1_exitcond86 = (main_1_2_reg == 32'd6);
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep90 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %2*/
		main_3_scevgep90 = (`TAG_g_delay_dltx_a + (4 * main_1_2_reg));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep89 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %2*/
		main_3_scevgep89 = (`TAG_g_delay_dhx_a + (4 * main_1_2_reg));
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep88 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %2*/
		main_3_scevgep88 = (`TAG_g_dec_del_dltx_a + (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep88 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_scevgep88_reg <= main_3_scevgep88;
		if (start == 1'b0 && ^(main_3_scevgep88) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep88_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %scevgep87 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %2*/
		main_3_scevgep87 = (`TAG_g_dec_del_dhx_a + (4 * main_1_2_reg));
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %scevgep87 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %2*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_scevgep87_reg <= main_3_scevgep87;
		if (start == 1'b0 && ^(main_3_scevgep87) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_scevgep87_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %3*/
	/*   %4 = add nsw i32 %2, 1*/
		main_3_4 = (main_1_2_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %3*/
	/*   %4 = add nsw i32 %2, 1*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		main_3_4_reg <= main_3_4;
		if (start == 1'b0 && ^(main_3_4) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_3_4_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader49.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader49preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader49_5 = 32'd0;
	end
	/* main: %.preheader49*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader49.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__6_10) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader49_5 = main_6_7_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader49*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader49.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader49preheader_2) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader49_5_reg <= main_preheader49_5;
		if (start == 1'b0 && ^(main_preheader49_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49_5_reg"); $finish; end
	end
	/* main: %.preheader49*/
	/*   %5 = phi i32 [ %7, %6 ], [ 0, %.preheader49.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__6_10) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader49_5_reg <= main_preheader49_5;
		if (start == 1'b0 && ^(main_preheader49_5) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader49_5_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader49*/
	/*   %exitcond81 = icmp eq i32 %5, 6*/
		main_preheader49_exitcond81 = (main_preheader49_5_reg == 32'd6);
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep85 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %5*/
		main_6_scevgep85 = (`TAG_g_delay_bpl_a + (4 * main_preheader49_5_reg));
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep84 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %5*/
		main_6_scevgep84 = (`TAG_g_delay_bph_a + (4 * main_preheader49_5_reg));
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep83 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %5*/
		main_6_scevgep83 = (`TAG_g_dec_del_bpl_a + (4 * main_preheader49_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep83 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		main_6_scevgep83_reg <= main_6_scevgep83;
		if (start == 1'b0 && ^(main_6_scevgep83) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep83_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %scevgep82 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %5*/
		main_6_scevgep82 = (`TAG_g_dec_del_bph_a + (4 * main_preheader49_5_reg));
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %scevgep82 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %5*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		main_6_scevgep82_reg <= main_6_scevgep82;
		if (start == 1'b0 && ^(main_6_scevgep82) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_scevgep82_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %6*/
	/*   %7 = add nsw i32 %5, 1*/
		main_6_7 = (main_preheader49_5_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %6*/
	/*   %7 = add nsw i32 %5, 1*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		main_6_7_reg <= main_6_7;
		if (start == 1'b0 && ^(main_6_7) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_6_7_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader48*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader48.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader48preheader_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader48_8 = 32'd0;
	end
	/* main: %.preheader48*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader48.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__9_14) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader48_8 = main_9_10_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader48*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader48.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader48preheader_7) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader48_8_reg <= main_preheader48_8;
		if (start == 1'b0 && ^(main_preheader48_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader48_8_reg"); $finish; end
	end
	/* main: %.preheader48*/
	/*   %8 = phi i32 [ %10, %9 ], [ 0, %.preheader48.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__9_14) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader48_8_reg <= main_preheader48_8;
		if (start == 1'b0 && ^(main_preheader48_8) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader48_8_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader48*/
	/*   %exitcond79 = icmp eq i32 %8, 24*/
		main_preheader48_exitcond79 = (main_preheader48_8_reg == 32'd24);
end
always @(*) begin
	/* main: %9*/
	/*   %scevgep80 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %8*/
		main_9_scevgep80 = (`TAG_g_tqmf_a + (4 * main_preheader48_8_reg));
end
always @(*) begin
	/* main: %9*/
	/*   %10 = add nsw i32 %8, 1*/
		main_9_10 = (main_preheader48_8_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %9*/
	/*   %10 = add nsw i32 %8, 1*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		main_9_10_reg <= main_9_10;
		if (start == 1'b0 && ^(main_9_10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_9_10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader47*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader47.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader47preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader47_11 = 32'd0;
	end
	/* main: %.preheader47*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader47.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__12_18) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader47_11 = main_12_13_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader47*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader47.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader47preheader_12) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader47_11_reg <= main_preheader47_11;
		if (start == 1'b0 && ^(main_preheader47_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader47_11_reg"); $finish; end
	end
	/* main: %.preheader47*/
	/*   %11 = phi i32 [ %13, %12 ], [ 0, %.preheader47.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__12_18) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader47_11_reg <= main_preheader47_11;
		if (start == 1'b0 && ^(main_preheader47_11) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader47_11_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader47*/
	/*   %exitcond76 = icmp eq i32 %11, 11*/
		main_preheader47_exitcond76 = (main_preheader47_11_reg == 32'd11);
end
always @(*) begin
	/* main: %12*/
	/*   %scevgep78 = getelementptr [11 x i32]* @accumc, i32 0, i32 %11*/
		main_12_scevgep78 = (`TAG_g_accumc_a + (4 * main_preheader47_11_reg));
end
always @(*) begin
	/* main: %12*/
	/*   %scevgep77 = getelementptr [11 x i32]* @accumd, i32 0, i32 %11*/
		main_12_scevgep77 = (`TAG_g_accumd_a + (4 * main_preheader47_11_reg));
end
always @(*) begin
	/* main: %12*/
	/*   %13 = add nsw i32 %11, 1*/
		main_12_13 = (main_preheader47_11_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %12*/
	/*   %13 = add nsw i32 %11, 1*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		main_12_13_reg <= main_12_13;
		if (start == 1'b0 && ^(main_12_13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_12_13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %indvar71 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next72, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar71 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %indvar71 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next72, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_indvar71 = main_uppol2exit23_indvarnext72_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %indvar71 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next72, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar71_reg <= main_resetexiti_indvar71;
		if (start == 1'b0 && ^(main_resetexiti_indvar71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar71_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %indvar71 = phi i32 [ 0, %reset.exit.i.preheader ], [ %indvar.next72, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_indvar71_reg <= main_resetexiti_indvar71;
		if (start == 1'b0 && ^(main_resetexiti_indvar71) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_indvar71_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %rlt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %164, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %rlt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %164, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_rlt10 = main_filtezexit8i26i_164_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %rlt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %164, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt10_reg <= main_resetexiti_rlt10;
		if (start == 1'b0 && ^(main_resetexiti_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rlt10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %rlt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %164, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt10_reg <= main_resetexiti_rlt10;
		if (start == 1'b0 && ^(main_resetexiti_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %al1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i11.i4.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %al1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i11.i4.i.2, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_al10 = main_filtezexit8i26i_apl1i11i4i2_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %al1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i11.i4.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al10_reg <= main_resetexiti_al10;
		if (start == 1'b0 && ^(main_resetexiti_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_al10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %al1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i11.i4.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al10_reg <= main_resetexiti_al10;
		if (start == 1'b0 && ^(main_resetexiti_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %rlt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rlt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %rlt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rlt1.0, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_rlt20 = main_resetexiti_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %rlt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rlt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt20_reg <= main_resetexiti_rlt20;
		if (start == 1'b0 && ^(main_resetexiti_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rlt20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %rlt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rlt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rlt20_reg <= main_resetexiti_rlt20;
		if (start == 1'b0 && ^(main_resetexiti_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %al2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %145, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %al2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %145, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_al20 = main_uppol2exit34_145_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %al2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %145, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al20_reg <= main_resetexiti_al20;
		if (start == 1'b0 && ^(main_resetexiti_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_al20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %al2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %145, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_al20_reg <= main_resetexiti_al20;
		if (start == 1'b0 && ^(main_resetexiti_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %detl.0 = phi i32 [ 32, %reset.exit.i.preheader ], [ %106, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_detl0 = 32'd32;
	end
	/* main: %reset.exit.i*/
	/*   %detl.0 = phi i32 [ 32, %reset.exit.i.preheader ], [ %106, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_detl0 = main_logsclexiti24i_106_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %detl.0 = phi i32 [ 32, %reset.exit.i.preheader ], [ %106, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_detl0_reg <= main_resetexiti_detl0;
		if (start == 1'b0 && ^(main_resetexiti_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_detl0_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %detl.0 = phi i32 [ 32, %reset.exit.i.preheader ], [ %106, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_detl0_reg <= main_resetexiti_detl0;
		if (start == 1'b0 && ^(main_resetexiti_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %il.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ril.i.i.i.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_il0 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %il.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ril.i.i.i.0, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_il0 = main_quantlexitii_riliii0_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %il.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ril.i.i.i.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_il0_reg <= main_resetexiti_il0;
		if (start == 1'b0 && ^(main_resetexiti_il0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_il0_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %il.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ril.i.i.i.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_il0_reg <= main_resetexiti_il0;
		if (start == 1'b0 && ^(main_resetexiti_il0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_il0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %nbl.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0470, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbl0 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %nbl.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0470, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_nbl0 = main_logsclexiti24i_0470_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %nbl.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0470, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbl0_reg <= main_resetexiti_nbl0;
		if (start == 1'b0 && ^(main_resetexiti_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_nbl0_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %nbl.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0470, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbl0_reg <= main_resetexiti_nbl0;
		if (start == 1'b0 && ^(main_resetexiti_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %plt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %107, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %plt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %107, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_plt10 = main_logsclexiti24i_107_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %plt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %107, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt10_reg <= main_resetexiti_plt10;
		if (start == 1'b0 && ^(main_resetexiti_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_plt10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %plt1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %107, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt10_reg <= main_resetexiti_plt10;
		if (start == 1'b0 && ^(main_resetexiti_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %plt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %plt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %plt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %plt1.0, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_plt20 = main_resetexiti_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %plt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %plt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt20_reg <= main_resetexiti_plt20;
		if (start == 1'b0 && ^(main_resetexiti_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_plt20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %plt2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %plt1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_plt20_reg <= main_resetexiti_plt20;
		if (start == 1'b0 && ^(main_resetexiti_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %rh1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %249, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %rh1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %249, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_rh10 = main_uppol2exit23_249_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %rh1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %249, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh10_reg <= main_resetexiti_rh10;
		if (start == 1'b0 && ^(main_resetexiti_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rh10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %rh1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %249, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh10_reg <= main_resetexiti_rh10;
		if (start == 1'b0 && ^(main_resetexiti_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %ah1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i.i18.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %ah1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i.i18.i.2, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_ah10 = main_uppol2exit23_apl1ii18i2_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %ah1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i.i18.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah10_reg <= main_resetexiti_ah10;
		if (start == 1'b0 && ^(main_resetexiti_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ah10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %ah1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %apl1.i.i18.i.2, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah10_reg <= main_resetexiti_ah10;
		if (start == 1'b0 && ^(main_resetexiti_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %rh2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rh1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %rh2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rh1.0, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_rh20 = main_resetexiti_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %rh2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rh1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh20_reg <= main_resetexiti_rh20;
		if (start == 1'b0 && ^(main_resetexiti_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rh20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %rh2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %rh1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_rh20_reg <= main_resetexiti_rh20;
		if (start == 1'b0 && ^(main_resetexiti_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %ah2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %239, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %ah2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %239, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_ah20 = main_uppol2exit23_239_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %ah2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %239, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah20_reg <= main_resetexiti_ah20;
		if (start == 1'b0 && ^(main_resetexiti_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ah20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %ah2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %239, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ah20_reg <= main_resetexiti_ah20;
		if (start == 1'b0 && ^(main_resetexiti_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %deth.0 = phi i32 [ 8, %reset.exit.i.preheader ], [ %200, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_deth0 = 32'd8;
	end
	/* main: %reset.exit.i*/
	/*   %deth.0 = phi i32 [ 8, %reset.exit.i.preheader ], [ %200, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_deth0 = main_logschexiti27i_200_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %deth.0 = phi i32 [ 8, %reset.exit.i.preheader ], [ %200, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_deth0_reg <= main_resetexiti_deth0;
		if (start == 1'b0 && ^(main_resetexiti_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_deth0_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %deth.0 = phi i32 [ 8, %reset.exit.i.preheader ], [ %200, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_deth0_reg <= main_resetexiti_deth0;
		if (start == 1'b0 && ^(main_resetexiti_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %nbh.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0469, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbh0 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %nbh.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0469, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_nbh0 = main_logschexiti27i_0469_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %nbh.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0469, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbh0_reg <= main_resetexiti_nbh0;
		if (start == 1'b0 && ^(main_resetexiti_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_nbh0_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %nbh.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %.0469, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_nbh0_reg <= main_resetexiti_nbh0;
		if (start == 1'b0 && ^(main_resetexiti_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %ph1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %201, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph10 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %ph1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %201, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_ph10 = main_logschexiti27i_201_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %ph1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %201, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph10_reg <= main_resetexiti_ph10;
		if (start == 1'b0 && ^(main_resetexiti_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ph10_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %ph1.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %201, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph10_reg <= main_resetexiti_ph10;
		if (start == 1'b0 && ^(main_resetexiti_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %ph2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ph1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph20 = 32'd0;
	end
	/* main: %reset.exit.i*/
	/*   %ph2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ph1.0, %uppol2.exit23 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_resetexiti_ph20 = main_resetexiti_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %ph2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ph1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_resetexitipreheader_16) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph20_reg <= main_resetexiti_ph20;
		if (start == 1'b0 && ^(main_resetexiti_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ph20_reg"); $finish; end
	end
	/* main: %reset.exit.i*/
	/*   %ph2.0 = phi i32 [ 0, %reset.exit.i.preheader ], [ %ph1.0, %uppol2.exit23 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit23_165) & (memory_controller_waitrequest == 1'd0))) begin
		main_resetexiti_ph20_reg <= main_resetexiti_ph20;
		if (start == 1'b0 && ^(main_resetexiti_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %i.i.0 = shl i32 %indvar71, 1*/
		main_resetexiti_ii0 = (main_resetexiti_indvar71_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %reset.exit.i*/
	/*   %i.i.0 = shl i32 %indvar71, 1*/
	if ((cur_state == LEGUP_F_main_BB_resetexiti_19)) begin
		main_resetexiti_ii0_reg <= main_resetexiti_ii0;
		if (start == 1'b0 && ^(main_resetexiti_ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_resetexiti_ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %reset.exit.i*/
	/*   %exitcond73 = icmp eq i32 %indvar71, 50*/
		main_resetexiti_exitcond73 = (main_resetexiti_indvar71_reg == 32'd50);
end
always @(*) begin
	/* main: %14*/
	/*   %scevgep75 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.i.0*/
		main_14_scevgep75 = (`TAG_g_test_data_a + (4 * main_resetexiti_ii0_reg));
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %scevgep75 = getelementptr [100 x i32]* @test_data, i32 0, i32 %i.i.0*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		main_14_scevgep75_reg <= main_14_scevgep75;
		if (start == 1'b0 && ^(main_14_scevgep75) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_scevgep75_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %15 = or i32 %i.i.0, 1*/
		main_14_15 = (main_resetexiti_ii0_reg | 32'd1);
end
always @(*) begin
	/* main: %14*/
	/*   %scevgep74 = getelementptr [100 x i32]* @test_data, i32 0, i32 %15*/
		main_14_scevgep74 = (`TAG_g_test_data_a + (4 * main_14_15));
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %scevgep74 = getelementptr [100 x i32]* @test_data, i32 0, i32 %15*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		main_14_scevgep74_reg <= main_14_scevgep74;
		if (start == 1'b0 && ^(main_14_scevgep74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_scevgep74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
		main_14_16 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		main_14_16_reg <= main_14_16;
		if (start == 1'b0 && ^(main_14_16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
		main_14_17 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_23)) begin
		main_14_17_reg <= main_14_17;
		if (start == 1'b0 && ^(main_14_17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_14_17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %14*/
	/*   %18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
		main_14_18 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_14_19 = main_14_19_stage0_reg;
end
always @(*) begin
	/* main: %14*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
		main_14_20 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_14_21 = main_14_21_stage0_reg;
end
always @(*) begin
	/* main: %22*/
	/*   %23 = phi i32 [ 0, %14 ], [ %36, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_23 = 32'd0;
	end
	/* main: %22*/
	/*   %23 = phi i32 [ 0, %14 ], [ %36, %27 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_22_23 = main_27_36_reg;
	end
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %23 = phi i32 [ 0, %14 ], [ %36, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
	/* main: %22*/
	/*   %23 = phi i32 [ 0, %14 ], [ %36, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_23_reg <= main_22_23;
		if (start == 1'b0 && ^(main_22_23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %xa.i.i.0 = phi i32 [ %19, %14 ], [ %31, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xaii0 = main_14_19;
	end
	/* main: %22*/
	/*   %xa.i.i.0 = phi i32 [ %19, %14 ], [ %31, %27 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_22_xaii0 = main_27_31_reg;
	end
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %xa.i.i.0 = phi i32 [ %19, %14 ], [ %31, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xaii0_reg <= main_22_xaii0;
		if (start == 1'b0 && ^(main_22_xaii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_xaii0_reg"); $finish; end
	end
	/* main: %22*/
	/*   %xa.i.i.0 = phi i32 [ %19, %14 ], [ %31, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xaii0_reg <= main_22_xaii0;
		if (start == 1'b0 && ^(main_22_xaii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_xaii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %xb.i.i.0 = phi i32 [ %21, %14 ], [ %35, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xbii0 = main_14_21;
	end
	/* main: %22*/
	/*   %xb.i.i.0 = phi i32 [ %21, %14 ], [ %35, %27 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_22_xbii0 = main_27_35;
	end
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %xb.i.i.0 = phi i32 [ %21, %14 ], [ %35, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__14_23) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xbii0_reg <= main_22_xbii0;
		if (start == 1'b0 && ^(main_22_xbii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_xbii0_reg"); $finish; end
	end
	/* main: %22*/
	/*   %xb.i.i.0 = phi i32 [ %21, %14 ], [ %35, %27 ]*/
	if (((cur_state == LEGUP_F_main_BB__27_29) & (memory_controller_waitrequest == 1'd0))) begin
		main_22_xbii0_reg <= main_22_xbii0;
		if (start == 1'b0 && ^(main_22_xbii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_xbii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %24 = shl i32 %23, 1*/
		main_22_24 = (main_22_23_reg <<< (32'd1 % 32));
end
always @(*) begin
	/* main: %22*/
	/*   %25 = add i32 %24, 2*/
		main_22_25 = (main_22_24 + 32'd2);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %25 = add i32 %24, 2*/
	if ((cur_state == LEGUP_F_main_BB__22_24)) begin
		main_22_25_reg <= main_22_25;
		if (start == 1'b0 && ^(main_22_25) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_25_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %26 = add i32 %24, 3*/
		main_22_26 = (main_22_24 + 32'd3);
end
always @(posedge clk) begin
	/* main: %22*/
	/*   %26 = add i32 %24, 3*/
	if ((cur_state == LEGUP_F_main_BB__22_24)) begin
		main_22_26_reg <= main_22_26;
		if (start == 1'b0 && ^(main_22_26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_22_26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %22*/
	/*   %exitcond42 = icmp eq i32 %23, 10*/
		main_22_exitcond42 = (main_22_23_reg == 32'd10);
end
always @(*) begin
	/* main: %27*/
	/*   %scevgep46 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
		main_27_scevgep46 = (`TAG_g_tqmf_a + (4 * main_22_26_reg));
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %scevgep46 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		main_27_scevgep46_reg <= main_27_scevgep46;
		if (start == 1'b0 && ^(main_27_scevgep46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_scevgep46_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %tqmf_ptr.i.i.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %25*/
		main_27_tqmf_ptrii0 = (`TAG_g_tqmf_a + (4 * main_22_25_reg));
end
always @(*) begin
	/* main: %27*/
	/*   %scevgep44 = getelementptr [24 x i32]* @h, i32 0, i32 %26*/
		main_27_scevgep44 = (`TAG_g_h_a + (4 * main_22_26_reg));
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %scevgep44 = getelementptr [24 x i32]* @h, i32 0, i32 %26*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		main_27_scevgep44_reg <= main_27_scevgep44;
		if (start == 1'b0 && ^(main_27_scevgep44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_scevgep44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %h_ptr.i22.i.0 = getelementptr [24 x i32]* @h, i32 0, i32 %25*/
		main_27_h_ptri22i0 = (`TAG_g_h_a + (4 * main_22_25_reg));
end
always @(*) begin
	/* main: %27*/
	/*   %28 = load i32* %tqmf_ptr.i.i.0, align 4*/
		main_27_28 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %29 = load i32* %h_ptr.i22.i.0, align 4*/
		main_27_29 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_27_30 = main_27_30_stage0_reg;
end
always @(*) begin
	/* main: %27*/
	/*   %31 = add nsw i32 %xa.i.i.0, %30*/
		main_27_31 = (main_22_xaii0_reg + main_27_30);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %31 = add nsw i32 %xa.i.i.0, %30*/
	if ((cur_state == LEGUP_F_main_BB__27_28)) begin
		main_27_31_reg <= main_27_31;
		if (start == 1'b0 && ^(main_27_31) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_31_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %27*/
	/*   %32 = load i32* %scevgep46, align 4*/
		main_27_32 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %27*/
	/*   %33 = load i32* %scevgep44, align 4*/
		main_27_33 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_27_34 = main_27_34_stage0_reg;
end
always @(*) begin
	/* main: %27*/
	/*   %35 = add nsw i32 %xb.i.i.0, %34*/
		main_27_35 = (main_22_xbii0_reg + main_27_34);
end
always @(*) begin
	/* main: %27*/
	/*   %36 = add nsw i32 %23, 1*/
		main_27_36 = (main_22_23_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %36 = add nsw i32 %23, 1*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		main_27_36_reg <= main_27_36;
		if (start == 1'b0 && ^(main_27_36) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_27_36_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
		main_37_38 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_32)) begin
		main_37_38_reg <= main_37_38;
		if (start == 1'b0 && ^(main_37_38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
		main_37_39 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_32)) begin
		main_37_39_reg <= main_37_39;
		if (start == 1'b0 && ^(main_37_39) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_37_39_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %37 ], [ %46, %42 ]*/
	if (((cur_state == LEGUP_F_main_BB__37_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41 = 32'd0;
	end
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %37 ], [ %46, %42 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__42_38) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_40_41 = main_42_46_reg;
	end
end
always @(posedge clk) begin
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %37 ], [ %46, %42 ]*/
	if (((cur_state == LEGUP_F_main_BB__37_32) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
	/* main: %40*/
	/*   %41 = phi i32 [ 0, %37 ], [ %46, %42 ]*/
	if (((cur_state == LEGUP_F_main_BB__42_38) & (memory_controller_waitrequest == 1'd0))) begin
		main_40_41_reg <= main_40_41;
		if (start == 1'b0 && ^(main_40_41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_40_41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %40*/
	/*   %exitcond47 = icmp eq i32 %41, 22*/
		main_40_exitcond47 = (main_40_41_reg == 32'd22);
end
always @(*) begin
	/* main: %42*/
	/*   %43 = sub i32 21, %41*/
		main_42_43 = (32'd21 - main_40_41_reg);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %43 = sub i32 21, %41*/
	if ((cur_state == LEGUP_F_main_BB__42_34)) begin
		main_42_43_reg <= main_42_43;
		if (start == 1'b0 && ^(main_42_43) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_43_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %tqmf_ptr1.i.i.0 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %43*/
		main_42_tqmf_ptr1ii0 = (`TAG_g_tqmf_a + (4 * main_42_43_reg));
end
always @(*) begin
	/* main: %42*/
	/*   %44 = sub i32 23, %41*/
		main_42_44 = (32'd23 - main_40_41_reg);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %44 = sub i32 23, %41*/
	if ((cur_state == LEGUP_F_main_BB__42_34)) begin
		main_42_44_reg <= main_42_44;
		if (start == 1'b0 && ^(main_42_44) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_44_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %tqmf_ptr.i.i.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %44*/
		main_42_tqmf_ptrii1 = (`TAG_g_tqmf_a + (4 * main_42_44_reg));
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %tqmf_ptr.i.i.1 = getelementptr [24 x i32]* @tqmf, i32 0, i32 %44*/
	if ((cur_state == LEGUP_F_main_BB__42_35)) begin
		main_42_tqmf_ptrii1_reg <= main_42_tqmf_ptrii1;
		if (start == 1'b0 && ^(main_42_tqmf_ptrii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_tqmf_ptrii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %42*/
	/*   %45 = load i32* %tqmf_ptr1.i.i.0, align 4*/
		main_42_45 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %42*/
	/*   %46 = add nsw i32 %41, 1*/
		main_42_46 = (main_40_41_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %42*/
	/*   %46 = add nsw i32 %41, 1*/
	if ((cur_state == LEGUP_F_main_BB__42_34)) begin
		main_42_46_reg <= main_42_46;
		if (start == 1'b0 && ^(main_42_46) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_42_46_reg"); $finish; end
	end
end
always @(*) begin
	main_47_48 = main_47_48_stage0_reg;
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = mul nsw i32 %38, -44*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
	/* main: %47*/
	/*   %48 = mul nsw i32 %38, -44*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		main_47_48_reg <= main_47_48;
		if (start == 1'b0 && ^(main_47_48) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_48_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %47*/
	/*   %49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
		main_47_49 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
		main_47_50 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_42)) begin
		main_47_50_reg <= main_47_50;
		if (start == 1'b0 && ^(main_47_50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_47_50_reg"); $finish; end
	end
end
always @(*) begin
	main_47_51 = main_47_51_stage0_reg;
end
always @(*) begin
	/* main: %52*/
	/*   %indvar50 = phi i32 [ %indvar.next51, %53 ], [ 0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_indvar50 = 32'd0;
	end
	/* main: %52*/
	/*   %indvar50 = phi i32 [ %indvar.next51, %53 ], [ 0, %47 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__53_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_52_indvar50 = main_53_indvarnext51_reg;
	end
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %indvar50 = phi i32 [ %indvar.next51, %53 ], [ 0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_indvar50_reg <= main_52_indvar50;
		if (start == 1'b0 && ^(main_52_indvar50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_indvar50_reg"); $finish; end
	end
	/* main: %52*/
	/*   %indvar50 = phi i32 [ %indvar.next51, %53 ], [ 0, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__53_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_indvar50_reg <= main_52_indvar50;
		if (start == 1'b0 && ^(main_52_indvar50) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_indvar50_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %zl.i.i20.i.0 = phi i32 [ %57, %53 ], [ %51, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_zlii20i0 = main_47_51;
	end
	/* main: %52*/
	/*   %zl.i.i20.i.0 = phi i32 [ %57, %53 ], [ %51, %47 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__53_48) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_52_zlii20i0 = main_53_57;
	end
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %zl.i.i20.i.0 = phi i32 [ %57, %53 ], [ %51, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__47_43) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_zlii20i0_reg <= main_52_zlii20i0;
		if (start == 1'b0 && ^(main_52_zlii20i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_zlii20i0_reg"); $finish; end
	end
	/* main: %52*/
	/*   %zl.i.i20.i.0 = phi i32 [ %57, %53 ], [ %51, %47 ]*/
	if (((cur_state == LEGUP_F_main_BB__53_48) & (memory_controller_waitrequest == 1'd0))) begin
		main_52_zlii20i0_reg <= main_52_zlii20i0;
		if (start == 1'b0 && ^(main_52_zlii20i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_zlii20i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %i.i.i19.i.0 = add i32 %indvar50, 1*/
		main_52_iii19i0 = (main_52_indvar50_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %52*/
	/*   %i.i.i19.i.0 = add i32 %indvar50, 1*/
	if ((cur_state == LEGUP_F_main_BB__52_44)) begin
		main_52_iii19i0_reg <= main_52_iii19i0;
		if (start == 1'b0 && ^(main_52_iii19i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_52_iii19i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %52*/
	/*   %exitcond52 = icmp eq i32 %indvar50, 5*/
		main_52_exitcond52 = (main_52_indvar50_reg == 32'd5);
end
always @(*) begin
	/* main: %53*/
	/*   %.0467 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %i.i.i19.i.0*/
		main_53_0467 = (`TAG_g_delay_dltx_a + (4 * main_52_iii19i0_reg));
end
always @(*) begin
	/* main: %53*/
	/*   %.0468 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %i.i.i19.i.0*/
		main_53_0468 = (`TAG_g_delay_bpl_a + (4 * main_52_iii19i0_reg));
end
always @(*) begin
	/* main: %53*/
	/*   %54 = load i32* %.0468, align 4*/
		main_53_54 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %53*/
	/*   %55 = load i32* %.0467, align 4*/
		main_53_55 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_53_56 = main_53_56_stage0_reg;
end
always @(*) begin
	/* main: %53*/
	/*   %57 = add nsw i32 %zl.i.i20.i.0, %56*/
		main_53_57 = (main_52_zlii20i0_reg + main_53_56);
end
always @(*) begin
	/* main: %53*/
	/*   %indvar.next51 = add i32 %indvar50, 1*/
		main_53_indvarnext51 = (main_52_indvar50_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %indvar.next51 = add i32 %indvar50, 1*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		main_53_indvarnext51_reg <= main_53_indvarnext51;
		if (start == 1'b0 && ^(main_53_indvarnext51) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_53_indvarnext51_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %58 = add nsw i32 %xa.i.i.0, %48*/
		main_filtezexiti23i_58 = (main_22_xaii0_reg + main_47_48_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %58 = add nsw i32 %xa.i.i.0, %48*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_49)) begin
		main_filtezexiti23i_58_reg <= main_filtezexiti23i_58;
		if (start == 1'b0 && ^(main_filtezexiti23i_58) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i_58_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexiti23i_59 = main_filtezexiti23i_59_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %60 = add nsw i32 %xb.i.i.0, %59*/
		main_filtezexiti23i_60 = (main_22_xbii0_reg + main_filtezexiti23i_59);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %61 = add nsw i32 %58, %60*/
		main_filtezexiti23i_61 = (main_filtezexiti23i_58_reg + main_filtezexiti23i_60);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %62 = sub nsw i32 %58, %60*/
		main_filtezexiti23i_62 = (main_filtezexiti23i_58_reg - main_filtezexiti23i_60);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %63 = ashr i32 %61, 15*/
		main_filtezexiti23i_63 = ($signed(main_filtezexiti23i_61) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %64 = ashr i32 %62, 15*/
		main_filtezexiti23i_64 = ($signed(main_filtezexiti23i_62) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %64 = ashr i32 %62, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_50)) begin
		main_filtezexiti23i_64_reg <= main_filtezexiti23i_64;
		if (start == 1'b0 && ^(main_filtezexiti23i_64) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i_64_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %65 = ashr i32 %zl.i.i20.i.0, 14*/
		main_filtezexiti23i_65 = ($signed(main_52_zlii20i0_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %65 = ashr i32 %zl.i.i20.i.0, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_49)) begin
		main_filtezexiti23i_65_reg <= main_filtezexiti23i_65;
		if (start == 1'b0 && ^(main_filtezexiti23i_65) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i_65_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %66 = shl nsw i32 %rlt1.0, 1*/
		main_filtezexiti23i_66 = (main_resetexiti_rlt10_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexiti23i_67 = main_filtezexiti23i_67_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %68 = shl nsw i32 %rlt2.0, 1*/
		main_filtezexiti23i_68 = (main_resetexiti_rlt20_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexiti23i_69 = main_filtezexiti23i_69_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %70 = add nsw i32 %67, %69*/
		main_filtezexiti23i_70 = (main_filtezexiti23i_67 + main_filtezexiti23i_69);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %71 = ashr i32 %70, 15*/
		main_filtezexiti23i_71 = ($signed(main_filtezexiti23i_70) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %72 = add nsw i32 %65, %71*/
		main_filtezexiti23i_72 = (main_filtezexiti23i_65_reg + main_filtezexiti23i_71);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %72 = add nsw i32 %65, %71*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_50)) begin
		main_filtezexiti23i_72_reg <= main_filtezexiti23i_72;
		if (start == 1'b0 && ^(main_filtezexiti23i_72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i_72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %73 = sub nsw i32 %63, %72*/
		main_filtezexiti23i_73 = (main_filtezexiti23i_63 - main_filtezexiti23i_72);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %74 = icmp sgt i32 %73, -1*/
		main_filtezexiti23i_74 = ($signed(main_filtezexiti23i_73) > $signed(-32'd1));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %74 = icmp sgt i32 %73, -1*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_50)) begin
		main_filtezexiti23i_74_reg <= main_filtezexiti23i_74;
		if (start == 1'b0 && ^(main_filtezexiti23i_74) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i_74_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %75 = sub nsw i32 0, %73*/
		main_filtezexiti23i_75 = (32'd0 - main_filtezexiti23i_73);
end
always @(*) begin
	/* main: %filtez.exit.i23.i*/
	/*   %. = select i1 %74, i32 %73, i32 %75*/
		main_filtezexiti23i_ = (main_filtezexiti23i_74 ? main_filtezexiti23i_73 : main_filtezexiti23i_75);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %. = select i1 %74, i32 %73, i32 %75*/
	if ((cur_state == LEGUP_F_main_BB_filtezexiti23i_50)) begin
		main_filtezexiti23i__reg <= main_filtezexiti23i_;
		if (start == 1'b0 && ^(main_filtezexiti23i_) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexiti23i__reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %77 = phi i32 [ 0, %filtez.exit.i23.i ], [ %85, %84 ]*/
	if (((cur_state == LEGUP_F_main_BB_filtezexiti23i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_76_77 = 32'd0;
	end
	/* main: %76*/
	/*   %77 = phi i32 [ 0, %filtez.exit.i23.i ], [ %85, %84 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__84_56) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_76_77 = main_84_85;
	end
end
always @(posedge clk) begin
	/* main: %76*/
	/*   %77 = phi i32 [ 0, %filtez.exit.i23.i ], [ %85, %84 ]*/
	if (((cur_state == LEGUP_F_main_BB_filtezexiti23i_50) & (memory_controller_waitrequest == 1'd0))) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
	/* main: %76*/
	/*   %77 = phi i32 [ 0, %filtez.exit.i23.i ], [ %85, %84 ]*/
	if (((cur_state == LEGUP_F_main_BB__84_56) & (memory_controller_waitrequest == 1'd0))) begin
		main_76_77_reg <= main_76_77;
		if (start == 1'b0 && ^(main_76_77) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_76_77_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %76*/
	/*   %78 = icmp slt i32 %77, 30*/
		main_76_78 = ($signed(main_76_77_reg) < $signed(32'd30));
end
always @(*) begin
	/* main: %79*/
	/*   %scevgep55 = getelementptr [30 x i32]* @decis_levl, i32 0, i32 %77*/
		main_79_scevgep55 = (`TAG_g_decis_levl_a + (4 * main_76_77_reg));
end
always @(*) begin
	/* main: %79*/
	/*   %80 = load i32* %scevgep55, align 4*/
		main_79_80 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_79_81 = main_79_81_stage0_reg;
end
always @(*) begin
	/* main: %79*/
	/*   %82 = ashr i32 %81, 15*/
		main_79_82 = ($signed(main_79_81) >>> 32'd15);
end
always @(*) begin
	/* main: %79*/
	/*   %83 = icmp sgt i32 %., %82*/
		main_79_83 = ($signed(main_filtezexiti23i__reg) > $signed(main_79_82));
end
always @(*) begin
	/* main: %84*/
	/*   %85 = add nsw i32 %77, 1*/
		main_84_85 = (main_76_77_reg + 32'd1);
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %quant26bt_pos.quant26bt_neg = select i1 %74, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
		main_quantlexitii_quant26bt_posquant26bt_neg = (main_filtezexiti23i_74_reg ? `TAG_g_quant26bt_pos_a : `TAG_g_quant26bt_neg_a);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %quant26bt_pos.quant26bt_neg = select i1 %74, [31 x i32]* @quant26bt_pos, [31 x i32]* @quant26bt_neg*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_57)) begin
		main_quantlexitii_quant26bt_posquant26bt_neg_reg <= main_quantlexitii_quant26bt_posquant26bt_neg;
		if (start == 1'b0 && ^(main_quantlexitii_quant26bt_posquant26bt_neg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_quant26bt_posquant26bt_neg_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0.in = getelementptr inbounds [31 x i32]* %quant26bt_pos.quant26bt_neg, i32 0, i32 %77*/
		main_quantlexitii_riliii0in = (main_quantlexitii_quant26bt_posquant26bt_neg_reg + (4 * main_76_77_reg));
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
		main_quantlexitii_riliii0 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		main_quantlexitii_riliii0_reg <= main_quantlexitii_riliii0;
		if (start == 1'b0 && ^(main_quantlexitii_riliii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_riliii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %86 = ashr i32 %ril.i.i.i.0, 2*/
		main_quantlexitii_86 = ($signed(main_quantlexitii_riliii0) >>> 32'd2);
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %87 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %86*/
		main_quantlexitii_87 = (`TAG_g_qq4_code4_table_a + (4 * main_quantlexitii_86));
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %88 = load i32* %87, align 4*/
		main_quantlexitii_88 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_quantlexitii_89 = main_quantlexitii_89_stage0_reg;
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %90 = ashr i32 %89, 15*/
		main_quantlexitii_90 = ($signed(main_quantlexitii_89) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %90 = ashr i32 %89, 15*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_63)) begin
		main_quantlexitii_90_reg <= main_quantlexitii_90;
		if (start == 1'b0 && ^(main_quantlexitii_90) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_90_reg"); $finish; end
	end
end
always @(*) begin
	main_quantlexitii_91 = main_quantlexitii_91_stage0_reg;
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %92 = ashr i32 %91, 7*/
		main_quantlexitii_92 = ($signed(main_quantlexitii_91) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %92 = ashr i32 %91, 7*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_58)) begin
		main_quantlexitii_92_reg <= main_quantlexitii_92;
		if (start == 1'b0 && ^(main_quantlexitii_92) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_92_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %93 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %86*/
		main_quantlexitii_93 = (`TAG_g_wl_code_table_a + (4 * main_quantlexitii_86));
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %94 = load i32* %93, align 4*/
		main_quantlexitii_94 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %95 = add nsw i32 %92, %94*/
		main_quantlexitii_95 = (main_quantlexitii_92_reg + main_quantlexitii_94);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %95 = add nsw i32 %92, %94*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_62)) begin
		main_quantlexitii_95_reg <= main_quantlexitii_95;
		if (start == 1'b0 && ^(main_quantlexitii_95) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_95_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %quantl.exit.i.i*/
	/*   %96 = icmp slt i32 %95, 0*/
		main_quantlexitii_96 = ($signed(main_quantlexitii_95) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %96 = icmp slt i32 %95, 0*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_62)) begin
		main_quantlexitii_96_reg <= main_quantlexitii_96;
		if (start == 1'b0 && ^(main_quantlexitii_96) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_quantlexitii_96_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %97*/
	/*   %98 = icmp sgt i32 %95, 18432*/
		main_97_98 = ($signed(main_quantlexitii_95_reg) > $signed(32'd18432));
end
always @(*) begin
	/* main: %97*/
	/*   %.488 = select i1 %98, i32 18432, i32 %95*/
		main_97_488 = (main_97_98 ? 32'd18432 : main_quantlexitii_95_reg);
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %.0470 = phi i32 [ 0, %quantl.exit.i.i ], [ %.488, %97 ]*/
	if ((((cur_state == LEGUP_F_main_BB_quantlexitii_63) & (memory_controller_waitrequest == 1'd0)) & (main_quantlexitii_96_reg == 1'd1))) begin
		main_logsclexiti24i_0470 = 32'd0;
	end
	/* main: %logscl.exit.i24.i*/
	/*   %.0470 = phi i32 [ 0, %quantl.exit.i.i ], [ %.488, %97 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__97_64) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logsclexiti24i_0470 = main_97_488;
	end
end
always @(posedge clk) begin
	/* main: %logscl.exit.i24.i*/
	/*   %.0470 = phi i32 [ 0, %quantl.exit.i.i ], [ %.488, %97 ]*/
	if ((((cur_state == LEGUP_F_main_BB_quantlexitii_63) & (memory_controller_waitrequest == 1'd0)) & (main_quantlexitii_96_reg == 1'd1))) begin
		main_logsclexiti24i_0470_reg <= main_logsclexiti24i_0470;
		if (start == 1'b0 && ^(main_logsclexiti24i_0470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_0470_reg"); $finish; end
	end
	/* main: %logscl.exit.i24.i*/
	/*   %.0470 = phi i32 [ 0, %quantl.exit.i.i ], [ %.488, %97 ]*/
	if (((cur_state == LEGUP_F_main_BB__97_64) & (memory_controller_waitrequest == 1'd0))) begin
		main_logsclexiti24i_0470_reg <= main_logsclexiti24i_0470;
		if (start == 1'b0 && ^(main_logsclexiti24i_0470) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_0470_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %99 = lshr i32 %.0470, 6*/
		main_logsclexiti24i_99 = (main_logsclexiti24i_0470_reg >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %100 = and i32 %99, 31*/
		main_logsclexiti24i_100 = (main_logsclexiti24i_99 & 32'd31);
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %101 = ashr i32 %.0470, 11*/
		main_logsclexiti24i_101 = ($signed(main_logsclexiti24i_0470_reg) >>> 32'd11);
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %102 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %100*/
		main_logsclexiti24i_102 = (`TAG_g_ilb_table_a + (4 * main_logsclexiti24i_100));
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %103 = load i32* %102, align 4*/
		main_logsclexiti24i_103 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %104 = sub nsw i32 9, %101*/
		main_logsclexiti24i_104 = (32'd9 - main_logsclexiti24i_101);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i24.i*/
	/*   %104 = sub nsw i32 9, %101*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		main_logsclexiti24i_104_reg <= main_logsclexiti24i_104;
		if (start == 1'b0 && ^(main_logsclexiti24i_104) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_104_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %105 = ashr i32 %103, %104*/
		main_logsclexiti24i_105 = ($signed(main_logsclexiti24i_103) >>> main_logsclexiti24i_104_reg);
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %106 = shl i32 %105, 3*/
		main_logsclexiti24i_106 = (main_logsclexiti24i_105 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logscl.exit.i24.i*/
	/*   %106 = shl i32 %105, 3*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_67)) begin
		main_logsclexiti24i_106_reg <= main_logsclexiti24i_106;
		if (start == 1'b0 && ^(main_logsclexiti24i_106) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_106_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %107 = add nsw i32 %90, %65*/
		main_logsclexiti24i_107 = (main_quantlexitii_90_reg + main_filtezexiti23i_65_reg);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i24.i*/
	/*   %107 = add nsw i32 %90, %65*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		main_logsclexiti24i_107_reg <= main_logsclexiti24i_107;
		if (start == 1'b0 && ^(main_logsclexiti24i_107) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_107_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i24.i*/
	/*   %108 = icmp eq i32 %90, 0*/
		main_logsclexiti24i_108 = (main_quantlexitii_90_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i24.i*/
	/*   %108 = icmp eq i32 %90, 0*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		main_logsclexiti24i_108_reg <= main_logsclexiti24i_108;
		if (start == 1'b0 && ^(main_logsclexiti24i_108) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexiti24i_108_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader44*/
	/*   %109 = phi i32 [ %114, %110 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader44preheader_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_109 = 32'd0;
	end
	/* main: %.preheader44*/
	/*   %109 = phi i32 [ %114, %110 ], [ 0, %.preheader44.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__110_75) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader44_109 = main_110_114_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader44*/
	/*   %109 = phi i32 [ %114, %110 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader44preheader_69) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_109_reg <= main_preheader44_109;
		if (start == 1'b0 && ^(main_preheader44_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_109_reg"); $finish; end
	end
	/* main: %.preheader44*/
	/*   %109 = phi i32 [ %114, %110 ], [ 0, %.preheader44.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__110_75) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader44_109_reg <= main_preheader44_109;
		if (start == 1'b0 && ^(main_preheader44_109) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_109_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader44*/
	/*   %scevgep60 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %109*/
		main_preheader44_scevgep60 = (`TAG_g_delay_bpl_a + (4 * main_preheader44_109_reg));
end
always @(posedge clk) begin
	/* main: %.preheader44*/
	/*   %scevgep60 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %109*/
	if ((cur_state == LEGUP_F_main_BB_preheader44_70)) begin
		main_preheader44_scevgep60_reg <= main_preheader44_scevgep60;
		if (start == 1'b0 && ^(main_preheader44_scevgep60) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader44_scevgep60_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader44*/
	/*   %exitcond59 = icmp eq i32 %109, 6*/
		main_preheader44_exitcond59 = (main_preheader44_109_reg == 32'd6);
end
always @(*) begin
	/* main: %110*/
	/*   %111 = load i32* %scevgep60, align 4*/
		main_110_111 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_110_112 = main_110_112_stage0_reg;
end
always @(*) begin
	/* main: %110*/
	/*   %113 = ashr i32 %112, 8*/
		main_110_113 = ($signed(main_110_112) >>> 32'd8);
end
always @(*) begin
	/* main: %110*/
	/*   %114 = add nsw i32 %109, 1*/
		main_110_114 = (main_preheader44_109_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %114 = add nsw i32 %109, 1*/
	if ((cur_state == LEGUP_F_main_BB__110_71)) begin
		main_110_114_reg <= main_110_114;
		if (start == 1'b0 && ^(main_110_114) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_110_114_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader45*/
	/*   %115 = phi i32 [ %126, %116 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader45preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_115 = 32'd0;
	end
	/* main: %.preheader45*/
	/*   %115 = phi i32 [ %126, %116 ], [ 0, %.preheader45.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__116_81) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader45_115 = main_116_126_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader45*/
	/*   %115 = phi i32 [ %126, %116 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader45preheader_68) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_115_reg <= main_preheader45_115;
		if (start == 1'b0 && ^(main_preheader45_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_115_reg"); $finish; end
	end
	/* main: %.preheader45*/
	/*   %115 = phi i32 [ %126, %116 ], [ 0, %.preheader45.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__116_81) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader45_115_reg <= main_preheader45_115;
		if (start == 1'b0 && ^(main_preheader45_115) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_115_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader45*/
	/*   %scevgep57 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %115*/
		main_preheader45_scevgep57 = (`TAG_g_delay_bpl_a + (4 * main_preheader45_115_reg));
end
always @(posedge clk) begin
	/* main: %.preheader45*/
	/*   %scevgep57 = getelementptr [6 x i32]* @delay_bpl, i32 0, i32 %115*/
	if ((cur_state == LEGUP_F_main_BB_preheader45_76)) begin
		main_preheader45_scevgep57_reg <= main_preheader45_scevgep57;
		if (start == 1'b0 && ^(main_preheader45_scevgep57) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader45_scevgep57_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader45*/
	/*   %exitcond56 = icmp eq i32 %115, 6*/
		main_preheader45_exitcond56 = (main_preheader45_115_reg == 32'd6);
end
always @(*) begin
	/* main: %116*/
	/*   %scevgep58 = getelementptr [6 x i32]* @delay_dltx, i32 0, i32 %115*/
		main_116_scevgep58 = (`TAG_g_delay_dltx_a + (4 * main_preheader45_115_reg));
end
always @(*) begin
	/* main: %116*/
	/*   %117 = load i32* %scevgep58, align 4*/
		main_116_117 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_116_118 = main_116_118_stage0_reg;
end
always @(*) begin
	/* main: %116*/
	/*   %119 = ashr i32 %118, 31*/
		main_116_119 = ($signed(main_116_118) >>> 32'd31);
end
always @(*) begin
	/* main: %116*/
	/*   %120 = and i32 %119, -256*/
		main_116_120 = (main_116_119 & -32'd256);
end
always @(*) begin
	/* main: %116*/
	/*   %121 = or i32 %120, 128*/
		main_116_121 = (main_116_120 | 32'd128);
end
always @(*) begin
	/* main: %116*/
	/*   %122 = load i32* %scevgep57, align 4*/
		main_116_122 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_116_123 = main_116_123_stage0_reg;
end
always @(*) begin
	/* main: %116*/
	/*   %124 = ashr i32 %123, 8*/
		main_116_124 = ($signed(main_116_123) >>> 32'd8);
end
always @(*) begin
	/* main: %116*/
	/*   %125 = add nsw i32 %121, %124*/
		main_116_125 = (main_116_121 + main_116_124);
end
always @(*) begin
	/* main: %116*/
	/*   %126 = add nsw i32 %115, 1*/
		main_116_126 = (main_preheader45_115_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %126 = add nsw i32 %115, 1*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		main_116_126_reg <= main_116_126;
		if (start == 1'b0 && ^(main_116_126) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_116_126_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %127 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
		main_upzeroexit_127 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
		main_upzeroexit_128 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		main_upzeroexit_128_reg <= main_upzeroexit_128;
		if (start == 1'b0 && ^(main_upzeroexit_128) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_128_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %129 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
		main_upzeroexit_129 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %130 = shl nsw i32 %al1.0, 2*/
		main_upzeroexit_130 = (main_resetexiti_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %130 = shl nsw i32 %al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		main_upzeroexit_130_reg <= main_upzeroexit_130;
		if (start == 1'b0 && ^(main_upzeroexit_130) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_130_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit_131 = main_upzeroexit_131_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %131 = mul nsw i32 %107, %plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		main_upzeroexit_131_reg <= main_upzeroexit_131;
		if (start == 1'b0 && ^(main_upzeroexit_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_131_reg"); $finish; end
	end
	/* main: %upzero.exit*/
	/*   %131 = mul nsw i32 %107, %plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		main_upzeroexit_131_reg <= main_upzeroexit_131;
		if (start == 1'b0 && ^(main_upzeroexit_131) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_131_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %132 = icmp sgt i32 %131, -1*/
		main_upzeroexit_132 = ($signed(main_upzeroexit_131) > $signed(-32'd1));
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %133 = sub nsw i32 0, %130*/
		main_upzeroexit_133 = (32'd0 - main_upzeroexit_130);
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %133 = sub nsw i32 0, %130*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		main_upzeroexit_133_reg <= main_upzeroexit_133;
		if (start == 1'b0 && ^(main_upzeroexit_133) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_133_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %..i30 = select i1 %132, i32 %133, i32 %130*/
		main_upzeroexit_i30 = (main_upzeroexit_132 ? main_upzeroexit_133_reg : main_upzeroexit_130_reg);
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %134 = ashr i32 %..i30, 7*/
		main_upzeroexit_134 = ($signed(main_upzeroexit_i30) >>> 32'd7);
end
always @(*) begin
	main_upzeroexit_135 = main_upzeroexit_135_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %136 = ashr i32 %135, 31*/
		main_upzeroexit_136 = ($signed(main_upzeroexit_135) >>> 32'd31);
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %137 = and i32 %136, -256*/
		main_upzeroexit_137 = (main_upzeroexit_136 & -32'd256);
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %138 = or i32 %137, 128*/
		main_upzeroexit_138 = (main_upzeroexit_137 | 32'd128);
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %wd4.0.i31 = add nsw i32 %134, %138*/
		main_upzeroexit_wd40i31 = (main_upzeroexit_134 + main_upzeroexit_138);
end
always @(*) begin
	main_upzeroexit_139 = main_upzeroexit_139_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %140 = ashr i32 %139, 7*/
		main_upzeroexit_140 = ($signed(main_upzeroexit_139) >>> 32'd7);
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %141 = add nsw i32 %wd4.0.i31, %140*/
		main_upzeroexit_141 = (main_upzeroexit_wd40i31 + main_upzeroexit_140);
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %141 = add nsw i32 %wd4.0.i31, %140*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		main_upzeroexit_141_reg <= main_upzeroexit_141;
		if (start == 1'b0 && ^(main_upzeroexit_141) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_141_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit*/
	/*   %142 = icmp sgt i32 %141, 12288*/
		main_upzeroexit_142 = ($signed(main_upzeroexit_141) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %142 = icmp sgt i32 %141, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		main_upzeroexit_142_reg <= main_upzeroexit_142;
		if (start == 1'b0 && ^(main_upzeroexit_142) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit_142_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %143*/
	/*   %144 = icmp slt i32 %141, -12288*/
		main_143_144 = ($signed(main_upzeroexit_141_reg) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %143*/
	/*   %.9.i32 = select i1 %144, i32 -12288, i32 %141*/
		main_143_9i32 = (main_143_144 ? -32'd12288 : main_upzeroexit_141_reg);
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %145 = phi i32 [ %.9.i32, %143 ], [ 12288, %upzero.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit_88) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit_142_reg == 1'd1))) begin
		main_uppol2exit34_145 = 32'd12288;
	end
	/* main: %uppol2.exit34*/
	/*   %145 = phi i32 [ %.9.i32, %143 ], [ 12288, %upzero.exit ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__143_89) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exit34_145 = main_143_9i32;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %145 = phi i32 [ %.9.i32, %143 ], [ 12288, %upzero.exit ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit_88) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit_142_reg == 1'd1))) begin
		main_uppol2exit34_145_reg <= main_uppol2exit34_145;
		if (start == 1'b0 && ^(main_uppol2exit34_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_145_reg"); $finish; end
	end
	/* main: %uppol2.exit34*/
	/*   %145 = phi i32 [ %.9.i32, %143 ], [ 12288, %upzero.exit ]*/
	if (((cur_state == LEGUP_F_main_BB__143_89) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exit34_145_reg <= main_uppol2exit34_145;
		if (start == 1'b0 && ^(main_uppol2exit34_145) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_145_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit34_146 = main_uppol2exit34_146_stage0_reg;
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %147 = ashr i32 %146, 8*/
		main_uppol2exit34_147 = ($signed(main_uppol2exit34_146) >>> 32'd8);
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %148 = ashr i32 %131, 31*/
		main_uppol2exit34_148 = ($signed(main_upzeroexit_131_reg) >>> 32'd31);
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %149 = and i32 %148, -384*/
		main_uppol2exit34_149 = (main_uppol2exit34_148 & -32'd384);
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %150 = add nsw i32 %149, 192*/
		main_uppol2exit34_150 = (main_uppol2exit34_149 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %150 = add nsw i32 %149, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		main_uppol2exit34_150_reg <= main_uppol2exit34_150;
		if (start == 1'b0 && ^(main_uppol2exit34_150) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_150_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %apl1.i11.i4.i.0 = add nsw i32 %147, %150*/
		main_uppol2exit34_apl1i11i4i0 = (main_uppol2exit34_147 + main_uppol2exit34_150_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %apl1.i11.i4.i.0 = add nsw i32 %147, %150*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_91)) begin
		main_uppol2exit34_apl1i11i4i0_reg <= main_uppol2exit34_apl1i11i4i0;
		if (start == 1'b0 && ^(main_uppol2exit34_apl1i11i4i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_apl1i11i4i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %151 = sub nsw i32 15360, %145*/
		main_uppol2exit34_151 = (32'd15360 - main_uppol2exit34_145_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %151 = sub nsw i32 15360, %145*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		main_uppol2exit34_151_reg <= main_uppol2exit34_151;
		if (start == 1'b0 && ^(main_uppol2exit34_151) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_151_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %152 = icmp sgt i32 %apl1.i11.i4.i.0, %151*/
		main_uppol2exit34_152 = ($signed(main_uppol2exit34_apl1i11i4i0) > $signed(main_uppol2exit34_151_reg));
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %152 = icmp sgt i32 %apl1.i11.i4.i.0, %151*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_91)) begin
		main_uppol2exit34_152_reg <= main_uppol2exit34_152;
		if (start == 1'b0 && ^(main_uppol2exit34_152) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_152_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
		main_uppol2exit34_153 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
		main_uppol2exit34_154 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_92)) begin
		main_uppol2exit34_154_reg <= main_uppol2exit34_154;
		if (start == 1'b0 && ^(main_uppol2exit34_154) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit34_154_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit34_155 = main_uppol2exit34_155_stage0_reg;
end
always @(*) begin
	/* main: %156*/
	/*   %indvar61 = phi i32 [ %indvar.next62, %157 ], [ 0, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit34_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_indvar61 = 32'd0;
	end
	/* main: %156*/
	/*   %indvar61 = phi i32 [ %indvar.next62, %157 ], [ 0, %uppol2.exit34 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__157_98) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_156_indvar61 = main_157_indvarnext62_reg;
	end
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %indvar61 = phi i32 [ %indvar.next62, %157 ], [ 0, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit34_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_indvar61_reg <= main_156_indvar61;
		if (start == 1'b0 && ^(main_156_indvar61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_indvar61_reg"); $finish; end
	end
	/* main: %156*/
	/*   %indvar61 = phi i32 [ %indvar.next62, %157 ], [ 0, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_indvar61_reg <= main_156_indvar61;
		if (start == 1'b0 && ^(main_156_indvar61) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_indvar61_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %zl.i7.i6.i.0 = phi i32 [ %161, %157 ], [ %155, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit34_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_zli7i6i0 = main_uppol2exit34_155;
	end
	/* main: %156*/
	/*   %zl.i7.i6.i.0 = phi i32 [ %161, %157 ], [ %155, %uppol2.exit34 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__157_98) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_156_zli7i6i0 = main_157_161;
	end
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %zl.i7.i6.i.0 = phi i32 [ %161, %157 ], [ %155, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit34_93) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_zli7i6i0_reg <= main_156_zli7i6i0;
		if (start == 1'b0 && ^(main_156_zli7i6i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_zli7i6i0_reg"); $finish; end
	end
	/* main: %156*/
	/*   %zl.i7.i6.i.0 = phi i32 [ %161, %157 ], [ %155, %uppol2.exit34 ]*/
	if (((cur_state == LEGUP_F_main_BB__157_98) & (memory_controller_waitrequest == 1'd0))) begin
		main_156_zli7i6i0_reg <= main_156_zli7i6i0;
		if (start == 1'b0 && ^(main_156_zli7i6i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_zli7i6i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %i.i6.i5.i.0 = add i32 %indvar61, 1*/
		main_156_ii6i5i0 = (main_156_indvar61_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %156*/
	/*   %i.i6.i5.i.0 = add i32 %indvar61, 1*/
	if ((cur_state == LEGUP_F_main_BB__156_94)) begin
		main_156_ii6i5i0_reg <= main_156_ii6i5i0;
		if (start == 1'b0 && ^(main_156_ii6i5i0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_156_ii6i5i0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %156*/
	/*   %exitcond63 = icmp eq i32 %indvar61, 5*/
		main_156_exitcond63 = (main_156_indvar61_reg == 32'd5);
end
always @(*) begin
	/* main: %157*/
	/*   %.0471 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %i.i6.i5.i.0*/
		main_157_0471 = (`TAG_g_delay_bph_a + (4 * main_156_ii6i5i0_reg));
end
always @(*) begin
	/* main: %157*/
	/*   %.0472 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %i.i6.i5.i.0*/
		main_157_0472 = (`TAG_g_delay_dhx_a + (4 * main_156_ii6i5i0_reg));
end
always @(*) begin
	/* main: %157*/
	/*   %158 = load i32* %.0471, align 4*/
		main_157_158 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %157*/
	/*   %159 = load i32* %.0472, align 4*/
		main_157_159 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_157_160 = main_157_160_stage0_reg;
end
always @(*) begin
	/* main: %157*/
	/*   %161 = add nsw i32 %zl.i7.i6.i.0, %160*/
		main_157_161 = (main_156_zli7i6i0_reg + main_157_160);
end
always @(*) begin
	/* main: %157*/
	/*   %indvar.next62 = add i32 %indvar61, 1*/
		main_157_indvarnext62 = (main_156_indvar61_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %indvar.next62 = add i32 %indvar61, 1*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		main_157_indvarnext62_reg <= main_157_indvarnext62;
		if (start == 1'b0 && ^(main_157_indvarnext62) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_157_indvarnext62_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %162 = sub nsw i32 0, %151*/
		main_filtezexit8i26i_162 = (32'd0 - main_uppol2exit34_151_reg);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %.apl1.i11.i4.i.0 = select i1 %152, i32 %151, i32 %apl1.i11.i4.i.0*/
		main_filtezexit8i26i_apl1i11i4i0 = (main_uppol2exit34_152_reg ? main_uppol2exit34_151_reg : main_uppol2exit34_apl1i11i4i0_reg);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %163 = icmp slt i32 %.apl1.i11.i4.i.0, %162*/
		main_filtezexit8i26i_163 = ($signed(main_filtezexit8i26i_apl1i11i4i0) < $signed(main_filtezexit8i26i_162));
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %apl1.i11.i4.i.2 = select i1 %163, i32 %162, i32 %.apl1.i11.i4.i.0*/
		main_filtezexit8i26i_apl1i11i4i2 = (main_filtezexit8i26i_163 ? main_filtezexit8i26i_162 : main_filtezexit8i26i_apl1i11i4i0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %apl1.i11.i4.i.2 = select i1 %163, i32 %162, i32 %.apl1.i11.i4.i.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_99)) begin
		main_filtezexit8i26i_apl1i11i4i2_reg <= main_filtezexit8i26i_apl1i11i4i2;
		if (start == 1'b0 && ^(main_filtezexit8i26i_apl1i11i4i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_apl1i11i4i2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %164 = add nsw i32 %72, %90*/
		main_filtezexit8i26i_164 = (main_filtezexiti23i_72_reg + main_quantlexitii_90_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %164 = add nsw i32 %72, %90*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_99)) begin
		main_filtezexit8i26i_164_reg <= main_filtezexit8i26i_164;
		if (start == 1'b0 && ^(main_filtezexit8i26i_164) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_164_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %165 = ashr i32 %zl.i7.i6.i.0, 14*/
		main_filtezexit8i26i_165 = ($signed(main_156_zli7i6i0_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %165 = ashr i32 %zl.i7.i6.i.0, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_99)) begin
		main_filtezexit8i26i_165_reg <= main_filtezexit8i26i_165;
		if (start == 1'b0 && ^(main_filtezexit8i26i_165) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_165_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %166 = shl nsw i32 %rh1.0, 1*/
		main_filtezexit8i26i_166 = (main_resetexiti_rh10_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexit8i26i_167 = main_filtezexit8i26i_167_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %168 = shl nsw i32 %rh2.0, 1*/
		main_filtezexit8i26i_168 = (main_resetexiti_rh20_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexit8i26i_169 = main_filtezexit8i26i_169_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %170 = add nsw i32 %167, %169*/
		main_filtezexit8i26i_170 = (main_filtezexit8i26i_167 + main_filtezexit8i26i_169);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %171 = ashr i32 %170, 15*/
		main_filtezexit8i26i_171 = ($signed(main_filtezexit8i26i_170) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %172 = add nsw i32 %171, %165*/
		main_filtezexit8i26i_172 = (main_filtezexit8i26i_171 + main_filtezexit8i26i_165_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %172 = add nsw i32 %171, %165*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_100)) begin
		main_filtezexit8i26i_172_reg <= main_filtezexit8i26i_172;
		if (start == 1'b0 && ^(main_filtezexit8i26i_172) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_172_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %173 = sub nsw i32 %64, %172*/
		main_filtezexit8i26i_173 = (main_filtezexiti23i_64_reg - main_filtezexit8i26i_172);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %174 = icmp sgt i32 %173, -1*/
		main_filtezexit8i26i_174 = ($signed(main_filtezexit8i26i_173) > $signed(-32'd1));
end
always @(*) begin
	main_filtezexit8i26i_175 = main_filtezexit8i26i_175_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %176 = ashr i32 %175, 12*/
		main_filtezexit8i26i_176 = ($signed(main_filtezexit8i26i_175) >>> 32'd12);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %177 = sub nsw i32 0, %173*/
		main_filtezexit8i26i_177 = (32'd0 - main_filtezexit8i26i_173);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %178 = ashr i32 %173, 31*/
		main_filtezexit8i26i_178 = ($signed(main_filtezexit8i26i_173) >>> 32'd31);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %179 = and i32 %178, -2*/
		main_filtezexit8i26i_179 = (main_filtezexit8i26i_178 & -32'd2);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %179 = and i32 %178, -2*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_100)) begin
		main_filtezexit8i26i_179_reg <= main_filtezexit8i26i_179;
		if (start == 1'b0 && ^(main_filtezexit8i26i_179) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_179_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %m.i.i.i.0 = select i1 %174, i32 %173, i32 %177*/
		main_filtezexit8i26i_miii0 = (main_filtezexit8i26i_174 ? main_filtezexit8i26i_173 : main_filtezexit8i26i_177);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %180 = icmp sgt i32 %m.i.i.i.0, %176*/
		main_filtezexit8i26i_180 = ($signed(main_filtezexit8i26i_miii0) > $signed(main_filtezexit8i26i_176));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %180 = icmp sgt i32 %m.i.i.i.0, %176*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_100)) begin
		main_filtezexit8i26i_180_reg <= main_filtezexit8i26i_180;
		if (start == 1'b0 && ^(main_filtezexit8i26i_180) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_180_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %.ih.0486.v = select i1 %180, i32 2, i32 3*/
		main_filtezexit8i26i_ih0486v = (main_filtezexit8i26i_180_reg ? 32'd2 : 32'd3);
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %.ih.0486 = add nsw i32 %179, %.ih.0486.v*/
		main_filtezexit8i26i_ih0486 = (main_filtezexit8i26i_179_reg + main_filtezexit8i26i_ih0486v);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %.ih.0486 = add nsw i32 %179, %.ih.0486.v*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_101)) begin
		main_filtezexit8i26i_ih0486_reg <= main_filtezexit8i26i_ih0486;
		if (start == 1'b0 && ^(main_filtezexit8i26i_ih0486) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_ih0486_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %181 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %.ih.0486*/
		main_filtezexit8i26i_181 = (`TAG_g_qq2_code2_table_a + (4 * main_filtezexit8i26i_ih0486_reg));
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %182 = load i32* %181, align 4*/
		main_filtezexit8i26i_182 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_filtezexit8i26i_183 = main_filtezexit8i26i_183_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %184 = ashr i32 %183, 15*/
		main_filtezexit8i26i_184 = ($signed(main_filtezexit8i26i_183) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %184 = ashr i32 %183, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_105)) begin
		main_filtezexit8i26i_184_reg <= main_filtezexit8i26i_184;
		if (start == 1'b0 && ^(main_filtezexit8i26i_184) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_184_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8i26i_185 = main_filtezexit8i26i_185_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %186 = ashr i32 %185, 7*/
		main_filtezexit8i26i_186 = ($signed(main_filtezexit8i26i_185) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %186 = ashr i32 %185, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_100)) begin
		main_filtezexit8i26i_186_reg <= main_filtezexit8i26i_186;
		if (start == 1'b0 && ^(main_filtezexit8i26i_186) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_186_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %187 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %.ih.0486*/
		main_filtezexit8i26i_187 = (`TAG_g_wh_code_table_a + (4 * main_filtezexit8i26i_ih0486_reg));
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %188 = load i32* %187, align 4*/
		main_filtezexit8i26i_188 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %189 = add nsw i32 %186, %188*/
		main_filtezexit8i26i_189 = (main_filtezexit8i26i_186_reg + main_filtezexit8i26i_188);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %189 = add nsw i32 %186, %188*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_104)) begin
		main_filtezexit8i26i_189_reg <= main_filtezexit8i26i_189;
		if (start == 1'b0 && ^(main_filtezexit8i26i_189) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_189_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %190 = icmp slt i32 %189, 0*/
		main_filtezexit8i26i_190 = ($signed(main_filtezexit8i26i_189) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %190 = icmp slt i32 %189, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_104)) begin
		main_filtezexit8i26i_190_reg <= main_filtezexit8i26i_190;
		if (start == 1'b0 && ^(main_filtezexit8i26i_190) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8i26i_190_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %191*/
	/*   %192 = icmp sgt i32 %189, 22528*/
		main_191_192 = ($signed(main_filtezexit8i26i_189_reg) > $signed(32'd22528));
end
always @(*) begin
	/* main: %191*/
	/*   %.489 = select i1 %192, i32 22528, i32 %189*/
		main_191_489 = (main_191_192 ? 32'd22528 : main_filtezexit8i26i_189_reg);
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %.0469 = phi i32 [ 0, %filtez.exit8.i26.i ], [ %.489, %191 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8i26i_105) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8i26i_190_reg == 1'd1))) begin
		main_logschexiti27i_0469 = 32'd0;
	end
	/* main: %logsch.exit.i27.i*/
	/*   %.0469 = phi i32 [ 0, %filtez.exit8.i26.i ], [ %.489, %191 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__191_106) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logschexiti27i_0469 = main_191_489;
	end
end
always @(posedge clk) begin
	/* main: %logsch.exit.i27.i*/
	/*   %.0469 = phi i32 [ 0, %filtez.exit8.i26.i ], [ %.489, %191 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8i26i_105) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8i26i_190_reg == 1'd1))) begin
		main_logschexiti27i_0469_reg <= main_logschexiti27i_0469;
		if (start == 1'b0 && ^(main_logschexiti27i_0469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_0469_reg"); $finish; end
	end
	/* main: %logsch.exit.i27.i*/
	/*   %.0469 = phi i32 [ 0, %filtez.exit8.i26.i ], [ %.489, %191 ]*/
	if (((cur_state == LEGUP_F_main_BB__191_106) & (memory_controller_waitrequest == 1'd0))) begin
		main_logschexiti27i_0469_reg <= main_logschexiti27i_0469;
		if (start == 1'b0 && ^(main_logschexiti27i_0469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_0469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %193 = lshr i32 %.0469, 6*/
		main_logschexiti27i_193 = (main_logschexiti27i_0469_reg >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %194 = and i32 %193, 31*/
		main_logschexiti27i_194 = (main_logschexiti27i_193 & 32'd31);
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %195 = ashr i32 %.0469, 11*/
		main_logschexiti27i_195 = ($signed(main_logschexiti27i_0469_reg) >>> 32'd11);
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %196 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %194*/
		main_logschexiti27i_196 = (`TAG_g_ilb_table_a + (4 * main_logschexiti27i_194));
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %197 = load i32* %196, align 4*/
		main_logschexiti27i_197 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %198 = sub nsw i32 11, %195*/
		main_logschexiti27i_198 = (32'd11 - main_logschexiti27i_195);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i27.i*/
	/*   %198 = sub nsw i32 11, %195*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		main_logschexiti27i_198_reg <= main_logschexiti27i_198;
		if (start == 1'b0 && ^(main_logschexiti27i_198) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_198_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %199 = ashr i32 %197, %198*/
		main_logschexiti27i_199 = ($signed(main_logschexiti27i_197) >>> main_logschexiti27i_198_reg);
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %200 = shl i32 %199, 3*/
		main_logschexiti27i_200 = (main_logschexiti27i_199 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logsch.exit.i27.i*/
	/*   %200 = shl i32 %199, 3*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_109)) begin
		main_logschexiti27i_200_reg <= main_logschexiti27i_200;
		if (start == 1'b0 && ^(main_logschexiti27i_200) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_200_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %201 = add nsw i32 %184, %165*/
		main_logschexiti27i_201 = (main_filtezexit8i26i_184_reg + main_filtezexit8i26i_165_reg);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i27.i*/
	/*   %201 = add nsw i32 %184, %165*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		main_logschexiti27i_201_reg <= main_logschexiti27i_201;
		if (start == 1'b0 && ^(main_logschexiti27i_201) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_201_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i27.i*/
	/*   %202 = icmp eq i32 %184, 0*/
		main_logschexiti27i_202 = (main_filtezexit8i26i_184_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i27.i*/
	/*   %202 = icmp eq i32 %184, 0*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		main_logschexiti27i_202_reg <= main_logschexiti27i_202;
		if (start == 1'b0 && ^(main_logschexiti27i_202) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexiti27i_202_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader41*/
	/*   %203 = phi i32 [ %208, %204 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader41preheader_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_203 = 32'd0;
	end
	/* main: %.preheader41*/
	/*   %203 = phi i32 [ %208, %204 ], [ 0, %.preheader41.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__204_117) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader41_203 = main_204_208_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader41*/
	/*   %203 = phi i32 [ %208, %204 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader41preheader_111) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_203_reg <= main_preheader41_203;
		if (start == 1'b0 && ^(main_preheader41_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_203_reg"); $finish; end
	end
	/* main: %.preheader41*/
	/*   %203 = phi i32 [ %208, %204 ], [ 0, %.preheader41.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__204_117) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader41_203_reg <= main_preheader41_203;
		if (start == 1'b0 && ^(main_preheader41_203) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_203_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader41*/
	/*   %scevgep70 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %203*/
		main_preheader41_scevgep70 = (`TAG_g_delay_bph_a + (4 * main_preheader41_203_reg));
end
always @(posedge clk) begin
	/* main: %.preheader41*/
	/*   %scevgep70 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %203*/
	if ((cur_state == LEGUP_F_main_BB_preheader41_112)) begin
		main_preheader41_scevgep70_reg <= main_preheader41_scevgep70;
		if (start == 1'b0 && ^(main_preheader41_scevgep70) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader41_scevgep70_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader41*/
	/*   %exitcond69 = icmp eq i32 %203, 6*/
		main_preheader41_exitcond69 = (main_preheader41_203_reg == 32'd6);
end
always @(*) begin
	/* main: %204*/
	/*   %205 = load i32* %scevgep70, align 4*/
		main_204_205 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_204_206 = main_204_206_stage0_reg;
end
always @(*) begin
	/* main: %204*/
	/*   %207 = ashr i32 %206, 8*/
		main_204_207 = ($signed(main_204_206) >>> 32'd8);
end
always @(*) begin
	/* main: %204*/
	/*   %208 = add nsw i32 %203, 1*/
		main_204_208 = (main_preheader41_203_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %208 = add nsw i32 %203, 1*/
	if ((cur_state == LEGUP_F_main_BB__204_113)) begin
		main_204_208_reg <= main_204_208;
		if (start == 1'b0 && ^(main_204_208) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_204_208_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader42*/
	/*   %209 = phi i32 [ %220, %210 ], [ 0, %.preheader42.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42preheader_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader42_209 = 32'd0;
	end
	/* main: %.preheader42*/
	/*   %209 = phi i32 [ %220, %210 ], [ 0, %.preheader42.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__210_123) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader42_209 = main_210_220_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader42*/
	/*   %209 = phi i32 [ %220, %210 ], [ 0, %.preheader42.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader42preheader_110) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader42_209_reg <= main_preheader42_209;
		if (start == 1'b0 && ^(main_preheader42_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader42_209_reg"); $finish; end
	end
	/* main: %.preheader42*/
	/*   %209 = phi i32 [ %220, %210 ], [ 0, %.preheader42.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__210_123) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader42_209_reg <= main_preheader42_209;
		if (start == 1'b0 && ^(main_preheader42_209) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader42_209_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader42*/
	/*   %scevgep67 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %209*/
		main_preheader42_scevgep67 = (`TAG_g_delay_bph_a + (4 * main_preheader42_209_reg));
end
always @(posedge clk) begin
	/* main: %.preheader42*/
	/*   %scevgep67 = getelementptr [6 x i32]* @delay_bph, i32 0, i32 %209*/
	if ((cur_state == LEGUP_F_main_BB_preheader42_118)) begin
		main_preheader42_scevgep67_reg <= main_preheader42_scevgep67;
		if (start == 1'b0 && ^(main_preheader42_scevgep67) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader42_scevgep67_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader42*/
	/*   %exitcond66 = icmp eq i32 %209, 6*/
		main_preheader42_exitcond66 = (main_preheader42_209_reg == 32'd6);
end
always @(*) begin
	/* main: %210*/
	/*   %scevgep68 = getelementptr [6 x i32]* @delay_dhx, i32 0, i32 %209*/
		main_210_scevgep68 = (`TAG_g_delay_dhx_a + (4 * main_preheader42_209_reg));
end
always @(*) begin
	/* main: %210*/
	/*   %211 = load i32* %scevgep68, align 4*/
		main_210_211 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_210_212 = main_210_212_stage0_reg;
end
always @(*) begin
	/* main: %210*/
	/*   %213 = ashr i32 %212, 31*/
		main_210_213 = ($signed(main_210_212) >>> 32'd31);
end
always @(*) begin
	/* main: %210*/
	/*   %214 = and i32 %213, -256*/
		main_210_214 = (main_210_213 & -32'd256);
end
always @(*) begin
	/* main: %210*/
	/*   %215 = or i32 %214, 128*/
		main_210_215 = (main_210_214 | 32'd128);
end
always @(*) begin
	/* main: %210*/
	/*   %216 = load i32* %scevgep67, align 4*/
		main_210_216 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_210_217 = main_210_217_stage0_reg;
end
always @(*) begin
	/* main: %210*/
	/*   %218 = ashr i32 %217, 8*/
		main_210_218 = ($signed(main_210_217) >>> 32'd8);
end
always @(*) begin
	/* main: %210*/
	/*   %219 = add nsw i32 %215, %218*/
		main_210_219 = (main_210_215 + main_210_218);
end
always @(*) begin
	/* main: %210*/
	/*   %220 = add nsw i32 %209, 1*/
		main_210_220 = (main_preheader42_209_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %220 = add nsw i32 %209, 1*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		main_210_220_reg <= main_210_220;
		if (start == 1'b0 && ^(main_210_220) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_210_220_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %221 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
		main_upzeroexit29_221 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
		main_upzeroexit29_222 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		main_upzeroexit29_222_reg <= main_upzeroexit29_222;
		if (start == 1'b0 && ^(main_upzeroexit29_222) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_222_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %223 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
		main_upzeroexit29_223 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %224 = shl nsw i32 %ah1.0, 2*/
		main_upzeroexit29_224 = (main_resetexiti_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %224 = shl nsw i32 %ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		main_upzeroexit29_224_reg <= main_upzeroexit29_224;
		if (start == 1'b0 && ^(main_upzeroexit29_224) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_224_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit29_225 = main_upzeroexit29_225_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %225 = mul nsw i32 %201, %ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		main_upzeroexit29_225_reg <= main_upzeroexit29_225;
		if (start == 1'b0 && ^(main_upzeroexit29_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_225_reg"); $finish; end
	end
	/* main: %upzero.exit29*/
	/*   %225 = mul nsw i32 %201, %ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		main_upzeroexit29_225_reg <= main_upzeroexit29_225;
		if (start == 1'b0 && ^(main_upzeroexit29_225) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_225_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %226 = icmp sgt i32 %225, -1*/
		main_upzeroexit29_226 = ($signed(main_upzeroexit29_225) > $signed(-32'd1));
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %227 = sub nsw i32 0, %224*/
		main_upzeroexit29_227 = (32'd0 - main_upzeroexit29_224);
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %227 = sub nsw i32 0, %224*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		main_upzeroexit29_227_reg <= main_upzeroexit29_227;
		if (start == 1'b0 && ^(main_upzeroexit29_227) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_227_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %..i19 = select i1 %226, i32 %227, i32 %224*/
		main_upzeroexit29_i19 = (main_upzeroexit29_226 ? main_upzeroexit29_227_reg : main_upzeroexit29_224_reg);
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %228 = ashr i32 %..i19, 7*/
		main_upzeroexit29_228 = ($signed(main_upzeroexit29_i19) >>> 32'd7);
end
always @(*) begin
	main_upzeroexit29_229 = main_upzeroexit29_229_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %230 = ashr i32 %229, 31*/
		main_upzeroexit29_230 = ($signed(main_upzeroexit29_229) >>> 32'd31);
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %231 = and i32 %230, -256*/
		main_upzeroexit29_231 = (main_upzeroexit29_230 & -32'd256);
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %232 = or i32 %231, 128*/
		main_upzeroexit29_232 = (main_upzeroexit29_231 | 32'd128);
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %wd4.0.i20 = add nsw i32 %228, %232*/
		main_upzeroexit29_wd40i20 = (main_upzeroexit29_228 + main_upzeroexit29_232);
end
always @(*) begin
	main_upzeroexit29_233 = main_upzeroexit29_233_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %234 = ashr i32 %233, 7*/
		main_upzeroexit29_234 = ($signed(main_upzeroexit29_233) >>> 32'd7);
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %235 = add nsw i32 %wd4.0.i20, %234*/
		main_upzeroexit29_235 = (main_upzeroexit29_wd40i20 + main_upzeroexit29_234);
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %235 = add nsw i32 %wd4.0.i20, %234*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		main_upzeroexit29_235_reg <= main_upzeroexit29_235;
		if (start == 1'b0 && ^(main_upzeroexit29_235) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_235_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit29*/
	/*   %236 = icmp sgt i32 %235, 12288*/
		main_upzeroexit29_236 = ($signed(main_upzeroexit29_235) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %236 = icmp sgt i32 %235, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		main_upzeroexit29_236_reg <= main_upzeroexit29_236;
		if (start == 1'b0 && ^(main_upzeroexit29_236) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit29_236_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %237*/
	/*   %238 = icmp slt i32 %235, -12288*/
		main_237_238 = ($signed(main_upzeroexit29_235_reg) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %237*/
	/*   %.9.i21 = select i1 %238, i32 -12288, i32 %235*/
		main_237_9i21 = (main_237_238 ? -32'd12288 : main_upzeroexit29_235_reg);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %239 = phi i32 [ %.9.i21, %237 ], [ 12288, %upzero.exit29 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit29_130) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit29_236_reg == 1'd1))) begin
		main_uppol2exit23_239 = 32'd12288;
	end
	/* main: %uppol2.exit23*/
	/*   %239 = phi i32 [ %.9.i21, %237 ], [ 12288, %upzero.exit29 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__237_131) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exit23_239 = main_237_9i21;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %239 = phi i32 [ %.9.i21, %237 ], [ 12288, %upzero.exit29 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit29_130) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit29_236_reg == 1'd1))) begin
		main_uppol2exit23_239_reg <= main_uppol2exit23_239;
		if (start == 1'b0 && ^(main_uppol2exit23_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_239_reg"); $finish; end
	end
	/* main: %uppol2.exit23*/
	/*   %239 = phi i32 [ %.9.i21, %237 ], [ 12288, %upzero.exit29 ]*/
	if (((cur_state == LEGUP_F_main_BB__237_131) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exit23_239_reg <= main_uppol2exit23_239;
		if (start == 1'b0 && ^(main_uppol2exit23_239) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_239_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit23_240 = main_uppol2exit23_240_stage0_reg;
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %241 = ashr i32 %240, 8*/
		main_uppol2exit23_241 = ($signed(main_uppol2exit23_240) >>> 32'd8);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %242 = ashr i32 %225, 31*/
		main_uppol2exit23_242 = ($signed(main_upzeroexit29_225_reg) >>> 32'd31);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %243 = and i32 %242, -384*/
		main_uppol2exit23_243 = (main_uppol2exit23_242 & -32'd384);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %244 = add nsw i32 %243, 192*/
		main_uppol2exit23_244 = (main_uppol2exit23_243 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %244 = add nsw i32 %243, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_244_reg <= main_uppol2exit23_244;
		if (start == 1'b0 && ^(main_uppol2exit23_244) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_244_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %apl1.i.i18.i.0 = add nsw i32 %241, %244*/
		main_uppol2exit23_apl1ii18i0 = (main_uppol2exit23_241 + main_uppol2exit23_244_reg);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %245 = sub nsw i32 15360, %239*/
		main_uppol2exit23_245 = (32'd15360 - main_uppol2exit23_239_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %245 = sub nsw i32 15360, %239*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_245_reg <= main_uppol2exit23_245;
		if (start == 1'b0 && ^(main_uppol2exit23_245) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_245_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %246 = icmp sgt i32 %apl1.i.i18.i.0, %245*/
		main_uppol2exit23_246 = ($signed(main_uppol2exit23_apl1ii18i0) > $signed(main_uppol2exit23_245_reg));
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %.apl1.i.i18.i.0 = select i1 %246, i32 %245, i32 %apl1.i.i18.i.0*/
		main_uppol2exit23_apl1ii18i0_var0 = (main_uppol2exit23_246 ? main_uppol2exit23_245_reg : main_uppol2exit23_apl1ii18i0);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %247 = sub nsw i32 0, %245*/
		main_uppol2exit23_247 = (32'd0 - main_uppol2exit23_245);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %247 = sub nsw i32 0, %245*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_247_reg <= main_uppol2exit23_247;
		if (start == 1'b0 && ^(main_uppol2exit23_247) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_247_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %248 = icmp slt i32 %.apl1.i.i18.i.0, %247*/
		main_uppol2exit23_248 = ($signed(main_uppol2exit23_apl1ii18i0_var0) < $signed(main_uppol2exit23_247_reg));
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %apl1.i.i18.i.2 = select i1 %248, i32 %247, i32 %.apl1.i.i18.i.0*/
		main_uppol2exit23_apl1ii18i2 = (main_uppol2exit23_248 ? main_uppol2exit23_247_reg : main_uppol2exit23_apl1ii18i0_var0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %apl1.i.i18.i.2 = select i1 %248, i32 %247, i32 %.apl1.i.i18.i.0*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_133)) begin
		main_uppol2exit23_apl1ii18i2_reg <= main_uppol2exit23_apl1ii18i2;
		if (start == 1'b0 && ^(main_uppol2exit23_apl1ii18i2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_apl1ii18i2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %249 = add nsw i32 %172, %184*/
		main_uppol2exit23_249 = (main_filtezexit8i26i_172_reg + main_filtezexit8i26i_184_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %249 = add nsw i32 %172, %184*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_249_reg <= main_uppol2exit23_249;
		if (start == 1'b0 && ^(main_uppol2exit23_249) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_249_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %250 = shl nsw i32 %.ih.0486, 6*/
		main_uppol2exit23_250 = (main_filtezexit8i26i_ih0486_reg <<< (32'd6 % 32));
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %251 = or i32 %ril.i.i.i.0, %250*/
		main_uppol2exit23_251 = (main_quantlexitii_riliii0_reg | main_uppol2exit23_250);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %251 = or i32 %ril.i.i.i.0, %250*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_251_reg <= main_uppol2exit23_251;
		if (start == 1'b0 && ^(main_uppol2exit23_251) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_251_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit23_252 = main_signed_divide_32_0;
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %253 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %252*/
		main_uppol2exit23_253 = (`TAG_g_compressed_a + (4 * main_uppol2exit23_252));
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %indvar.next72 = add i32 %indvar71, 1*/
		main_uppol2exit23_indvarnext72 = (main_resetexiti_indvar71_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %indvar.next72 = add i32 %indvar71, 1*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_uppol2exit23_indvarnext72_reg <= main_uppol2exit23_indvarnext72;
		if (start == 1'b0 && ^(main_uppol2exit23_indvarnext72) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit23_indvarnext72_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %254*/
	/*   %255 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %il.0*/
		main_254_255 = (`TAG_g_qq6_code6_table_a + (4 * main_resetexiti_il0_reg));
end
always @(posedge clk) begin
	/* main: %254*/
	/*   %255 = getelementptr inbounds [64 x i32]* @qq6_code6_table, i32 0, i32 %il.0*/
	if ((cur_state == LEGUP_F_main_BB__254_166)) begin
		main_254_255_reg <= main_254_255;
		if (start == 1'b0 && ^(main_254_255) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_254_255_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %indvar37 = phi i32 [ %indvar.next38, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_indvar37 = 32'd0;
	end
	/* main: %256*/
	/*   %indvar37 = phi i32 [ %indvar.next38, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_indvar37 = main_decodeexiti_indvarnext38_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %indvar37 = phi i32 [ %indvar.next38, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_indvar37_reg <= main_256_indvar37;
		if (start == 1'b0 && ^(main_256_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_indvar37_reg"); $finish; end
	end
	/* main: %256*/
	/*   %indvar37 = phi i32 [ %indvar.next38, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_indvar37_reg <= main_256_indvar37;
		if (start == 1'b0 && ^(main_256_indvar37) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_indvar37_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_rlt10 = main_filtezexit8ii_363_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt10_reg <= main_256_dec_rlt10;
		if (start == 1'b0 && ^(main_256_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rlt10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_rlt1.0 = phi i32 [ %363, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt10_reg <= main_256_dec_rlt10;
		if (start == 1'b0 && ^(main_256_dec_rlt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rlt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_al1.0 = phi i32 [ %apl1.i11.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_al1.0 = phi i32 [ %apl1.i11.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_al10 = main_filtezexit8ii_apl1i11ii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_al1.0 = phi i32 [ %apl1.i11.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al10_reg <= main_256_dec_al10;
		if (start == 1'b0 && ^(main_256_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_al10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_al1.0 = phi i32 [ %apl1.i11.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al10_reg <= main_256_dec_al10;
		if (start == 1'b0 && ^(main_256_dec_al10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_al10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_rlt20 = main_256_dec_rlt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt20_reg <= main_256_dec_rlt20;
		if (start == 1'b0 && ^(main_256_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rlt20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_rlt2.0 = phi i32 [ %dec_rlt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rlt20_reg <= main_256_dec_rlt20;
		if (start == 1'b0 && ^(main_256_dec_rlt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rlt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_al2.0 = phi i32 [ %344, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_al2.0 = phi i32 [ %344, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_al20 = main_uppol2exit12_344_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_al2.0 = phi i32 [ %344, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al20_reg <= main_256_dec_al20;
		if (start == 1'b0 && ^(main_256_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_al20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_al2.0 = phi i32 [ %344, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_al20_reg <= main_256_dec_al20;
		if (start == 1'b0 && ^(main_256_dec_al20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_al20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_detl.0 = phi i32 [ %305, %decode.exit.i ], [ 32, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_detl0 = 32'd32;
	end
	/* main: %256*/
	/*   %dec_detl.0 = phi i32 [ %305, %decode.exit.i ], [ 32, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_detl0 = main_logsclexitii_305_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_detl.0 = phi i32 [ %305, %decode.exit.i ], [ 32, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_detl0_reg <= main_256_dec_detl0;
		if (start == 1'b0 && ^(main_256_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_detl0_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_detl.0 = phi i32 [ %305, %decode.exit.i ], [ 32, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_detl0_reg <= main_256_dec_detl0;
		if (start == 1'b0 && ^(main_256_dec_detl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_detl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_nbl.0 = phi i32 [ %.0463, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbl0 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_nbl.0 = phi i32 [ %.0463, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_nbl0 = main_logsclexitii_0463_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_nbl.0 = phi i32 [ %.0463, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbl0_reg <= main_256_dec_nbl0;
		if (start == 1'b0 && ^(main_256_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_nbl0_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_nbl.0 = phi i32 [ %.0463, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbl0_reg <= main_256_dec_nbl0;
		if (start == 1'b0 && ^(main_256_dec_nbl0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_nbl0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_plt1.0 = phi i32 [ %306, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_plt1.0 = phi i32 [ %306, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_plt10 = main_logsclexitii_306_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_plt1.0 = phi i32 [ %306, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt10_reg <= main_256_dec_plt10;
		if (start == 1'b0 && ^(main_256_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_plt10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_plt1.0 = phi i32 [ %306, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt10_reg <= main_256_dec_plt10;
		if (start == 1'b0 && ^(main_256_dec_plt10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_plt10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_plt20 = main_256_dec_plt10_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt20_reg <= main_256_dec_plt20;
		if (start == 1'b0 && ^(main_256_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_plt20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_plt2.0 = phi i32 [ %dec_plt1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_plt20_reg <= main_256_dec_plt20;
		if (start == 1'b0 && ^(main_256_dec_plt20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_plt20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_rh1.0 = phi i32 [ %438, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_rh1.0 = phi i32 [ %438, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_rh10 = main_uppol2exit_438_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_rh1.0 = phi i32 [ %438, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh10_reg <= main_256_dec_rh10;
		if (start == 1'b0 && ^(main_256_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rh10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_rh1.0 = phi i32 [ %438, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh10_reg <= main_256_dec_rh10;
		if (start == 1'b0 && ^(main_256_dec_rh10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rh10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.i.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.i.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_ah10 = main_decodeexiti_apl1iii2_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.i.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah10_reg <= main_256_dec_ah10;
		if (start == 1'b0 && ^(main_256_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ah10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_ah1.0 = phi i32 [ %apl1.i.i.i.2, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah10_reg <= main_256_dec_ah10;
		if (start == 1'b0 && ^(main_256_dec_ah10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ah10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_rh20 = main_256_dec_rh10_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh20_reg <= main_256_dec_rh20;
		if (start == 1'b0 && ^(main_256_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rh20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_rh2.0 = phi i32 [ %dec_rh1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_rh20_reg <= main_256_dec_rh20;
		if (start == 1'b0 && ^(main_256_dec_rh20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_rh20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_ah2.0 = phi i32 [ %430, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_ah2.0 = phi i32 [ %430, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_ah20 = main_uppol2exit_430_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_ah2.0 = phi i32 [ %430, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah20_reg <= main_256_dec_ah20;
		if (start == 1'b0 && ^(main_256_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ah20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_ah2.0 = phi i32 [ %430, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ah20_reg <= main_256_dec_ah20;
		if (start == 1'b0 && ^(main_256_dec_ah20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ah20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_deth.0 = phi i32 [ %391, %decode.exit.i ], [ 8, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_deth0 = 32'd8;
	end
	/* main: %256*/
	/*   %dec_deth.0 = phi i32 [ %391, %decode.exit.i ], [ 8, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_deth0 = main_logschexitii_391_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_deth.0 = phi i32 [ %391, %decode.exit.i ], [ 8, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_deth0_reg <= main_256_dec_deth0;
		if (start == 1'b0 && ^(main_256_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_deth0_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_deth.0 = phi i32 [ %391, %decode.exit.i ], [ 8, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_deth0_reg <= main_256_dec_deth0;
		if (start == 1'b0 && ^(main_256_dec_deth0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_deth0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_nbh.0 = phi i32 [ %.0464, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbh0 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_nbh.0 = phi i32 [ %.0464, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_nbh0 = main_logschexitii_0464_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_nbh.0 = phi i32 [ %.0464, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbh0_reg <= main_256_dec_nbh0;
		if (start == 1'b0 && ^(main_256_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_nbh0_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_nbh.0 = phi i32 [ %.0464, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_nbh0_reg <= main_256_dec_nbh0;
		if (start == 1'b0 && ^(main_256_dec_nbh0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_nbh0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_ph1.0 = phi i32 [ %392, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph10 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_ph1.0 = phi i32 [ %392, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_ph10 = main_logschexitii_392_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_ph1.0 = phi i32 [ %392, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph10_reg <= main_256_dec_ph10;
		if (start == 1'b0 && ^(main_256_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ph10_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_ph1.0 = phi i32 [ %392, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph10_reg <= main_256_dec_ph10;
		if (start == 1'b0 && ^(main_256_dec_ph10) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ph10_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph20 = 32'd0;
	end
	/* main: %256*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %254 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_256_dec_ph20 = main_256_dec_ph10_reg;
	end
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB__254_166) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph20_reg <= main_256_dec_ph20;
		if (start == 1'b0 && ^(main_256_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ph20_reg"); $finish; end
	end
	/* main: %256*/
	/*   %dec_ph2.0 = phi i32 [ %dec_ph1.0, %decode.exit.i ], [ 0, %254 ]*/
	if (((cur_state == LEGUP_F_main_BB_decodeexiti_297) & (memory_controller_waitrequest == 1'd0))) begin
		main_256_dec_ph20_reg <= main_256_dec_ph20;
		if (start == 1'b0 && ^(main_256_dec_ph20) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_dec_ph20_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %i.i.1 = shl i32 %indvar37, 1*/
		main_256_ii1 = (main_256_indvar37_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %i.i.1 = shl i32 %indvar37, 1*/
	if ((cur_state == LEGUP_F_main_BB__256_167)) begin
		main_256_ii1_reg <= main_256_ii1;
		if (start == 1'b0 && ^(main_256_ii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_ii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %257 = or i32 %i.i.1, 1*/
		main_256_257 = (main_256_ii1 | 32'd1);
end
always @(*) begin
	/* main: %256*/
	/*   %scevgep40 = getelementptr [100 x i32]* @result, i32 0, i32 %257*/
		main_256_scevgep40 = (`TAG_g_result_a + (4 * main_256_257));
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %scevgep40 = getelementptr [100 x i32]* @result, i32 0, i32 %257*/
	if ((cur_state == LEGUP_F_main_BB__256_167)) begin
		main_256_scevgep40_reg <= main_256_scevgep40;
		if (start == 1'b0 && ^(main_256_scevgep40) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_scevgep40_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %scevgep41 = getelementptr [100 x i32]* @result, i32 0, i32 %i.i.1*/
		main_256_scevgep41 = (`TAG_g_result_a + (4 * main_256_ii1));
end
always @(posedge clk) begin
	/* main: %256*/
	/*   %scevgep41 = getelementptr [100 x i32]* @result, i32 0, i32 %i.i.1*/
	if ((cur_state == LEGUP_F_main_BB__256_167)) begin
		main_256_scevgep41_reg <= main_256_scevgep41;
		if (start == 1'b0 && ^(main_256_scevgep41) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_256_scevgep41_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %256*/
	/*   %exitcond39 = icmp eq i32 %indvar37, 50*/
		main_256_exitcond39 = (main_256_indvar37_reg == 32'd50);
end
always @(*) begin
	main_258_259 = main_signed_divide_32_0;
end
always @(*) begin
	/* main: %258*/
	/*   %260 = getelementptr inbounds [100 x i32]* @compressed, i32 0, i32 %259*/
		main_258_260 = (`TAG_g_compressed_a + (4 * main_258_259));
end
always @(*) begin
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
		main_258_261 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_203)) begin
		main_258_261_reg <= main_258_261;
		if (start == 1'b0 && ^(main_258_261) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_261_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %258*/
	/*   %262 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
		main_258_262 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
		main_258_263 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_171)) begin
		main_258_263_reg <= main_258_263;
		if (start == 1'b0 && ^(main_258_263) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_263_reg"); $finish; end
	end
end
always @(*) begin
	main_258_264 = main_258_264_stage0_reg;
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %264 = mul nsw i32 %262, %263*/
	if ((cur_state == LEGUP_F_main_BB__258_172)) begin
		main_258_264_reg <= main_258_264;
		if (start == 1'b0 && ^(main_258_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_264_reg"); $finish; end
	end
	/* main: %258*/
	/*   %264 = mul nsw i32 %262, %263*/
	if ((cur_state == LEGUP_F_main_BB__258_172)) begin
		main_258_264_reg <= main_258_264;
		if (start == 1'b0 && ^(main_258_264) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_258_264_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %265*/
	/*   %indvar = phi i32 [ %indvar.next, %266 ], [ 0, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__258_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_indvar = 32'd0;
	end
	/* main: %265*/
	/*   %indvar = phi i32 [ %indvar.next, %266 ], [ 0, %258 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__266_208) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_265_indvar = main_266_indvarnext_reg;
	end
end
always @(posedge clk) begin
	/* main: %265*/
	/*   %indvar = phi i32 [ %indvar.next, %266 ], [ 0, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__258_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_indvar_reg <= main_265_indvar;
		if (start == 1'b0 && ^(main_265_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_265_indvar_reg"); $finish; end
	end
	/* main: %265*/
	/*   %indvar = phi i32 [ %indvar.next, %266 ], [ 0, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__266_208) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_indvar_reg <= main_265_indvar;
		if (start == 1'b0 && ^(main_265_indvar) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_265_indvar_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %265*/
	/*   %zl.i.i.i.0 = phi i32 [ %270, %266 ], [ %264, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__258_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_zliii0 = main_258_264_reg;
	end
	/* main: %265*/
	/*   %zl.i.i.i.0 = phi i32 [ %270, %266 ], [ %264, %258 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__266_208) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_265_zliii0 = main_266_270;
	end
end
always @(posedge clk) begin
	/* main: %265*/
	/*   %zl.i.i.i.0 = phi i32 [ %270, %266 ], [ %264, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__258_203) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_zliii0_reg <= main_265_zliii0;
		if (start == 1'b0 && ^(main_265_zliii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_265_zliii0_reg"); $finish; end
	end
	/* main: %265*/
	/*   %zl.i.i.i.0 = phi i32 [ %270, %266 ], [ %264, %258 ]*/
	if (((cur_state == LEGUP_F_main_BB__266_208) & (memory_controller_waitrequest == 1'd0))) begin
		main_265_zliii0_reg <= main_265_zliii0;
		if (start == 1'b0 && ^(main_265_zliii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_265_zliii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %265*/
	/*   %i.i.i.i.0 = add i32 %indvar, 1*/
		main_265_iiii0 = (main_265_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %265*/
	/*   %i.i.i.i.0 = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__265_204)) begin
		main_265_iiii0_reg <= main_265_iiii0;
		if (start == 1'b0 && ^(main_265_iiii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_265_iiii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %265*/
	/*   %exitcond9 = icmp eq i32 %indvar, 5*/
		main_265_exitcond9 = (main_265_indvar_reg == 32'd5);
end
always @(*) begin
	/* main: %266*/
	/*   %.0 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %i.i.i.i.0*/
		main_266_0 = (`TAG_g_dec_del_dltx_a + (4 * main_265_iiii0_reg));
end
always @(*) begin
	/* main: %266*/
	/*   %.0462 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %i.i.i.i.0*/
		main_266_0462 = (`TAG_g_dec_del_bpl_a + (4 * main_265_iiii0_reg));
end
always @(*) begin
	/* main: %266*/
	/*   %267 = load i32* %.0462, align 4*/
		main_266_267 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %266*/
	/*   %268 = load i32* %.0, align 4*/
		main_266_268 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_266_269 = main_266_269_stage0_reg;
end
always @(*) begin
	/* main: %266*/
	/*   %270 = add nsw i32 %zl.i.i.i.0, %269*/
		main_266_270 = (main_265_zliii0_reg + main_266_269);
end
always @(*) begin
	/* main: %266*/
	/*   %indvar.next = add i32 %indvar, 1*/
		main_266_indvarnext = (main_265_indvar_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %indvar.next = add i32 %indvar, 1*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		main_266_indvarnext_reg <= main_266_indvarnext;
		if (start == 1'b0 && ^(main_266_indvarnext) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_266_indvarnext_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %271 = ashr i32 %261, 6*/
		main_filtezexitii_271 = ($signed(main_258_261_reg) >>> 32'd6);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %271 = ashr i32 %261, 6*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		main_filtezexitii_271_reg <= main_filtezexitii_271;
		if (start == 1'b0 && ^(main_filtezexitii_271) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_271_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %272 = ashr i32 %zl.i.i.i.0, 14*/
		main_filtezexitii_272 = ($signed(main_265_zliii0_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %272 = ashr i32 %zl.i.i.i.0, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		main_filtezexitii_272_reg <= main_filtezexitii_272;
		if (start == 1'b0 && ^(main_filtezexitii_272) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_272_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %273 = shl nsw i32 %dec_rlt1.0, 1*/
		main_filtezexitii_273 = (main_256_dec_rlt10_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexitii_274 = main_filtezexitii_274_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %275 = shl nsw i32 %dec_rlt2.0, 1*/
		main_filtezexitii_275 = (main_256_dec_rlt20_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexitii_276 = main_filtezexitii_276_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %277 = add nsw i32 %274, %276*/
		main_filtezexitii_277 = (main_filtezexitii_274 + main_filtezexitii_276);
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %278 = ashr i32 %277, 15*/
		main_filtezexitii_278 = ($signed(main_filtezexitii_277) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %279 = add nsw i32 %278, %272*/
		main_filtezexitii_279 = (main_filtezexitii_278 + main_filtezexitii_272_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %279 = add nsw i32 %278, %272*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		main_filtezexitii_279_reg <= main_filtezexitii_279;
		if (start == 1'b0 && ^(main_filtezexitii_279) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_279_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %280 = lshr i32 %261, 2*/
		main_filtezexitii_280 = (main_258_261_reg >>> (32'd2 % 32));
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %281 = and i32 %280, 15*/
		main_filtezexitii_281 = (main_filtezexitii_280 & 32'd15);
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %282 = getelementptr inbounds [16 x i32]* @qq4_code4_table, i32 0, i32 %281*/
		main_filtezexitii_282 = (`TAG_g_qq4_code4_table_a + (4 * main_filtezexitii_281));
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %283 = load i32* %282, align 4*/
		main_filtezexitii_283 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_filtezexitii_284 = main_filtezexitii_284_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %285 = ashr i32 %284, 15*/
		main_filtezexitii_285 = ($signed(main_filtezexitii_284) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %285 = ashr i32 %284, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_212)) begin
		main_filtezexitii_285_reg <= main_filtezexitii_285;
		if (start == 1'b0 && ^(main_filtezexitii_285) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_285_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %286 = load i32* %255, align 4*/
		main_filtezexitii_286 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_filtezexitii_287 = main_filtezexitii_287_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %288 = ashr i32 %287, 15*/
		main_filtezexitii_288 = ($signed(main_filtezexitii_287) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %289 = add nsw i32 %288, %279*/
		main_filtezexitii_289 = (main_filtezexitii_288 + main_filtezexitii_279_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %289 = add nsw i32 %288, %279*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_212)) begin
		main_filtezexitii_289_reg <= main_filtezexitii_289;
		if (start == 1'b0 && ^(main_filtezexitii_289) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_289_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexitii_290 = main_filtezexitii_290_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %291 = ashr i32 %290, 7*/
		main_filtezexitii_291 = ($signed(main_filtezexitii_290) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %291 = ashr i32 %290, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		main_filtezexitii_291_reg <= main_filtezexitii_291;
		if (start == 1'b0 && ^(main_filtezexitii_291) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_291_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %292 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %281*/
		main_filtezexitii_292 = (`TAG_g_wl_code_table_a + (4 * main_filtezexitii_281));
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %292 = getelementptr inbounds [16 x i32]* @wl_code_table, i32 0, i32 %281*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		main_filtezexitii_292_reg <= main_filtezexitii_292;
		if (start == 1'b0 && ^(main_filtezexitii_292) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_292_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %293 = load i32* %292, align 4*/
		main_filtezexitii_293 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %294 = add nsw i32 %291, %293*/
		main_filtezexitii_294 = (main_filtezexitii_291_reg + main_filtezexitii_293);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %294 = add nsw i32 %291, %293*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_212)) begin
		main_filtezexitii_294_reg <= main_filtezexitii_294;
		if (start == 1'b0 && ^(main_filtezexitii_294) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexitii_294_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit.i.i*/
	/*   %295 = icmp slt i32 %294, 0*/
		main_filtezexitii_295 = ($signed(main_filtezexitii_294) < $signed(32'd0));
end
always @(*) begin
	/* main: %296*/
	/*   %297 = icmp sgt i32 %294, 18432*/
		main_296_297 = ($signed(main_filtezexitii_294_reg) > $signed(32'd18432));
end
always @(*) begin
	/* main: %296*/
	/*   %.490 = select i1 %297, i32 18432, i32 %294*/
		main_296_490 = (main_296_297 ? 32'd18432 : main_filtezexitii_294_reg);
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %.0463 = phi i32 [ 0, %filtez.exit.i.i ], [ %.490, %296 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexitii_212) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexitii_295 == 1'd1))) begin
		main_logsclexitii_0463 = 32'd0;
	end
	/* main: %logscl.exit.i.i*/
	/*   %.0463 = phi i32 [ 0, %filtez.exit.i.i ], [ %.490, %296 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__296_213) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logsclexitii_0463 = main_296_490;
	end
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %.0463 = phi i32 [ 0, %filtez.exit.i.i ], [ %.490, %296 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexitii_212) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexitii_295 == 1'd1))) begin
		main_logsclexitii_0463_reg <= main_logsclexitii_0463;
		if (start == 1'b0 && ^(main_logsclexitii_0463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_0463_reg"); $finish; end
	end
	/* main: %logscl.exit.i.i*/
	/*   %.0463 = phi i32 [ 0, %filtez.exit.i.i ], [ %.490, %296 ]*/
	if (((cur_state == LEGUP_F_main_BB__296_213) & (memory_controller_waitrequest == 1'd0))) begin
		main_logsclexitii_0463_reg <= main_logsclexitii_0463;
		if (start == 1'b0 && ^(main_logsclexitii_0463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_0463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %298 = lshr i32 %.0463, 6*/
		main_logsclexitii_298 = (main_logsclexitii_0463_reg >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %299 = and i32 %298, 31*/
		main_logsclexitii_299 = (main_logsclexitii_298 & 32'd31);
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %300 = ashr i32 %.0463, 11*/
		main_logsclexitii_300 = ($signed(main_logsclexitii_0463_reg) >>> 32'd11);
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %301 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %299*/
		main_logsclexitii_301 = (`TAG_g_ilb_table_a + (4 * main_logsclexitii_299));
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %302 = load i32* %301, align 4*/
		main_logsclexitii_302 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %303 = sub nsw i32 9, %300*/
		main_logsclexitii_303 = (32'd9 - main_logsclexitii_300);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %303 = sub nsw i32 9, %300*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		main_logsclexitii_303_reg <= main_logsclexitii_303;
		if (start == 1'b0 && ^(main_logsclexitii_303) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_303_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %304 = ashr i32 %302, %303*/
		main_logsclexitii_304 = ($signed(main_logsclexitii_302) >>> main_logsclexitii_303_reg);
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %305 = shl i32 %304, 3*/
		main_logsclexitii_305 = (main_logsclexitii_304 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %305 = shl i32 %304, 3*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_216)) begin
		main_logsclexitii_305_reg <= main_logsclexitii_305;
		if (start == 1'b0 && ^(main_logsclexitii_305) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_305_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %306 = add nsw i32 %285, %272*/
		main_logsclexitii_306 = (main_filtezexitii_285_reg + main_filtezexitii_272_reg);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %306 = add nsw i32 %285, %272*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		main_logsclexitii_306_reg <= main_logsclexitii_306;
		if (start == 1'b0 && ^(main_logsclexitii_306) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_306_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logscl.exit.i.i*/
	/*   %307 = icmp eq i32 %285, 0*/
		main_logsclexitii_307 = (main_filtezexitii_285_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logscl.exit.i.i*/
	/*   %307 = icmp eq i32 %285, 0*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		main_logsclexitii_307_reg <= main_logsclexitii_307;
		if (start == 1'b0 && ^(main_logsclexitii_307) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logsclexitii_307_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader38*/
	/*   %308 = phi i32 [ %313, %309 ], [ 0, %.preheader38.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader38preheader_218) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader38_308 = 32'd0;
	end
	/* main: %.preheader38*/
	/*   %308 = phi i32 [ %313, %309 ], [ 0, %.preheader38.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__309_224) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader38_308 = main_309_313_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader38*/
	/*   %308 = phi i32 [ %313, %309 ], [ 0, %.preheader38.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader38preheader_218) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader38_308_reg <= main_preheader38_308;
		if (start == 1'b0 && ^(main_preheader38_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader38_308_reg"); $finish; end
	end
	/* main: %.preheader38*/
	/*   %308 = phi i32 [ %313, %309 ], [ 0, %.preheader38.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__309_224) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader38_308_reg <= main_preheader38_308;
		if (start == 1'b0 && ^(main_preheader38_308) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader38_308_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader38*/
	/*   %scevgep16 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %308*/
		main_preheader38_scevgep16 = (`TAG_g_dec_del_bpl_a + (4 * main_preheader38_308_reg));
end
always @(posedge clk) begin
	/* main: %.preheader38*/
	/*   %scevgep16 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %308*/
	if ((cur_state == LEGUP_F_main_BB_preheader38_219)) begin
		main_preheader38_scevgep16_reg <= main_preheader38_scevgep16;
		if (start == 1'b0 && ^(main_preheader38_scevgep16) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader38_scevgep16_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader38*/
	/*   %exitcond15 = icmp eq i32 %308, 6*/
		main_preheader38_exitcond15 = (main_preheader38_308_reg == 32'd6);
end
always @(*) begin
	/* main: %309*/
	/*   %310 = load i32* %scevgep16, align 4*/
		main_309_310 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_309_311 = main_309_311_stage0_reg;
end
always @(*) begin
	/* main: %309*/
	/*   %312 = ashr i32 %311, 8*/
		main_309_312 = ($signed(main_309_311) >>> 32'd8);
end
always @(*) begin
	/* main: %309*/
	/*   %313 = add nsw i32 %308, 1*/
		main_309_313 = (main_preheader38_308_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %309*/
	/*   %313 = add nsw i32 %308, 1*/
	if ((cur_state == LEGUP_F_main_BB__309_220)) begin
		main_309_313_reg <= main_309_313;
		if (start == 1'b0 && ^(main_309_313) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_309_313_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %314 = phi i32 [ %325, %315 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader39preheader_217) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_314 = 32'd0;
	end
	/* main: %.preheader39*/
	/*   %314 = phi i32 [ %325, %315 ], [ 0, %.preheader39.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__315_230) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader39_314 = main_315_325_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader39*/
	/*   %314 = phi i32 [ %325, %315 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader39preheader_217) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_314_reg <= main_preheader39_314;
		if (start == 1'b0 && ^(main_preheader39_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_314_reg"); $finish; end
	end
	/* main: %.preheader39*/
	/*   %314 = phi i32 [ %325, %315 ], [ 0, %.preheader39.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__315_230) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader39_314_reg <= main_preheader39_314;
		if (start == 1'b0 && ^(main_preheader39_314) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_314_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %scevgep13 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %314*/
		main_preheader39_scevgep13 = (`TAG_g_dec_del_bpl_a + (4 * main_preheader39_314_reg));
end
always @(posedge clk) begin
	/* main: %.preheader39*/
	/*   %scevgep13 = getelementptr [6 x i32]* @dec_del_bpl, i32 0, i32 %314*/
	if ((cur_state == LEGUP_F_main_BB_preheader39_225)) begin
		main_preheader39_scevgep13_reg <= main_preheader39_scevgep13;
		if (start == 1'b0 && ^(main_preheader39_scevgep13) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader39_scevgep13_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader39*/
	/*   %exitcond12 = icmp eq i32 %314, 6*/
		main_preheader39_exitcond12 = (main_preheader39_314_reg == 32'd6);
end
always @(*) begin
	/* main: %315*/
	/*   %scevgep14 = getelementptr [6 x i32]* @dec_del_dltx, i32 0, i32 %314*/
		main_315_scevgep14 = (`TAG_g_dec_del_dltx_a + (4 * main_preheader39_314_reg));
end
always @(*) begin
	/* main: %315*/
	/*   %316 = load i32* %scevgep14, align 4*/
		main_315_316 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_315_317 = main_315_317_stage0_reg;
end
always @(*) begin
	/* main: %315*/
	/*   %318 = ashr i32 %317, 31*/
		main_315_318 = ($signed(main_315_317) >>> 32'd31);
end
always @(*) begin
	/* main: %315*/
	/*   %319 = and i32 %318, -256*/
		main_315_319 = (main_315_318 & -32'd256);
end
always @(*) begin
	/* main: %315*/
	/*   %320 = or i32 %319, 128*/
		main_315_320 = (main_315_319 | 32'd128);
end
always @(*) begin
	/* main: %315*/
	/*   %321 = load i32* %scevgep13, align 4*/
		main_315_321 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_315_322 = main_315_322_stage0_reg;
end
always @(*) begin
	/* main: %315*/
	/*   %323 = ashr i32 %322, 8*/
		main_315_323 = ($signed(main_315_322) >>> 32'd8);
end
always @(*) begin
	/* main: %315*/
	/*   %324 = add nsw i32 %320, %323*/
		main_315_324 = (main_315_320 + main_315_323);
end
always @(*) begin
	/* main: %315*/
	/*   %325 = add nsw i32 %314, 1*/
		main_315_325 = (main_preheader39_314_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %315*/
	/*   %325 = add nsw i32 %314, 1*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		main_315_325_reg <= main_315_325;
		if (start == 1'b0 && ^(main_315_325) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_315_325_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %326 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
		main_upzeroexit18_326 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
		main_upzeroexit18_327 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		main_upzeroexit18_327_reg <= main_upzeroexit18_327;
		if (start == 1'b0 && ^(main_upzeroexit18_327) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_327_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %328 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
		main_upzeroexit18_328 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %329 = shl nsw i32 %dec_al1.0, 2*/
		main_upzeroexit18_329 = (main_256_dec_al10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %329 = shl nsw i32 %dec_al1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		main_upzeroexit18_329_reg <= main_upzeroexit18_329;
		if (start == 1'b0 && ^(main_upzeroexit18_329) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_329_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit18_330 = main_upzeroexit18_330_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %330 = mul nsw i32 %306, %dec_plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		main_upzeroexit18_330_reg <= main_upzeroexit18_330;
		if (start == 1'b0 && ^(main_upzeroexit18_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_330_reg"); $finish; end
	end
	/* main: %upzero.exit18*/
	/*   %330 = mul nsw i32 %306, %dec_plt1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		main_upzeroexit18_330_reg <= main_upzeroexit18_330;
		if (start == 1'b0 && ^(main_upzeroexit18_330) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_330_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %331 = icmp sgt i32 %330, -1*/
		main_upzeroexit18_331 = ($signed(main_upzeroexit18_330) > $signed(-32'd1));
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %332 = sub nsw i32 0, %329*/
		main_upzeroexit18_332 = (32'd0 - main_upzeroexit18_329);
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %332 = sub nsw i32 0, %329*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		main_upzeroexit18_332_reg <= main_upzeroexit18_332;
		if (start == 1'b0 && ^(main_upzeroexit18_332) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_332_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %..i8 = select i1 %331, i32 %332, i32 %329*/
		main_upzeroexit18_i8 = (main_upzeroexit18_331 ? main_upzeroexit18_332_reg : main_upzeroexit18_329_reg);
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %333 = ashr i32 %..i8, 7*/
		main_upzeroexit18_333 = ($signed(main_upzeroexit18_i8) >>> 32'd7);
end
always @(*) begin
	main_upzeroexit18_334 = main_upzeroexit18_334_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %335 = ashr i32 %334, 31*/
		main_upzeroexit18_335 = ($signed(main_upzeroexit18_334) >>> 32'd31);
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %336 = and i32 %335, -256*/
		main_upzeroexit18_336 = (main_upzeroexit18_335 & -32'd256);
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %337 = or i32 %336, 128*/
		main_upzeroexit18_337 = (main_upzeroexit18_336 | 32'd128);
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %wd4.0.i9 = add nsw i32 %333, %337*/
		main_upzeroexit18_wd40i9 = (main_upzeroexit18_333 + main_upzeroexit18_337);
end
always @(*) begin
	main_upzeroexit18_338 = main_upzeroexit18_338_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %339 = ashr i32 %338, 7*/
		main_upzeroexit18_339 = ($signed(main_upzeroexit18_338) >>> 32'd7);
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %340 = add nsw i32 %wd4.0.i9, %339*/
		main_upzeroexit18_340 = (main_upzeroexit18_wd40i9 + main_upzeroexit18_339);
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %340 = add nsw i32 %wd4.0.i9, %339*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		main_upzeroexit18_340_reg <= main_upzeroexit18_340;
		if (start == 1'b0 && ^(main_upzeroexit18_340) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_340_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit18*/
	/*   %341 = icmp sgt i32 %340, 12288*/
		main_upzeroexit18_341 = ($signed(main_upzeroexit18_340) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %341 = icmp sgt i32 %340, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		main_upzeroexit18_341_reg <= main_upzeroexit18_341;
		if (start == 1'b0 && ^(main_upzeroexit18_341) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit18_341_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %342*/
	/*   %343 = icmp slt i32 %340, -12288*/
		main_342_343 = ($signed(main_upzeroexit18_340_reg) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %342*/
	/*   %.9.i10 = select i1 %343, i32 -12288, i32 %340*/
		main_342_9i10 = (main_342_343 ? -32'd12288 : main_upzeroexit18_340_reg);
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %344 = phi i32 [ %.9.i10, %342 ], [ 12288, %upzero.exit18 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit18_237) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit18_341_reg == 1'd1))) begin
		main_uppol2exit12_344 = 32'd12288;
	end
	/* main: %uppol2.exit12*/
	/*   %344 = phi i32 [ %.9.i10, %342 ], [ 12288, %upzero.exit18 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__342_238) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exit12_344 = main_342_9i10;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %344 = phi i32 [ %.9.i10, %342 ], [ 12288, %upzero.exit18 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit18_237) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit18_341_reg == 1'd1))) begin
		main_uppol2exit12_344_reg <= main_uppol2exit12_344;
		if (start == 1'b0 && ^(main_uppol2exit12_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_344_reg"); $finish; end
	end
	/* main: %uppol2.exit12*/
	/*   %344 = phi i32 [ %.9.i10, %342 ], [ 12288, %upzero.exit18 ]*/
	if (((cur_state == LEGUP_F_main_BB__342_238) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exit12_344_reg <= main_uppol2exit12_344;
		if (start == 1'b0 && ^(main_uppol2exit12_344) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_344_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit12_345 = main_uppol2exit12_345_stage0_reg;
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %346 = ashr i32 %345, 8*/
		main_uppol2exit12_346 = ($signed(main_uppol2exit12_345) >>> 32'd8);
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %347 = ashr i32 %330, 31*/
		main_uppol2exit12_347 = ($signed(main_upzeroexit18_330_reg) >>> 32'd31);
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %348 = and i32 %347, -384*/
		main_uppol2exit12_348 = (main_uppol2exit12_347 & -32'd384);
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %349 = add nsw i32 %348, 192*/
		main_uppol2exit12_349 = (main_uppol2exit12_348 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %349 = add nsw i32 %348, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		main_uppol2exit12_349_reg <= main_uppol2exit12_349;
		if (start == 1'b0 && ^(main_uppol2exit12_349) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_349_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %apl1.i11.i.i.0 = add nsw i32 %346, %349*/
		main_uppol2exit12_apl1i11ii0 = (main_uppol2exit12_346 + main_uppol2exit12_349_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %apl1.i11.i.i.0 = add nsw i32 %346, %349*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_240)) begin
		main_uppol2exit12_apl1i11ii0_reg <= main_uppol2exit12_apl1i11ii0;
		if (start == 1'b0 && ^(main_uppol2exit12_apl1i11ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_apl1i11ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %350 = sub nsw i32 15360, %344*/
		main_uppol2exit12_350 = (32'd15360 - main_uppol2exit12_344_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %350 = sub nsw i32 15360, %344*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		main_uppol2exit12_350_reg <= main_uppol2exit12_350;
		if (start == 1'b0 && ^(main_uppol2exit12_350) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_350_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %351 = icmp sgt i32 %apl1.i11.i.i.0, %350*/
		main_uppol2exit12_351 = ($signed(main_uppol2exit12_apl1i11ii0) > $signed(main_uppol2exit12_350_reg));
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %351 = icmp sgt i32 %apl1.i11.i.i.0, %350*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_240)) begin
		main_uppol2exit12_351_reg <= main_uppol2exit12_351;
		if (start == 1'b0 && ^(main_uppol2exit12_351) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_351_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
		main_uppol2exit12_352 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
		main_uppol2exit12_353 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_241)) begin
		main_uppol2exit12_353_reg <= main_uppol2exit12_353;
		if (start == 1'b0 && ^(main_uppol2exit12_353) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit12_353_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit12_354 = main_uppol2exit12_354_stage0_reg;
end
always @(*) begin
	/* main: %355*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %356 ], [ 0, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit12_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_indvar17 = 32'd0;
	end
	/* main: %355*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %356 ], [ 0, %uppol2.exit12 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__356_247) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_355_indvar17 = main_356_indvarnext18_reg;
	end
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %356 ], [ 0, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit12_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_indvar17_reg <= main_355_indvar17;
		if (start == 1'b0 && ^(main_355_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_indvar17_reg"); $finish; end
	end
	/* main: %355*/
	/*   %indvar17 = phi i32 [ %indvar.next18, %356 ], [ 0, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB__356_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_indvar17_reg <= main_355_indvar17;
		if (start == 1'b0 && ^(main_355_indvar17) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_indvar17_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %zl.i7.i.i.0 = phi i32 [ %360, %356 ], [ %354, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit12_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_zli7ii0 = main_uppol2exit12_354;
	end
	/* main: %355*/
	/*   %zl.i7.i.i.0 = phi i32 [ %360, %356 ], [ %354, %uppol2.exit12 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__356_247) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_355_zli7ii0 = main_356_360;
	end
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %zl.i7.i.i.0 = phi i32 [ %360, %356 ], [ %354, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit12_242) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_zli7ii0_reg <= main_355_zli7ii0;
		if (start == 1'b0 && ^(main_355_zli7ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_zli7ii0_reg"); $finish; end
	end
	/* main: %355*/
	/*   %zl.i7.i.i.0 = phi i32 [ %360, %356 ], [ %354, %uppol2.exit12 ]*/
	if (((cur_state == LEGUP_F_main_BB__356_247) & (memory_controller_waitrequest == 1'd0))) begin
		main_355_zli7ii0_reg <= main_355_zli7ii0;
		if (start == 1'b0 && ^(main_355_zli7ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_zli7ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %i.i6.i.i.0 = add i32 %indvar17, 1*/
		main_355_ii6ii0 = (main_355_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %355*/
	/*   %i.i6.i.i.0 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB__355_243)) begin
		main_355_ii6ii0_reg <= main_355_ii6ii0;
		if (start == 1'b0 && ^(main_355_ii6ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_355_ii6ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %355*/
	/*   %exitcond19 = icmp eq i32 %indvar17, 5*/
		main_355_exitcond19 = (main_355_indvar17_reg == 32'd5);
end
always @(*) begin
	/* main: %356*/
	/*   %.0465 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %i.i6.i.i.0*/
		main_356_0465 = (`TAG_g_dec_del_dhx_a + (4 * main_355_ii6ii0_reg));
end
always @(*) begin
	/* main: %356*/
	/*   %.0466 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %i.i6.i.i.0*/
		main_356_0466 = (`TAG_g_dec_del_bph_a + (4 * main_355_ii6ii0_reg));
end
always @(*) begin
	/* main: %356*/
	/*   %357 = load i32* %.0466, align 4*/
		main_356_357 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %356*/
	/*   %358 = load i32* %.0465, align 4*/
		main_356_358 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_356_359 = main_356_359_stage0_reg;
end
always @(*) begin
	/* main: %356*/
	/*   %360 = add nsw i32 %zl.i7.i.i.0, %359*/
		main_356_360 = (main_355_zli7ii0_reg + main_356_359);
end
always @(*) begin
	/* main: %356*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
		main_356_indvarnext18 = (main_355_indvar17_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %indvar.next18 = add i32 %indvar17, 1*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		main_356_indvarnext18_reg <= main_356_indvarnext18;
		if (start == 1'b0 && ^(main_356_indvarnext18) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_356_indvarnext18_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %361 = sub nsw i32 0, %350*/
		main_filtezexit8ii_361 = (32'd0 - main_uppol2exit12_350_reg);
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %.apl1.i11.i.i.0 = select i1 %351, i32 %350, i32 %apl1.i11.i.i.0*/
		main_filtezexit8ii_apl1i11ii0 = (main_uppol2exit12_351_reg ? main_uppol2exit12_350_reg : main_uppol2exit12_apl1i11ii0_reg);
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %362 = icmp slt i32 %.apl1.i11.i.i.0, %361*/
		main_filtezexit8ii_362 = ($signed(main_filtezexit8ii_apl1i11ii0) < $signed(main_filtezexit8ii_361));
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %apl1.i11.i.i.2 = select i1 %362, i32 %361, i32 %.apl1.i11.i.i.0*/
		main_filtezexit8ii_apl1i11ii2 = (main_filtezexit8ii_362 ? main_filtezexit8ii_361 : main_filtezexit8ii_apl1i11ii0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %apl1.i11.i.i.2 = select i1 %362, i32 %361, i32 %.apl1.i11.i.i.0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		main_filtezexit8ii_apl1i11ii2_reg <= main_filtezexit8ii_apl1i11ii2;
		if (start == 1'b0 && ^(main_filtezexit8ii_apl1i11ii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_apl1i11ii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %363 = add nsw i32 %279, %285*/
		main_filtezexit8ii_363 = (main_filtezexitii_279_reg + main_filtezexitii_285_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %363 = add nsw i32 %279, %285*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		main_filtezexit8ii_363_reg <= main_filtezexit8ii_363;
		if (start == 1'b0 && ^(main_filtezexit8ii_363) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_363_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %364 = ashr i32 %zl.i7.i.i.0, 14*/
		main_filtezexit8ii_364 = ($signed(main_355_zli7ii0_reg) >>> 32'd14);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %364 = ashr i32 %zl.i7.i.i.0, 14*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		main_filtezexit8ii_364_reg <= main_filtezexit8ii_364;
		if (start == 1'b0 && ^(main_filtezexit8ii_364) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_364_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %365 = shl nsw i32 %dec_rh1.0, 1*/
		main_filtezexit8ii_365 = (main_256_dec_rh10_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexit8ii_366 = main_filtezexit8ii_366_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %367 = shl nsw i32 %dec_rh2.0, 1*/
		main_filtezexit8ii_367 = (main_256_dec_rh20_reg <<< (32'd1 % 32));
end
always @(*) begin
	main_filtezexit8ii_368 = main_filtezexit8ii_368_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %369 = add nsw i32 %366, %368*/
		main_filtezexit8ii_369 = (main_filtezexit8ii_366 + main_filtezexit8ii_368);
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %370 = ashr i32 %369, 15*/
		main_filtezexit8ii_370 = ($signed(main_filtezexit8ii_369) >>> 32'd15);
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %371 = add nsw i32 %370, %364*/
		main_filtezexit8ii_371 = (main_filtezexit8ii_370 + main_filtezexit8ii_364_reg);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %371 = add nsw i32 %370, %364*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_249)) begin
		main_filtezexit8ii_371_reg <= main_filtezexit8ii_371;
		if (start == 1'b0 && ^(main_filtezexit8ii_371) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_371_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %372 = getelementptr inbounds [4 x i32]* @qq2_code2_table, i32 0, i32 %271*/
		main_filtezexit8ii_372 = (`TAG_g_qq2_code2_table_a + (4 * main_filtezexitii_271_reg));
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %373 = load i32* %372, align 4*/
		main_filtezexit8ii_373 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_filtezexit8ii_374 = main_filtezexit8ii_374_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %375 = ashr i32 %374, 15*/
		main_filtezexit8ii_375 = ($signed(main_filtezexit8ii_374) >>> 32'd15);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %375 = ashr i32 %374, 15*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_251)) begin
		main_filtezexit8ii_375_reg <= main_filtezexit8ii_375;
		if (start == 1'b0 && ^(main_filtezexit8ii_375) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_375_reg"); $finish; end
	end
end
always @(*) begin
	main_filtezexit8ii_376 = main_filtezexit8ii_376_stage0_reg;
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %377 = ashr i32 %376, 7*/
		main_filtezexit8ii_377 = ($signed(main_filtezexit8ii_376) >>> 32'd7);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %377 = ashr i32 %376, 7*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_249)) begin
		main_filtezexit8ii_377_reg <= main_filtezexit8ii_377;
		if (start == 1'b0 && ^(main_filtezexit8ii_377) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_377_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %378 = getelementptr inbounds [4 x i32]* @wh_code_table, i32 0, i32 %271*/
		main_filtezexit8ii_378 = (`TAG_g_wh_code_table_a + (4 * main_filtezexitii_271_reg));
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %379 = load i32* %378, align 4*/
		main_filtezexit8ii_379 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %380 = add nsw i32 %377, %379*/
		main_filtezexit8ii_380 = (main_filtezexit8ii_377_reg + main_filtezexit8ii_379);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %380 = add nsw i32 %377, %379*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_250)) begin
		main_filtezexit8ii_380_reg <= main_filtezexit8ii_380;
		if (start == 1'b0 && ^(main_filtezexit8ii_380) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_380_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %filtez.exit8.i.i*/
	/*   %381 = icmp slt i32 %380, 0*/
		main_filtezexit8ii_381 = ($signed(main_filtezexit8ii_380) < $signed(32'd0));
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %381 = icmp slt i32 %380, 0*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_250)) begin
		main_filtezexit8ii_381_reg <= main_filtezexit8ii_381;
		if (start == 1'b0 && ^(main_filtezexit8ii_381) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_filtezexit8ii_381_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %382*/
	/*   %383 = icmp sgt i32 %380, 22528*/
		main_382_383 = ($signed(main_filtezexit8ii_380_reg) > $signed(32'd22528));
end
always @(*) begin
	/* main: %382*/
	/*   %.491 = select i1 %383, i32 22528, i32 %380*/
		main_382_491 = (main_382_383 ? 32'd22528 : main_filtezexit8ii_380_reg);
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %.0464 = phi i32 [ 0, %filtez.exit8.i.i ], [ %.491, %382 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8ii_251) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8ii_381_reg == 1'd1))) begin
		main_logschexitii_0464 = 32'd0;
	end
	/* main: %logsch.exit.i.i*/
	/*   %.0464 = phi i32 [ 0, %filtez.exit8.i.i ], [ %.491, %382 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__382_252) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_logschexitii_0464 = main_382_491;
	end
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %.0464 = phi i32 [ 0, %filtez.exit8.i.i ], [ %.491, %382 ]*/
	if ((((cur_state == LEGUP_F_main_BB_filtezexit8ii_251) & (memory_controller_waitrequest == 1'd0)) & (main_filtezexit8ii_381_reg == 1'd1))) begin
		main_logschexitii_0464_reg <= main_logschexitii_0464;
		if (start == 1'b0 && ^(main_logschexitii_0464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_0464_reg"); $finish; end
	end
	/* main: %logsch.exit.i.i*/
	/*   %.0464 = phi i32 [ 0, %filtez.exit8.i.i ], [ %.491, %382 ]*/
	if (((cur_state == LEGUP_F_main_BB__382_252) & (memory_controller_waitrequest == 1'd0))) begin
		main_logschexitii_0464_reg <= main_logschexitii_0464;
		if (start == 1'b0 && ^(main_logschexitii_0464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_0464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %384 = lshr i32 %.0464, 6*/
		main_logschexitii_384 = (main_logschexitii_0464_reg >>> (32'd6 % 32));
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %385 = and i32 %384, 31*/
		main_logschexitii_385 = (main_logschexitii_384 & 32'd31);
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %386 = ashr i32 %.0464, 11*/
		main_logschexitii_386 = ($signed(main_logschexitii_0464_reg) >>> 32'd11);
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %387 = getelementptr inbounds [32 x i32]* @ilb_table, i32 0, i32 %385*/
		main_logschexitii_387 = (`TAG_g_ilb_table_a + (4 * main_logschexitii_385));
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %388 = load i32* %387, align 4*/
		main_logschexitii_388 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %389 = sub nsw i32 11, %386*/
		main_logschexitii_389 = (32'd11 - main_logschexitii_386);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %389 = sub nsw i32 11, %386*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		main_logschexitii_389_reg <= main_logschexitii_389;
		if (start == 1'b0 && ^(main_logschexitii_389) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_389_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %390 = ashr i32 %388, %389*/
		main_logschexitii_390 = ($signed(main_logschexitii_388) >>> main_logschexitii_389_reg);
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %391 = shl i32 %390, 3*/
		main_logschexitii_391 = (main_logschexitii_390 <<< (32'd3 % 32));
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %391 = shl i32 %390, 3*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_255)) begin
		main_logschexitii_391_reg <= main_logschexitii_391;
		if (start == 1'b0 && ^(main_logschexitii_391) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_391_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %392 = add nsw i32 %375, %364*/
		main_logschexitii_392 = (main_filtezexit8ii_375_reg + main_filtezexit8ii_364_reg);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %392 = add nsw i32 %375, %364*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		main_logschexitii_392_reg <= main_logschexitii_392;
		if (start == 1'b0 && ^(main_logschexitii_392) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_392_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %logsch.exit.i.i*/
	/*   %393 = icmp eq i32 %375, 0*/
		main_logschexitii_393 = (main_filtezexit8ii_375_reg == 32'd0);
end
always @(posedge clk) begin
	/* main: %logsch.exit.i.i*/
	/*   %393 = icmp eq i32 %375, 0*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		main_logschexitii_393_reg <= main_logschexitii_393;
		if (start == 1'b0 && ^(main_logschexitii_393) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_logschexitii_393_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader35*/
	/*   %394 = phi i32 [ %399, %395 ], [ 0, %.preheader35.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader35preheader_257) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader35_394 = 32'd0;
	end
	/* main: %.preheader35*/
	/*   %394 = phi i32 [ %399, %395 ], [ 0, %.preheader35.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__395_263) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader35_394 = main_395_399_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader35*/
	/*   %394 = phi i32 [ %399, %395 ], [ 0, %.preheader35.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader35preheader_257) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader35_394_reg <= main_preheader35_394;
		if (start == 1'b0 && ^(main_preheader35_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader35_394_reg"); $finish; end
	end
	/* main: %.preheader35*/
	/*   %394 = phi i32 [ %399, %395 ], [ 0, %.preheader35.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__395_263) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader35_394_reg <= main_preheader35_394;
		if (start == 1'b0 && ^(main_preheader35_394) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader35_394_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader35*/
	/*   %scevgep26 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %394*/
		main_preheader35_scevgep26 = (`TAG_g_dec_del_bph_a + (4 * main_preheader35_394_reg));
end
always @(posedge clk) begin
	/* main: %.preheader35*/
	/*   %scevgep26 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %394*/
	if ((cur_state == LEGUP_F_main_BB_preheader35_258)) begin
		main_preheader35_scevgep26_reg <= main_preheader35_scevgep26;
		if (start == 1'b0 && ^(main_preheader35_scevgep26) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader35_scevgep26_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader35*/
	/*   %exitcond25 = icmp eq i32 %394, 6*/
		main_preheader35_exitcond25 = (main_preheader35_394_reg == 32'd6);
end
always @(*) begin
	/* main: %395*/
	/*   %396 = load i32* %scevgep26, align 4*/
		main_395_396 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_395_397 = main_395_397_stage0_reg;
end
always @(*) begin
	/* main: %395*/
	/*   %398 = ashr i32 %397, 8*/
		main_395_398 = ($signed(main_395_397) >>> 32'd8);
end
always @(*) begin
	/* main: %395*/
	/*   %399 = add nsw i32 %394, 1*/
		main_395_399 = (main_preheader35_394_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %395*/
	/*   %399 = add nsw i32 %394, 1*/
	if ((cur_state == LEGUP_F_main_BB__395_259)) begin
		main_395_399_reg <= main_395_399;
		if (start == 1'b0 && ^(main_395_399) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_395_399_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %400 = phi i32 [ %411, %401 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader36preheader_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_400 = 32'd0;
	end
	/* main: %.preheader36*/
	/*   %400 = phi i32 [ %411, %401 ], [ 0, %.preheader36.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__401_269) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader36_400 = main_401_411_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader36*/
	/*   %400 = phi i32 [ %411, %401 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheader36preheader_256) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_400_reg <= main_preheader36_400;
		if (start == 1'b0 && ^(main_preheader36_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_400_reg"); $finish; end
	end
	/* main: %.preheader36*/
	/*   %400 = phi i32 [ %411, %401 ], [ 0, %.preheader36.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__401_269) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader36_400_reg <= main_preheader36_400;
		if (start == 1'b0 && ^(main_preheader36_400) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_400_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %scevgep23 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %400*/
		main_preheader36_scevgep23 = (`TAG_g_dec_del_bph_a + (4 * main_preheader36_400_reg));
end
always @(posedge clk) begin
	/* main: %.preheader36*/
	/*   %scevgep23 = getelementptr [6 x i32]* @dec_del_bph, i32 0, i32 %400*/
	if ((cur_state == LEGUP_F_main_BB_preheader36_264)) begin
		main_preheader36_scevgep23_reg <= main_preheader36_scevgep23;
		if (start == 1'b0 && ^(main_preheader36_scevgep23) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader36_scevgep23_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader36*/
	/*   %exitcond22 = icmp eq i32 %400, 6*/
		main_preheader36_exitcond22 = (main_preheader36_400_reg == 32'd6);
end
always @(*) begin
	/* main: %401*/
	/*   %scevgep24 = getelementptr [6 x i32]* @dec_del_dhx, i32 0, i32 %400*/
		main_401_scevgep24 = (`TAG_g_dec_del_dhx_a + (4 * main_preheader36_400_reg));
end
always @(*) begin
	/* main: %401*/
	/*   %402 = load i32* %scevgep24, align 4*/
		main_401_402 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_401_403 = main_401_403_stage0_reg;
end
always @(*) begin
	/* main: %401*/
	/*   %404 = ashr i32 %403, 31*/
		main_401_404 = ($signed(main_401_403) >>> 32'd31);
end
always @(*) begin
	/* main: %401*/
	/*   %405 = and i32 %404, -256*/
		main_401_405 = (main_401_404 & -32'd256);
end
always @(*) begin
	/* main: %401*/
	/*   %406 = or i32 %405, 128*/
		main_401_406 = (main_401_405 | 32'd128);
end
always @(*) begin
	/* main: %401*/
	/*   %407 = load i32* %scevgep23, align 4*/
		main_401_407 = memory_controller_out_b[31:0];
end
always @(*) begin
	main_401_408 = main_401_408_stage0_reg;
end
always @(*) begin
	/* main: %401*/
	/*   %409 = ashr i32 %408, 8*/
		main_401_409 = ($signed(main_401_408) >>> 32'd8);
end
always @(*) begin
	/* main: %401*/
	/*   %410 = add nsw i32 %406, %409*/
		main_401_410 = (main_401_406 + main_401_409);
end
always @(*) begin
	/* main: %401*/
	/*   %411 = add nsw i32 %400, 1*/
		main_401_411 = (main_preheader36_400_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %411 = add nsw i32 %400, 1*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		main_401_411_reg <= main_401_411;
		if (start == 1'b0 && ^(main_401_411) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_401_411_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
		main_upzeroexit7_412 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
		main_upzeroexit7_413 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		main_upzeroexit7_413_reg <= main_upzeroexit7_413;
		if (start == 1'b0 && ^(main_upzeroexit7_413) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_413_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %414 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
		main_upzeroexit7_414 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %415 = shl nsw i32 %dec_ah1.0, 2*/
		main_upzeroexit7_415 = (main_256_dec_ah10_reg <<< (32'd2 % 32));
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %415 = shl nsw i32 %dec_ah1.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		main_upzeroexit7_415_reg <= main_upzeroexit7_415;
		if (start == 1'b0 && ^(main_upzeroexit7_415) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_415_reg"); $finish; end
	end
end
always @(*) begin
	main_upzeroexit7_416 = main_upzeroexit7_416_stage0_reg;
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %416 = mul nsw i32 %392, %dec_ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		main_upzeroexit7_416_reg <= main_upzeroexit7_416;
		if (start == 1'b0 && ^(main_upzeroexit7_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_416_reg"); $finish; end
	end
	/* main: %upzero.exit7*/
	/*   %416 = mul nsw i32 %392, %dec_ph1.0*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		main_upzeroexit7_416_reg <= main_upzeroexit7_416;
		if (start == 1'b0 && ^(main_upzeroexit7_416) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_416_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %417 = icmp sgt i32 %416, -1*/
		main_upzeroexit7_417 = ($signed(main_upzeroexit7_416) > $signed(-32'd1));
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %418 = sub nsw i32 0, %415*/
		main_upzeroexit7_418 = (32'd0 - main_upzeroexit7_415);
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %418 = sub nsw i32 0, %415*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		main_upzeroexit7_418_reg <= main_upzeroexit7_418;
		if (start == 1'b0 && ^(main_upzeroexit7_418) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_418_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %..i1 = select i1 %417, i32 %418, i32 %415*/
		main_upzeroexit7_i1 = (main_upzeroexit7_417 ? main_upzeroexit7_418_reg : main_upzeroexit7_415_reg);
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %419 = ashr i32 %..i1, 7*/
		main_upzeroexit7_419 = ($signed(main_upzeroexit7_i1) >>> 32'd7);
end
always @(*) begin
	main_upzeroexit7_420 = main_upzeroexit7_420_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %421 = ashr i32 %420, 31*/
		main_upzeroexit7_421 = ($signed(main_upzeroexit7_420) >>> 32'd31);
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %422 = and i32 %421, -256*/
		main_upzeroexit7_422 = (main_upzeroexit7_421 & -32'd256);
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %423 = or i32 %422, 128*/
		main_upzeroexit7_423 = (main_upzeroexit7_422 | 32'd128);
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %wd4.0.i = add nsw i32 %419, %423*/
		main_upzeroexit7_wd40i = (main_upzeroexit7_419 + main_upzeroexit7_423);
end
always @(*) begin
	main_upzeroexit7_424 = main_upzeroexit7_424_stage0_reg;
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %425 = ashr i32 %424, 7*/
		main_upzeroexit7_425 = ($signed(main_upzeroexit7_424) >>> 32'd7);
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %426 = add nsw i32 %wd4.0.i, %425*/
		main_upzeroexit7_426 = (main_upzeroexit7_wd40i + main_upzeroexit7_425);
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %426 = add nsw i32 %wd4.0.i, %425*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		main_upzeroexit7_426_reg <= main_upzeroexit7_426;
		if (start == 1'b0 && ^(main_upzeroexit7_426) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_426_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %upzero.exit7*/
	/*   %427 = icmp sgt i32 %426, 12288*/
		main_upzeroexit7_427 = ($signed(main_upzeroexit7_426) > $signed(32'd12288));
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %427 = icmp sgt i32 %426, 12288*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		main_upzeroexit7_427_reg <= main_upzeroexit7_427;
		if (start == 1'b0 && ^(main_upzeroexit7_427) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_upzeroexit7_427_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %428*/
	/*   %429 = icmp slt i32 %426, -12288*/
		main_428_429 = ($signed(main_upzeroexit7_426_reg) < $signed(-32'd12288));
end
always @(*) begin
	/* main: %428*/
	/*   %.9.i = select i1 %429, i32 -12288, i32 %426*/
		main_428_9i = (main_428_429 ? -32'd12288 : main_upzeroexit7_426_reg);
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %430 = phi i32 [ %.9.i, %428 ], [ 12288, %upzero.exit7 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit7_276) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit7_427_reg == 1'd1))) begin
		main_uppol2exit_430 = 32'd12288;
	end
	/* main: %uppol2.exit*/
	/*   %430 = phi i32 [ %.9.i, %428 ], [ 12288, %upzero.exit7 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__428_277) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_uppol2exit_430 = main_428_9i;
	end
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %430 = phi i32 [ %.9.i, %428 ], [ 12288, %upzero.exit7 ]*/
	if ((((cur_state == LEGUP_F_main_BB_upzeroexit7_276) & (memory_controller_waitrequest == 1'd0)) & (main_upzeroexit7_427_reg == 1'd1))) begin
		main_uppol2exit_430_reg <= main_uppol2exit_430;
		if (start == 1'b0 && ^(main_uppol2exit_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_430_reg"); $finish; end
	end
	/* main: %uppol2.exit*/
	/*   %430 = phi i32 [ %.9.i, %428 ], [ 12288, %upzero.exit7 ]*/
	if (((cur_state == LEGUP_F_main_BB__428_277) & (memory_controller_waitrequest == 1'd0))) begin
		main_uppol2exit_430_reg <= main_uppol2exit_430;
		if (start == 1'b0 && ^(main_uppol2exit_430) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_430_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit_431 = main_uppol2exit_431_stage0_reg;
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %432 = ashr i32 %431, 8*/
		main_uppol2exit_432 = ($signed(main_uppol2exit_431) >>> 32'd8);
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %433 = ashr i32 %416, 31*/
		main_uppol2exit_433 = ($signed(main_upzeroexit7_416_reg) >>> 32'd31);
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %434 = and i32 %433, -384*/
		main_uppol2exit_434 = (main_uppol2exit_433 & -32'd384);
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %435 = add nsw i32 %434, 192*/
		main_uppol2exit_435 = (main_uppol2exit_434 + 32'd192);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %435 = add nsw i32 %434, 192*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_278)) begin
		main_uppol2exit_435_reg <= main_uppol2exit_435;
		if (start == 1'b0 && ^(main_uppol2exit_435) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_435_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %apl1.i.i.i.0 = add nsw i32 %432, %435*/
		main_uppol2exit_apl1iii0 = (main_uppol2exit_432 + main_uppol2exit_435_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %apl1.i.i.i.0 = add nsw i32 %432, %435*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_279)) begin
		main_uppol2exit_apl1iii0_reg <= main_uppol2exit_apl1iii0;
		if (start == 1'b0 && ^(main_uppol2exit_apl1iii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_apl1iii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %436 = sub nsw i32 15360, %430*/
		main_uppol2exit_436 = (32'd15360 - main_uppol2exit_430_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %436 = sub nsw i32 15360, %430*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_278)) begin
		main_uppol2exit_436_reg <= main_uppol2exit_436;
		if (start == 1'b0 && ^(main_uppol2exit_436) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_436_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %437 = icmp sgt i32 %apl1.i.i.i.0, %436*/
		main_uppol2exit_437 = ($signed(main_uppol2exit_apl1iii0) > $signed(main_uppol2exit_436_reg));
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %437 = icmp sgt i32 %apl1.i.i.i.0, %436*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_279)) begin
		main_uppol2exit_437_reg <= main_uppol2exit_437;
		if (start == 1'b0 && ^(main_uppol2exit_437) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_437_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %438 = add nsw i32 %371, %375*/
		main_uppol2exit_438 = (main_filtezexit8ii_371_reg + main_filtezexit8ii_375_reg);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %438 = add nsw i32 %371, %375*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_278)) begin
		main_uppol2exit_438_reg <= main_uppol2exit_438;
		if (start == 1'b0 && ^(main_uppol2exit_438) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_438_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %439 = sub nsw i32 %289, %438*/
		main_uppol2exit_439 = (main_filtezexitii_289_reg - main_uppol2exit_438);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %439 = sub nsw i32 %289, %438*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_278)) begin
		main_uppol2exit_439_reg <= main_uppol2exit_439;
		if (start == 1'b0 && ^(main_uppol2exit_439) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_439_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %uppol2.exit*/
	/*   %440 = add nsw i32 %289, %438*/
		main_uppol2exit_440 = (main_filtezexitii_289_reg + main_uppol2exit_438);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %440 = add nsw i32 %289, %438*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit_278)) begin
		main_uppol2exit_440_reg <= main_uppol2exit_440;
		if (start == 1'b0 && ^(main_uppol2exit_440) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_uppol2exit_440_reg"); $finish; end
	end
end
always @(*) begin
	main_uppol2exit_441 = main_uppol2exit_441_stage0_reg;
end
always @(*) begin
	main_uppol2exit_442 = main_uppol2exit_442_stage0_reg;
end
always @(*) begin
	/* main: %443*/
	/*   %444 = phi i32 [ 0, %uppol2.exit ], [ %457, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_444 = 32'd0;
	end
	/* main: %443*/
	/*   %444 = phi i32 [ 0, %uppol2.exit ], [ %457, %446 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_443_444 = main_446_457_reg;
	end
end
always @(posedge clk) begin
	/* main: %443*/
	/*   %444 = phi i32 [ 0, %uppol2.exit ], [ %457, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_444_reg <= main_443_444;
		if (start == 1'b0 && ^(main_443_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_444_reg"); $finish; end
	end
	/* main: %443*/
	/*   %444 = phi i32 [ 0, %uppol2.exit ], [ %457, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_444_reg <= main_443_444;
		if (start == 1'b0 && ^(main_443_444) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_444_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %443*/
	/*   %xa1.i.i.0 = phi i32 [ %441, %uppol2.exit ], [ %452, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa1ii0 = main_uppol2exit_441;
	end
	/* main: %443*/
	/*   %xa1.i.i.0 = phi i32 [ %441, %uppol2.exit ], [ %452, %446 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_443_xa1ii0 = main_446_452_reg;
	end
end
always @(posedge clk) begin
	/* main: %443*/
	/*   %xa1.i.i.0 = phi i32 [ %441, %uppol2.exit ], [ %452, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa1ii0_reg <= main_443_xa1ii0;
		if (start == 1'b0 && ^(main_443_xa1ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_xa1ii0_reg"); $finish; end
	end
	/* main: %443*/
	/*   %xa1.i.i.0 = phi i32 [ %441, %uppol2.exit ], [ %452, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa1ii0_reg <= main_443_xa1ii0;
		if (start == 1'b0 && ^(main_443_xa1ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_xa1ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %443*/
	/*   %xa2.i.i.0 = phi i32 [ %442, %uppol2.exit ], [ %456, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa2ii0 = main_uppol2exit_442;
	end
	/* main: %443*/
	/*   %xa2.i.i.0 = phi i32 [ %442, %uppol2.exit ], [ %456, %446 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_443_xa2ii0 = main_446_456;
	end
end
always @(posedge clk) begin
	/* main: %443*/
	/*   %xa2.i.i.0 = phi i32 [ %442, %uppol2.exit ], [ %456, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB_uppol2exit_279) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa2ii0_reg <= main_443_xa2ii0;
		if (start == 1'b0 && ^(main_443_xa2ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_xa2ii0_reg"); $finish; end
	end
	/* main: %443*/
	/*   %xa2.i.i.0 = phi i32 [ %442, %uppol2.exit ], [ %456, %446 ]*/
	if (((cur_state == LEGUP_F_main_BB__446_286) & (memory_controller_waitrequest == 1'd0))) begin
		main_443_xa2ii0_reg <= main_443_xa2ii0;
		if (start == 1'b0 && ^(main_443_xa2ii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_xa2ii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %443*/
	/*   %445 = shl i32 %444, 1*/
		main_443_445 = (main_443_444_reg <<< (32'd1 % 32));
end
always @(posedge clk) begin
	/* main: %443*/
	/*   %445 = shl i32 %444, 1*/
	if ((cur_state == LEGUP_F_main_BB__443_280)) begin
		main_443_445_reg <= main_443_445;
		if (start == 1'b0 && ^(main_443_445) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_443_445_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %443*/
	/*   %exitcond27 = icmp eq i32 %444, 10*/
		main_443_exitcond27 = (main_443_444_reg == 32'd10);
end
always @(*) begin
	/* main: %446*/
	/*   %ad_ptr.i.i.0 = getelementptr [11 x i32]* @accumd, i32 0, i32 %444*/
		main_446_ad_ptrii0 = (`TAG_g_accumd_a + (4 * main_443_444_reg));
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %ad_ptr.i.i.0 = getelementptr [11 x i32]* @accumd, i32 0, i32 %444*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		main_446_ad_ptrii0_reg <= main_446_ad_ptrii0;
		if (start == 1'b0 && ^(main_446_ad_ptrii0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_ad_ptrii0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %ac_ptr.i.i.0 = getelementptr [11 x i32]* @accumc, i32 0, i32 %444*/
		main_446_ac_ptrii0 = (`TAG_g_accumc_a + (4 * main_443_444_reg));
end
always @(*) begin
	/* main: %446*/
	/*   %447 = add i32 %445, 3*/
		main_446_447 = (main_443_445_reg + 32'd3);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %447 = add i32 %445, 3*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		main_446_447_reg <= main_446_447;
		if (start == 1'b0 && ^(main_446_447) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_447_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %scevgep29 = getelementptr [24 x i32]* @h, i32 0, i32 %447*/
		main_446_scevgep29 = (`TAG_g_h_a + (4 * main_446_447_reg));
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %scevgep29 = getelementptr [24 x i32]* @h, i32 0, i32 %447*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		main_446_scevgep29_reg <= main_446_scevgep29;
		if (start == 1'b0 && ^(main_446_scevgep29) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_scevgep29_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %448 = add i32 %445, 2*/
		main_446_448 = (main_443_445_reg + 32'd2);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %448 = add i32 %445, 2*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		main_446_448_reg <= main_446_448;
		if (start == 1'b0 && ^(main_446_448) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_448_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %h_ptr.i.i.0 = getelementptr [24 x i32]* @h, i32 0, i32 %448*/
		main_446_h_ptrii0 = (`TAG_g_h_a + (4 * main_446_448_reg));
end
always @(*) begin
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
		main_446_449 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_283)) begin
		main_446_449_reg <= main_446_449;
		if (start == 1'b0 && ^(main_446_449) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_449_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %450 = load i32* %h_ptr.i.i.0, align 4*/
		main_446_450 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_446_451 = main_446_451_stage0_reg;
end
always @(*) begin
	/* main: %446*/
	/*   %452 = add nsw i32 %xa1.i.i.0, %451*/
		main_446_452 = (main_443_xa1ii0_reg + main_446_451);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %452 = add nsw i32 %xa1.i.i.0, %451*/
	if ((cur_state == LEGUP_F_main_BB__446_285)) begin
		main_446_452_reg <= main_446_452;
		if (start == 1'b0 && ^(main_446_452) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_452_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
		main_446_453 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_284)) begin
		main_446_453_reg <= main_446_453;
		if (start == 1'b0 && ^(main_446_453) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_453_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %446*/
	/*   %454 = load i32* %scevgep29, align 4*/
		main_446_454 = memory_controller_out_a[31:0];
end
always @(*) begin
	main_446_455 = main_446_455_stage0_reg;
end
always @(*) begin
	/* main: %446*/
	/*   %456 = add nsw i32 %xa2.i.i.0, %455*/
		main_446_456 = (main_443_xa2ii0_reg + main_446_455);
end
always @(*) begin
	/* main: %446*/
	/*   %457 = add nsw i32 %444, 1*/
		main_446_457 = (main_443_444_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %457 = add nsw i32 %444, 1*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		main_446_457_reg <= main_446_457;
		if (start == 1'b0 && ^(main_446_457) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_446_457_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %458*/
	/*   %459 = sub nsw i32 0, %436*/
		main_458_459 = (32'd0 - main_uppol2exit_436_reg);
end
always @(posedge clk) begin
	/* main: %458*/
	/*   %459 = sub nsw i32 0, %436*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		main_458_459_reg <= main_458_459;
		if (start == 1'b0 && ^(main_458_459) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_458_459_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
		main_458_460 = memory_controller_out_a[31:0];
end
always @(posedge clk) begin
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_289)) begin
		main_458_460_reg <= main_458_460;
		if (start == 1'b0 && ^(main_458_460) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_458_460_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
		main_458_461 = memory_controller_out_b[31:0];
end
always @(posedge clk) begin
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_289)) begin
		main_458_461_reg <= main_458_461;
		if (start == 1'b0 && ^(main_458_461) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_458_461_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %463 = phi i32 [ 0, %458 ], [ %469, %466 ]*/
	if (((cur_state == LEGUP_F_main_BB__458_289) & (memory_controller_waitrequest == 1'd0))) begin
		main_462_463 = 32'd0;
	end
	/* main: %462*/
	/*   %463 = phi i32 [ 0, %458 ], [ %469, %466 ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__466_294) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_462_463 = main_466_469_reg;
	end
end
always @(posedge clk) begin
	/* main: %462*/
	/*   %463 = phi i32 [ 0, %458 ], [ %469, %466 ]*/
	if (((cur_state == LEGUP_F_main_BB__458_289) & (memory_controller_waitrequest == 1'd0))) begin
		main_462_463_reg <= main_462_463;
		if (start == 1'b0 && ^(main_462_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_463_reg"); $finish; end
	end
	/* main: %462*/
	/*   %463 = phi i32 [ 0, %458 ], [ %469, %466 ]*/
	if (((cur_state == LEGUP_F_main_BB__466_294) & (memory_controller_waitrequest == 1'd0))) begin
		main_462_463_reg <= main_462_463;
		if (start == 1'b0 && ^(main_462_463) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_463_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %464 = sub i32 10, %463*/
		main_462_464 = (32'd10 - main_462_463_reg);
end
always @(posedge clk) begin
	/* main: %462*/
	/*   %464 = sub i32 10, %463*/
	if ((cur_state == LEGUP_F_main_BB__462_290)) begin
		main_462_464_reg <= main_462_464;
		if (start == 1'b0 && ^(main_462_464) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_464_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %465 = sub i32 9, %463*/
		main_462_465 = (32'd9 - main_462_463_reg);
end
always @(posedge clk) begin
	/* main: %462*/
	/*   %465 = sub i32 9, %463*/
	if ((cur_state == LEGUP_F_main_BB__462_290)) begin
		main_462_465_reg <= main_462_465;
		if (start == 1'b0 && ^(main_462_465) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_462_465_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %462*/
	/*   %exitcond32 = icmp eq i32 %463, 10*/
		main_462_exitcond32 = (main_462_463_reg == 32'd10);
end
always @(*) begin
	/* main: %466*/
	/*   %ad_ptr1.i.i.0 = getelementptr [11 x i32]* @accumd, i32 0, i32 %465*/
		main_466_ad_ptr1ii0 = (`TAG_g_accumd_a + (4 * main_462_465_reg));
end
always @(*) begin
	/* main: %466*/
	/*   %ad_ptr.i.i.1 = getelementptr [11 x i32]* @accumd, i32 0, i32 %464*/
		main_466_ad_ptrii1 = (`TAG_g_accumd_a + (4 * main_462_464_reg));
end
always @(posedge clk) begin
	/* main: %466*/
	/*   %ad_ptr.i.i.1 = getelementptr [11 x i32]* @accumd, i32 0, i32 %464*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		main_466_ad_ptrii1_reg <= main_466_ad_ptrii1;
		if (start == 1'b0 && ^(main_466_ad_ptrii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_466_ad_ptrii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %466*/
	/*   %ac_ptr1.i.i.0 = getelementptr [11 x i32]* @accumc, i32 0, i32 %465*/
		main_466_ac_ptr1ii0 = (`TAG_g_accumc_a + (4 * main_462_465_reg));
end
always @(*) begin
	/* main: %466*/
	/*   %ac_ptr.i.i.1 = getelementptr [11 x i32]* @accumc, i32 0, i32 %464*/
		main_466_ac_ptrii1 = (`TAG_g_accumc_a + (4 * main_462_464_reg));
end
always @(posedge clk) begin
	/* main: %466*/
	/*   %ac_ptr.i.i.1 = getelementptr [11 x i32]* @accumc, i32 0, i32 %464*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		main_466_ac_ptrii1_reg <= main_466_ac_ptrii1;
		if (start == 1'b0 && ^(main_466_ac_ptrii1) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_466_ac_ptrii1_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %466*/
	/*   %467 = load i32* %ac_ptr1.i.i.0, align 4*/
		main_466_467 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %466*/
	/*   %468 = load i32* %ad_ptr1.i.i.0, align 4*/
		main_466_468 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %466*/
	/*   %469 = add nsw i32 %463, 1*/
		main_466_469 = (main_462_463_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %466*/
	/*   %469 = add nsw i32 %463, 1*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		main_466_469_reg <= main_466_469;
		if (start == 1'b0 && ^(main_466_469) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_466_469_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %.apl1.i.i.i.0 = select i1 %437, i32 %436, i32 %apl1.i.i.i.0*/
		main_decodeexiti_apl1iii0 = (main_uppol2exit_437_reg ? main_uppol2exit_436_reg : main_uppol2exit_apl1iii0_reg);
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %470 = icmp slt i32 %.apl1.i.i.i.0, %459*/
		main_decodeexiti_470 = ($signed(main_decodeexiti_apl1iii0) < $signed(main_458_459_reg));
end
always @(*) begin
	main_decodeexiti_471 = main_decodeexiti_471_stage0_reg;
end
always @(*) begin
	main_decodeexiti_472 = main_decodeexiti_472_stage0_reg;
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %apl1.i.i.i.2 = select i1 %470, i32 %459, i32 %.apl1.i.i.i.0*/
		main_decodeexiti_apl1iii2 = (main_decodeexiti_470 ? main_458_459_reg : main_decodeexiti_apl1iii0);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %apl1.i.i.i.2 = select i1 %470, i32 %459, i32 %.apl1.i.i.i.0*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		main_decodeexiti_apl1iii2_reg <= main_decodeexiti_apl1iii2;
		if (start == 1'b0 && ^(main_decodeexiti_apl1iii2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_apl1iii2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %473 = add nsw i32 %xa1.i.i.0, %471*/
		main_decodeexiti_473 = (main_443_xa1ii0_reg + main_decodeexiti_471);
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %474 = ashr i32 %473, 14*/
		main_decodeexiti_474 = ($signed(main_decodeexiti_473) >>> 32'd14);
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %475 = add nsw i32 %xa2.i.i.0, %472*/
		main_decodeexiti_475 = (main_443_xa2ii0_reg + main_decodeexiti_472);
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %476 = ashr i32 %475, 14*/
		main_decodeexiti_476 = ($signed(main_decodeexiti_475) >>> 32'd14);
end
always @(*) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next38 = add i32 %indvar37, 1*/
		main_decodeexiti_indvarnext38 = (main_256_indvar37_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %indvar.next38 = add i32 %indvar37, 1*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		main_decodeexiti_indvarnext38_reg <= main_decodeexiti_indvarnext38;
		if (start == 1'b0 && ^(main_decodeexiti_indvarnext38) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_decodeexiti_indvarnext38_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %477 = phi i32 [ %483, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_168) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_477 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %477 = phi i32 [ %483, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__478_302) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_adpcm_mainexit_477 = main_478_483_reg;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %477 = phi i32 [ %483, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_168) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_477_reg <= main_adpcm_mainexit_477;
		if (start == 1'b0 && ^(main_adpcm_mainexit_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_477_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %477 = phi i32 [ %483, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__478_302) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_477_reg <= main_adpcm_mainexit_477;
		if (start == 1'b0 && ^(main_adpcm_mainexit_477) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_477_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_168) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0 = 32'd0;
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__478_302) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_adpcm_mainexit_main_result0 = main_478_main_result0;
	end
end
always @(posedge clk) begin
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_adpcm_mainexitpreheader_168) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
	/* main: %adpcm_main.exit*/
	/*   %main_result.0 = phi i32 [ %.main_result.0, %478 ], [ 0, %adpcm_main.exit.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__478_302) & (memory_controller_waitrequest == 1'd0))) begin
		main_adpcm_mainexit_main_result0_reg <= main_adpcm_mainexit_main_result0;
		if (start == 1'b0 && ^(main_adpcm_mainexit_main_result0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_adpcm_mainexit_main_result0_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %adpcm_main.exit*/
	/*   %exitcond = icmp eq i32 %477, 50*/
		main_adpcm_mainexit_exitcond = (main_adpcm_mainexit_477_reg == 32'd50);
end
always @(*) begin
	/* main: %478*/
	/*   %scevgep8 = getelementptr [100 x i32]* @compressed, i32 0, i32 %477*/
		main_478_scevgep8 = (`TAG_g_compressed_a + (4 * main_adpcm_mainexit_477_reg));
end
always @(*) begin
	/* main: %478*/
	/*   %scevgep7 = getelementptr [100 x i32]* @test_compressed, i32 0, i32 %477*/
		main_478_scevgep7 = (`TAG_g_test_compressed_a + (4 * main_adpcm_mainexit_477_reg));
end
always @(*) begin
	/* main: %478*/
	/*   %479 = load i32* %scevgep8, align 4*/
		main_478_479 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %478*/
	/*   %480 = load i32* %scevgep7, align 4*/
		main_478_480 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %478*/
	/*   %481 = icmp eq i32 %479, %480*/
		main_478_481 = (main_478_479 == main_478_480);
end
always @(*) begin
	/* main: %478*/
	/*   %482 = zext i1 %481 to i32*/
		main_478_482 = main_478_481;
end
always @(*) begin
	/* main: %478*/
	/*   %.main_result.0 = add nsw i32 %main_result.0, %482*/
		main_478_main_result0 = (main_adpcm_mainexit_main_result0_reg + main_478_482);
end
always @(*) begin
	/* main: %478*/
	/*   %483 = add nsw i32 %477, 1*/
		main_478_483 = (main_adpcm_mainexit_477_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %478*/
	/*   %483 = add nsw i32 %477, 1*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		main_478_483_reg <= main_478_483;
		if (start == 1'b0 && ^(main_478_483) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_478_483_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %484 = phi i32 [ %490, %485 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_484 = 32'd0;
	end
	/* main: %.preheader*/
	/*   %484 = phi i32 [ %490, %485 ], [ 0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__485_306) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_484 = main_485_490_reg;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %484 = phi i32 [ %490, %485 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_484_reg <= main_preheader_484;
		if (start == 1'b0 && ^(main_preheader_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_484_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %484 = phi i32 [ %490, %485 ], [ 0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__485_306) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_484_reg <= main_preheader_484;
		if (start == 1'b0 && ^(main_preheader_484) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_484_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %485 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2 = main_adpcm_mainexit_main_result0_reg;
	end
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %485 ], [ %main_result.0, %.preheader.preheader ]*/
	else /* if (((cur_state == LEGUP_F_main_BB__485_306) & (memory_controller_waitrequest == 1'd0))) */ begin
		main_preheader_main_result2 = main_485_main_result2;
	end
end
always @(posedge clk) begin
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %485 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB_preheaderpreheader_299) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
	/* main: %.preheader*/
	/*   %main_result.2 = phi i32 [ %.main_result.2, %485 ], [ %main_result.0, %.preheader.preheader ]*/
	if (((cur_state == LEGUP_F_main_BB__485_306) & (memory_controller_waitrequest == 1'd0))) begin
		main_preheader_main_result2_reg <= main_preheader_main_result2;
		if (start == 1'b0 && ^(main_preheader_main_result2) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_preheader_main_result2_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %.preheader*/
	/*   %exitcond5 = icmp eq i32 %484, 100*/
		main_preheader_exitcond5 = (main_preheader_484_reg == 32'd100);
end
always @(*) begin
	/* main: %485*/
	/*   %scevgep6 = getelementptr [100 x i32]* @result, i32 0, i32 %484*/
		main_485_scevgep6 = (`TAG_g_result_a + (4 * main_preheader_484_reg));
end
always @(*) begin
	/* main: %485*/
	/*   %scevgep = getelementptr [100 x i32]* @test_result, i32 0, i32 %484*/
		main_485_scevgep = (`TAG_g_test_result_a + (4 * main_preheader_484_reg));
end
always @(*) begin
	/* main: %485*/
	/*   %486 = load i32* %scevgep6, align 4*/
		main_485_486 = memory_controller_out_a[31:0];
end
always @(*) begin
	/* main: %485*/
	/*   %487 = load i32* %scevgep, align 4*/
		main_485_487 = memory_controller_out_b[31:0];
end
always @(*) begin
	/* main: %485*/
	/*   %488 = icmp eq i32 %486, %487*/
		main_485_488 = (main_485_486 == main_485_487);
end
always @(*) begin
	/* main: %485*/
	/*   %489 = zext i1 %488 to i32*/
		main_485_489 = main_485_488;
end
always @(*) begin
	/* main: %485*/
	/*   %.main_result.2 = add nsw i32 %main_result.2, %489*/
		main_485_main_result2 = (main_preheader_main_result2_reg + main_485_489);
end
always @(*) begin
	/* main: %485*/
	/*   %490 = add nsw i32 %484, 1*/
		main_485_490 = (main_preheader_484_reg + 32'd1);
end
always @(posedge clk) begin
	/* main: %485*/
	/*   %490 = add nsw i32 %484, 1*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		main_485_490_reg <= main_485_490;
		if (start == 1'b0 && ^(main_485_490) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to main_485_490_reg"); $finish; end
	end
end
always @(*) begin
	/* main: %491*/
	/*   %493 = icmp eq i32 %main_result.2, 150*/
		main_491_493 = (main_preheader_main_result2_reg == 32'd150);
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %252 = sdiv i32 %i.i.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_signed_divide_32_0_op0 = main_resetexiti_ii0_reg;
	end
	/* main: %258*/
	/*   %259 = sdiv i32 %i.i.1, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__258_169)) */ begin
		main_signed_divide_32_0_op0 = main_256_ii1_reg;
	end
end
always @(*) begin
	/* main: %uppol2.exit23*/
	/*   %252 = sdiv i32 %i.i.0, 2*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_132)) begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
	/* main: %258*/
	/*   %259 = sdiv i32 %i.i.1, 2*/
	else /* if ((cur_state == LEGUP_F_main_BB__258_169)) */ begin
		main_signed_divide_32_0_op1 = 32'd2;
	end
end
always @(*) begin
	lpm_divide_main_258_259_en = (memory_controller_waitrequest == 1'd0);
end
always @(*) begin
	lpm_divide_main_258_259_out = lpm_divide_main_258_259_temp_out;
end
always @(*) begin
	main_signed_divide_32_0 = lpm_divide_main_258_259_out;
end
always @(*) begin
	lpm_mult_main_14_19_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %19 = mul nsw i32 %18, 12*/
	if ((lpm_mult_main_14_19_en == 1'd1)) begin
		main_14_19_stage0_reg <= (main_14_18 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_14_21_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %14*/
	/*   %21 = mul nsw i32 %20, -44*/
	if ((lpm_mult_main_14_21_en == 1'd1)) begin
		main_14_21_stage0_reg <= (main_14_20 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_27_30_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %30 = mul nsw i32 %28, %29*/
	if ((lpm_mult_main_27_30_en == 1'd1)) begin
		main_27_30_stage0_reg <= (main_27_28 * main_27_29);
	end
end
always @(*) begin
	lpm_mult_main_27_34_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %27*/
	/*   %34 = mul nsw i32 %32, %33*/
	if ((lpm_mult_main_27_34_en == 1'd1)) begin
		main_27_34_stage0_reg <= (main_27_32 * main_27_33);
	end
end
always @(*) begin
	lpm_mult_main_47_48_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %48 = mul nsw i32 %38, -44*/
	if ((lpm_mult_main_47_48_en == 1'd1)) begin
		main_47_48_stage0_reg <= (main_37_38_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_47_51_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %47*/
	/*   %51 = mul nsw i32 %49, %50*/
	if ((lpm_mult_main_47_51_en == 1'd1)) begin
		main_47_51_stage0_reg <= (main_47_49 * main_47_50);
	end
end
always @(*) begin
	lpm_mult_main_53_56_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %53*/
	/*   %56 = mul nsw i32 %54, %55*/
	if ((lpm_mult_main_53_56_en == 1'd1)) begin
		main_53_56_stage0_reg <= (main_53_54 * main_53_55);
	end
end
always @(*) begin
	lpm_mult_main_filtezexiti23i_59_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %59 = mul nsw i32 %39, 12*/
	if ((lpm_mult_main_filtezexiti23i_59_en == 1'd1)) begin
		main_filtezexiti23i_59_stage0_reg <= (main_37_39_reg * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_filtezexiti23i_67_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %67 = mul nsw i32 %al1.0, %66*/
	if ((lpm_mult_main_filtezexiti23i_67_en == 1'd1)) begin
		main_filtezexiti23i_67_stage0_reg <= (main_resetexiti_al10_reg * main_filtezexiti23i_66);
	end
end
always @(*) begin
	lpm_mult_main_filtezexiti23i_69_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i23.i*/
	/*   %69 = mul nsw i32 %al2.0, %68*/
	if ((lpm_mult_main_filtezexiti23i_69_en == 1'd1)) begin
		main_filtezexiti23i_69_stage0_reg <= (main_resetexiti_al20_reg * main_filtezexiti23i_68);
	end
end
always @(*) begin
	lpm_mult_main_79_81_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %79*/
	/*   %81 = mul nsw i32 %80, %detl.0*/
	if ((lpm_mult_main_79_81_en == 1'd1)) begin
		main_79_81_stage0_reg <= (main_79_80 * main_resetexiti_detl0_reg);
	end
end
always @(*) begin
	lpm_mult_main_quantlexitii_91_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %91 = mul nsw i32 %nbl.0, 127*/
	if ((lpm_mult_main_quantlexitii_91_en == 1'd1)) begin
		main_quantlexitii_91_stage0_reg <= (main_resetexiti_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_quantlexitii_89_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %quantl.exit.i.i*/
	/*   %89 = mul nsw i32 %detl.0, %88*/
	if ((lpm_mult_main_quantlexitii_89_en == 1'd1)) begin
		main_quantlexitii_89_stage0_reg <= (main_resetexiti_detl0_reg * main_quantlexitii_88);
	end
end
always @(*) begin
	lpm_mult_main_110_112_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %110*/
	/*   %112 = mul nsw i32 %111, 255*/
	if ((lpm_mult_main_110_112_en == 1'd1)) begin
		main_110_112_stage0_reg <= (main_110_111 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_116_118_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %118 = mul nsw i32 %90, %117*/
	if ((lpm_mult_main_116_118_en == 1'd1)) begin
		main_116_118_stage0_reg <= (main_quantlexitii_90_reg * main_116_117);
	end
end
always @(*) begin
	lpm_mult_main_116_123_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %116*/
	/*   %123 = mul nsw i32 %122, 255*/
	if ((lpm_mult_main_116_123_en == 1'd1)) begin
		main_116_123_stage0_reg <= (main_116_122 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit_131_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %131 = mul nsw i32 %107, %plt1.0*/
	if ((lpm_mult_main_upzeroexit_131_en == 1'd1)) begin
		main_upzeroexit_131_stage0_reg <= (main_logsclexiti24i_107_reg * main_resetexiti_plt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit_135_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %135 = mul nsw i32 %107, %plt2.0*/
	if ((lpm_mult_main_upzeroexit_135_en == 1'd1)) begin
		main_upzeroexit_135_stage0_reg <= (main_logsclexiti24i_107_reg * main_resetexiti_plt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit_139_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit*/
	/*   %139 = mul nsw i32 %al2.0, 127*/
	if ((lpm_mult_main_upzeroexit_139_en == 1'd1)) begin
		main_upzeroexit_139_stage0_reg <= (main_resetexiti_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit34_146_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %146 = mul nsw i32 %al1.0, 255*/
	if ((lpm_mult_main_uppol2exit34_146_en == 1'd1)) begin
		main_uppol2exit34_146_stage0_reg <= (main_resetexiti_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit34_155_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit34*/
	/*   %155 = mul nsw i32 %153, %154*/
	if ((lpm_mult_main_uppol2exit34_155_en == 1'd1)) begin
		main_uppol2exit34_155_stage0_reg <= (main_uppol2exit34_153 * main_uppol2exit34_154);
	end
end
always @(*) begin
	lpm_mult_main_157_160_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %157*/
	/*   %160 = mul nsw i32 %158, %159*/
	if ((lpm_mult_main_157_160_en == 1'd1)) begin
		main_157_160_stage0_reg <= (main_157_158 * main_157_159);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8i26i_167_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %167 = mul nsw i32 %ah1.0, %166*/
	if ((lpm_mult_main_filtezexit8i26i_167_en == 1'd1)) begin
		main_filtezexit8i26i_167_stage0_reg <= (main_resetexiti_ah10_reg * main_filtezexit8i26i_166);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8i26i_169_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %169 = mul nsw i32 %ah2.0, %168*/
	if ((lpm_mult_main_filtezexit8i26i_169_en == 1'd1)) begin
		main_filtezexit8i26i_169_stage0_reg <= (main_resetexiti_ah20_reg * main_filtezexit8i26i_168);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8i26i_175_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %175 = mul nsw i32 %deth.0, 564*/
	if ((lpm_mult_main_filtezexit8i26i_175_en == 1'd1)) begin
		main_filtezexit8i26i_175_stage0_reg <= (main_resetexiti_deth0_reg * 32'd564);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8i26i_185_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %185 = mul nsw i32 %nbh.0, 127*/
	if ((lpm_mult_main_filtezexit8i26i_185_en == 1'd1)) begin
		main_filtezexit8i26i_185_stage0_reg <= (main_resetexiti_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8i26i_183_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i26.i*/
	/*   %183 = mul nsw i32 %deth.0, %182*/
	if ((lpm_mult_main_filtezexit8i26i_183_en == 1'd1)) begin
		main_filtezexit8i26i_183_stage0_reg <= (main_resetexiti_deth0_reg * main_filtezexit8i26i_182);
	end
end
always @(*) begin
	lpm_mult_main_204_206_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %204*/
	/*   %206 = mul nsw i32 %205, 255*/
	if ((lpm_mult_main_204_206_en == 1'd1)) begin
		main_204_206_stage0_reg <= (main_204_205 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_210_212_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %212 = mul nsw i32 %184, %211*/
	if ((lpm_mult_main_210_212_en == 1'd1)) begin
		main_210_212_stage0_reg <= (main_filtezexit8i26i_184_reg * main_210_211);
	end
end
always @(*) begin
	lpm_mult_main_210_217_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %210*/
	/*   %217 = mul nsw i32 %216, 255*/
	if ((lpm_mult_main_210_217_en == 1'd1)) begin
		main_210_217_stage0_reg <= (main_210_216 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit29_225_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %225 = mul nsw i32 %201, %ph1.0*/
	if ((lpm_mult_main_upzeroexit29_225_en == 1'd1)) begin
		main_upzeroexit29_225_stage0_reg <= (main_logschexiti27i_201_reg * main_resetexiti_ph10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit29_229_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %229 = mul nsw i32 %201, %ph2.0*/
	if ((lpm_mult_main_upzeroexit29_229_en == 1'd1)) begin
		main_upzeroexit29_229_stage0_reg <= (main_logschexiti27i_201_reg * main_resetexiti_ph20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit29_233_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit29*/
	/*   %233 = mul nsw i32 %ah2.0, 127*/
	if ((lpm_mult_main_upzeroexit29_233_en == 1'd1)) begin
		main_upzeroexit29_233_stage0_reg <= (main_resetexiti_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit23_240_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit23*/
	/*   %240 = mul nsw i32 %ah1.0, 255*/
	if ((lpm_mult_main_uppol2exit23_240_en == 1'd1)) begin
		main_uppol2exit23_240_stage0_reg <= (main_resetexiti_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_258_264_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %258*/
	/*   %264 = mul nsw i32 %262, %263*/
	if ((lpm_mult_main_258_264_en == 1'd1)) begin
		main_258_264_stage0_reg <= (main_258_262 * main_258_263);
	end
end
always @(*) begin
	lpm_mult_main_266_269_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %266*/
	/*   %269 = mul nsw i32 %267, %268*/
	if ((lpm_mult_main_266_269_en == 1'd1)) begin
		main_266_269_stage0_reg <= (main_266_267 * main_266_268);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_274_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %274 = mul nsw i32 %dec_al1.0, %273*/
	if ((lpm_mult_main_filtezexitii_274_en == 1'd1)) begin
		main_filtezexitii_274_stage0_reg <= (main_256_dec_al10_reg * main_filtezexitii_273);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_276_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %276 = mul nsw i32 %dec_al2.0, %275*/
	if ((lpm_mult_main_filtezexitii_276_en == 1'd1)) begin
		main_filtezexitii_276_stage0_reg <= (main_256_dec_al20_reg * main_filtezexitii_275);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_290_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %290 = mul nsw i32 %dec_nbl.0, 127*/
	if ((lpm_mult_main_filtezexitii_290_en == 1'd1)) begin
		main_filtezexitii_290_stage0_reg <= (main_256_dec_nbl0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_284_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %284 = mul nsw i32 %dec_detl.0, %283*/
	if ((lpm_mult_main_filtezexitii_284_en == 1'd1)) begin
		main_filtezexitii_284_stage0_reg <= (main_256_dec_detl0_reg * main_filtezexitii_283);
	end
end
always @(*) begin
	lpm_mult_main_filtezexitii_287_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit.i.i*/
	/*   %287 = mul nsw i32 %dec_detl.0, %286*/
	if ((lpm_mult_main_filtezexitii_287_en == 1'd1)) begin
		main_filtezexitii_287_stage0_reg <= (main_256_dec_detl0_reg * main_filtezexitii_286);
	end
end
always @(*) begin
	lpm_mult_main_309_311_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %309*/
	/*   %311 = mul nsw i32 %310, 255*/
	if ((lpm_mult_main_309_311_en == 1'd1)) begin
		main_309_311_stage0_reg <= (main_309_310 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_315_317_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %315*/
	/*   %317 = mul nsw i32 %285, %316*/
	if ((lpm_mult_main_315_317_en == 1'd1)) begin
		main_315_317_stage0_reg <= (main_filtezexitii_285_reg * main_315_316);
	end
end
always @(*) begin
	lpm_mult_main_315_322_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %315*/
	/*   %322 = mul nsw i32 %321, 255*/
	if ((lpm_mult_main_315_322_en == 1'd1)) begin
		main_315_322_stage0_reg <= (main_315_321 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit18_330_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %330 = mul nsw i32 %306, %dec_plt1.0*/
	if ((lpm_mult_main_upzeroexit18_330_en == 1'd1)) begin
		main_upzeroexit18_330_stage0_reg <= (main_logsclexitii_306_reg * main_256_dec_plt10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit18_334_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %334 = mul nsw i32 %306, %dec_plt2.0*/
	if ((lpm_mult_main_upzeroexit18_334_en == 1'd1)) begin
		main_upzeroexit18_334_stage0_reg <= (main_logsclexitii_306_reg * main_256_dec_plt20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit18_338_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit18*/
	/*   %338 = mul nsw i32 %dec_al2.0, 127*/
	if ((lpm_mult_main_upzeroexit18_338_en == 1'd1)) begin
		main_upzeroexit18_338_stage0_reg <= (main_256_dec_al20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit12_345_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %345 = mul nsw i32 %dec_al1.0, 255*/
	if ((lpm_mult_main_uppol2exit12_345_en == 1'd1)) begin
		main_uppol2exit12_345_stage0_reg <= (main_256_dec_al10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit12_354_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit12*/
	/*   %354 = mul nsw i32 %352, %353*/
	if ((lpm_mult_main_uppol2exit12_354_en == 1'd1)) begin
		main_uppol2exit12_354_stage0_reg <= (main_uppol2exit12_352 * main_uppol2exit12_353);
	end
end
always @(*) begin
	lpm_mult_main_356_359_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %356*/
	/*   %359 = mul nsw i32 %357, %358*/
	if ((lpm_mult_main_356_359_en == 1'd1)) begin
		main_356_359_stage0_reg <= (main_356_357 * main_356_358);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_366_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %366 = mul nsw i32 %dec_ah1.0, %365*/
	if ((lpm_mult_main_filtezexit8ii_366_en == 1'd1)) begin
		main_filtezexit8ii_366_stage0_reg <= (main_256_dec_ah10_reg * main_filtezexit8ii_365);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_368_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %368 = mul nsw i32 %dec_ah2.0, %367*/
	if ((lpm_mult_main_filtezexit8ii_368_en == 1'd1)) begin
		main_filtezexit8ii_368_stage0_reg <= (main_256_dec_ah20_reg * main_filtezexit8ii_367);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_376_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %376 = mul nsw i32 %dec_nbh.0, 127*/
	if ((lpm_mult_main_filtezexit8ii_376_en == 1'd1)) begin
		main_filtezexit8ii_376_stage0_reg <= (main_256_dec_nbh0_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_filtezexit8ii_374_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %filtez.exit8.i.i*/
	/*   %374 = mul nsw i32 %dec_deth.0, %373*/
	if ((lpm_mult_main_filtezexit8ii_374_en == 1'd1)) begin
		main_filtezexit8ii_374_stage0_reg <= (main_256_dec_deth0_reg * main_filtezexit8ii_373);
	end
end
always @(*) begin
	lpm_mult_main_395_397_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %395*/
	/*   %397 = mul nsw i32 %396, 255*/
	if ((lpm_mult_main_395_397_en == 1'd1)) begin
		main_395_397_stage0_reg <= (main_395_396 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_401_403_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %403 = mul nsw i32 %375, %402*/
	if ((lpm_mult_main_401_403_en == 1'd1)) begin
		main_401_403_stage0_reg <= (main_filtezexit8ii_375_reg * main_401_402);
	end
end
always @(*) begin
	lpm_mult_main_401_408_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %401*/
	/*   %408 = mul nsw i32 %407, 255*/
	if ((lpm_mult_main_401_408_en == 1'd1)) begin
		main_401_408_stage0_reg <= (main_401_407 * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit7_416_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %416 = mul nsw i32 %392, %dec_ph1.0*/
	if ((lpm_mult_main_upzeroexit7_416_en == 1'd1)) begin
		main_upzeroexit7_416_stage0_reg <= (main_logschexitii_392_reg * main_256_dec_ph10_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit7_420_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %420 = mul nsw i32 %392, %dec_ph2.0*/
	if ((lpm_mult_main_upzeroexit7_420_en == 1'd1)) begin
		main_upzeroexit7_420_stage0_reg <= (main_logschexitii_392_reg * main_256_dec_ph20_reg);
	end
end
always @(*) begin
	lpm_mult_main_upzeroexit7_424_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %upzero.exit7*/
	/*   %424 = mul nsw i32 %dec_ah2.0, 127*/
	if ((lpm_mult_main_upzeroexit7_424_en == 1'd1)) begin
		main_upzeroexit7_424_stage0_reg <= (main_256_dec_ah20_reg * 32'd127);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit_431_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %431 = mul nsw i32 %dec_ah1.0, 255*/
	if ((lpm_mult_main_uppol2exit_431_en == 1'd1)) begin
		main_uppol2exit_431_stage0_reg <= (main_256_dec_ah10_reg * 32'd255);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit_441_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %441 = mul nsw i32 %439, 12*/
	if ((lpm_mult_main_uppol2exit_441_en == 1'd1)) begin
		main_uppol2exit_441_stage0_reg <= (main_uppol2exit_439 * 32'd12);
	end
end
always @(*) begin
	lpm_mult_main_uppol2exit_442_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %uppol2.exit*/
	/*   %442 = mul nsw i32 %440, -44*/
	if ((lpm_mult_main_uppol2exit_442_en == 1'd1)) begin
		main_uppol2exit_442_stage0_reg <= (main_uppol2exit_440 * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_446_451_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %451 = mul nsw i32 %449, %450*/
	if ((lpm_mult_main_446_451_en == 1'd1)) begin
		main_446_451_stage0_reg <= (main_446_449_reg * main_446_450);
	end
end
always @(*) begin
	lpm_mult_main_446_455_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %446*/
	/*   %455 = mul nsw i32 %453, %454*/
	if ((lpm_mult_main_446_455_en == 1'd1)) begin
		main_446_455_stage0_reg <= (main_446_453_reg * main_446_454);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_471_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %471 = mul nsw i32 %460, -44*/
	if ((lpm_mult_main_decodeexiti_471_en == 1'd1)) begin
		main_decodeexiti_471_stage0_reg <= (main_458_460_reg * -32'd44);
	end
end
always @(*) begin
	lpm_mult_main_decodeexiti_472_en = (memory_controller_waitrequest == 1'd0);
end
always @(posedge clk) begin
	/* main: %decode.exit.i*/
	/*   %472 = mul nsw i32 %461, 12*/
	if ((lpm_mult_main_decodeexiti_472_en == 1'd1)) begin
		main_decodeexiti_472_stage0_reg <= (main_458_461_reg * 32'd12);
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		finish <= 1'd0;
		if (start == 1'b0 && ^(1'd0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
	/* main: %498*/
	/*   ret i32 %main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__498_310)) begin
		finish <= (memory_controller_waitrequest == 1'd0);
		if (start == 1'b0 && ^((memory_controller_waitrequest == 1'd0)) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to finish"); $finish; end
	end
end
always @(*) begin
	memory_controller_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep90, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep88, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep85, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep83, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep80, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep78, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %14*/
	/*   %18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %28 = load i32* %tqmf_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %27*/
	/*   %32 = load i32* %scevgep46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %42*/
	/*   store i32 %45, i32* %tqmf_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_37)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %47*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %47*/
	/*   %49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %53*/
	/*   %54 = load i32* %.0468, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %quantl.exit.i.i*/
	/*   %88 = load i32* %87, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %logscl.exit.i24.i*/
	/*   %103 = load i32* %102, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %116*/
	/*   %117 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   %127 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   %129 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %uppol2.exit34*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %157*/
	/*   %158 = load i32* %.0471, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %logsch.exit.i27.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %204*/
	/*   %205 = load i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_113)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %204*/
	/*   store i32 %207, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_116)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %210*/
	/*   %211 = load i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   %221 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   %223 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %221, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %222, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %uppol2.exit23*/
	/*   store i32 %251, i32* %253, align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_164)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %258*/
	/*   %262 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_201)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %266*/
	/*   %267 = load i32* %.0462, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %283 = load i32* %282, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %logscl.exit.i.i*/
	/*   %302 = load i32* %301, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   %326 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   %328 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %326, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %327, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %uppol2.exit12*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %356*/
	/*   %357 = load i32* %.0466, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %373 = load i32* %372, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %logsch.exit.i.i*/
	/*   %388 = load i32* %387, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %395*/
	/*   %396 = load i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_259)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %395*/
	/*   store i32 %398, i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_262)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %401*/
	/*   %402 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   %414 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %412, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %413, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   %450 = load i32* %h_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   %454 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_283)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %466*/
	/*   %467 = load i32* %ac_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %466*/
	/*   store i32 %467, i32* %ac_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %439, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %474, i32* %scevgep41, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %478*/
	/*   %479 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_enable_a = 1'd1;
	end
	/* main: %485*/
	/*   %486 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_enable_a = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_a = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep90, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_address_a = main_3_scevgep90;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep88, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_address_a = main_3_scevgep88_reg;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep85, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_address_a = main_6_scevgep85;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep83, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_address_a = main_6_scevgep83_reg;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep80, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		memory_controller_address_a = main_9_scevgep80;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep78, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_address_a = main_12_scevgep78;
	end
	/* main: %14*/
	/*   %18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_address_a = `TAG_g_tqmf_a;
	end
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_address_a = main_14_scevgep75_reg;
	end
	/* main: %27*/
	/*   %28 = load i32* %tqmf_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_address_a = main_27_tqmf_ptrii0;
	end
	/* main: %27*/
	/*   %32 = load i32* %scevgep46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_address_a = main_27_scevgep46_reg;
	end
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd22));
	end
	/* main: %42*/
	/*   store i32 %45, i32* %tqmf_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_37)) begin
		memory_controller_address_a = main_42_tqmf_ptrii1_reg;
	end
	/* main: %47*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_address_a = (`TAG_g_tqmf_a + (4 * 32'd1));
	end
	/* main: %47*/
	/*   %49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_address_a = `TAG_g_delay_bpl_a;
	end
	/* main: %53*/
	/*   %54 = load i32* %.0468, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_address_a = main_53_0468;
	end
	/* main: %quantl.exit.i.i*/
	/*   %88 = load i32* %87, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_address_a = main_quantlexitii_87;
	end
	/* main: %logscl.exit.i24.i*/
	/*   %103 = load i32* %102, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		memory_controller_address_a = main_logsclexiti24i_102;
	end
	/* main: %116*/
	/*   %117 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_address_a = main_116_scevgep58;
	end
	/* main: %upzero.exit*/
	/*   %127 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd4));
	end
	/* main: %upzero.exit*/
	/*   %129 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd2));
	end
	/* main: %upzero.exit*/
	/*   store i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd5));
	end
	/* main: %upzero.exit*/
	/*   store i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_address_a = (`TAG_g_delay_dltx_a + (4 * 32'd4));
	end
	/* main: %uppol2.exit34*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_address_a = `TAG_g_delay_bph_a;
	end
	/* main: %157*/
	/*   %158 = load i32* %.0471, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_address_a = main_157_0471;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_address_a = main_filtezexit8i26i_181;
	end
	/* main: %logsch.exit.i27.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		memory_controller_address_a = main_logschexiti27i_196;
	end
	/* main: %204*/
	/*   %205 = load i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_113)) begin
		memory_controller_address_a = main_preheader41_scevgep70_reg;
	end
	/* main: %204*/
	/*   store i32 %207, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_116)) begin
		memory_controller_address_a = main_preheader41_scevgep70_reg;
	end
	/* main: %210*/
	/*   %211 = load i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_address_a = main_210_scevgep68;
	end
	/* main: %upzero.exit29*/
	/*   %221 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a + (4 * 32'd4));
	end
	/* main: %upzero.exit29*/
	/*   %223 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a + (4 * 32'd2));
	end
	/* main: %upzero.exit29*/
	/*   store i32 %221, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a + (4 * 32'd5));
	end
	/* main: %upzero.exit29*/
	/*   store i32 %222, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_address_a = (`TAG_g_delay_dhx_a + (4 * 32'd4));
	end
	/* main: %uppol2.exit23*/
	/*   store i32 %251, i32* %253, align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_164)) begin
		memory_controller_address_a = main_uppol2exit23_253;
	end
	/* main: %258*/
	/*   %262 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_address_a = `TAG_g_dec_del_bpl_a;
	end
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_201)) begin
		memory_controller_address_a = main_258_260;
	end
	/* main: %266*/
	/*   %267 = load i32* %.0462, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_address_a = main_266_0462;
	end
	/* main: %filtez.exit.i.i*/
	/*   %283 = load i32* %282, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_address_a = main_filtezexitii_282;
	end
	/* main: %logscl.exit.i.i*/
	/*   %302 = load i32* %301, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		memory_controller_address_a = main_logsclexitii_301;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_address_a = main_315_scevgep14;
	end
	/* main: %upzero.exit18*/
	/*   %326 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd4));
	end
	/* main: %upzero.exit18*/
	/*   %328 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd2));
	end
	/* main: %upzero.exit18*/
	/*   store i32 %326, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd5));
	end
	/* main: %upzero.exit18*/
	/*   store i32 %327, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dltx_a + (4 * 32'd4));
	end
	/* main: %uppol2.exit12*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_address_a = `TAG_g_dec_del_bph_a;
	end
	/* main: %356*/
	/*   %357 = load i32* %.0466, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_address_a = main_356_0466;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %373 = load i32* %372, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_address_a = main_filtezexit8ii_372;
	end
	/* main: %logsch.exit.i.i*/
	/*   %388 = load i32* %387, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		memory_controller_address_a = main_logschexitii_387;
	end
	/* main: %395*/
	/*   %396 = load i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_259)) begin
		memory_controller_address_a = main_preheader35_scevgep26_reg;
	end
	/* main: %395*/
	/*   store i32 %398, i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_262)) begin
		memory_controller_address_a = main_preheader35_scevgep26_reg;
	end
	/* main: %401*/
	/*   %402 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_address_a = main_401_scevgep24;
	end
	/* main: %upzero.exit7*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a + (4 * 32'd4));
	end
	/* main: %upzero.exit7*/
	/*   %414 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a + (4 * 32'd2));
	end
	/* main: %upzero.exit7*/
	/*   store i32 %412, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a + (4 * 32'd5));
	end
	/* main: %upzero.exit7*/
	/*   store i32 %413, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_address_a = (`TAG_g_dec_del_dhx_a + (4 * 32'd4));
	end
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		memory_controller_address_a = main_446_ac_ptrii0;
	end
	/* main: %446*/
	/*   %450 = load i32* %h_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_address_a = main_446_h_ptrii0;
	end
	/* main: %446*/
	/*   %454 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_283)) begin
		memory_controller_address_a = main_446_scevgep29_reg;
	end
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_address_a = (`TAG_g_accumc_a + (4 * 32'd10));
	end
	/* main: %466*/
	/*   %467 = load i32* %ac_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_address_a = main_466_ac_ptr1ii0;
	end
	/* main: %466*/
	/*   store i32 %467, i32* %ac_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_address_a = main_466_ac_ptrii1_reg;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %439, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_address_a = `TAG_g_accumc_a;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %474, i32* %scevgep41, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_address_a = main_256_scevgep41_reg;
	end
	/* main: %478*/
	/*   %479 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_address_a = main_478_scevgep8;
	end
	/* main: %485*/
	/*   %486 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_address_a = main_485_scevgep6;
	end
end
always @(*) begin
	memory_controller_write_enable_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep90, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep88, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep85, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep83, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep80, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep78, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %14*/
	/*   %18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %28 = load i32* %tqmf_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %27*/
	/*   %32 = load i32* %scevgep46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %42*/
	/*   store i32 %45, i32* %tqmf_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_37)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %47*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %47*/
	/*   %49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %53*/
	/*   %54 = load i32* %.0468, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %quantl.exit.i.i*/
	/*   %88 = load i32* %87, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %logscl.exit.i24.i*/
	/*   %103 = load i32* %102, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %116*/
	/*   %117 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit*/
	/*   %127 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit*/
	/*   %129 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit*/
	/*   store i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %uppol2.exit34*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %157*/
	/*   %158 = load i32* %.0471, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %logsch.exit.i27.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %204*/
	/*   %205 = load i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_113)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %204*/
	/*   store i32 %207, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_116)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %210*/
	/*   %211 = load i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit29*/
	/*   %221 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit29*/
	/*   %223 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %221, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %222, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %uppol2.exit23*/
	/*   store i32 %251, i32* %253, align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_164)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %258*/
	/*   %262 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_201)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %266*/
	/*   %267 = load i32* %.0462, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %283 = load i32* %282, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %logscl.exit.i.i*/
	/*   %302 = load i32* %301, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit18*/
	/*   %326 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit18*/
	/*   %328 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %326, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %327, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %uppol2.exit12*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %356*/
	/*   %357 = load i32* %.0466, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %373 = load i32* %372, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %logsch.exit.i.i*/
	/*   %388 = load i32* %387, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %395*/
	/*   %396 = load i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_259)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %395*/
	/*   store i32 %398, i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_262)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %401*/
	/*   %402 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit7*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit7*/
	/*   %414 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %412, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %413, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %446*/
	/*   %450 = load i32* %h_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %446*/
	/*   %454 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_283)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %466*/
	/*   %467 = load i32* %ac_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %466*/
	/*   store i32 %467, i32* %ac_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %439, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %474, i32* %scevgep41, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_write_enable_a = 1'd1;
	end
	/* main: %478*/
	/*   %479 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_write_enable_a = 1'd0;
	end
	/* main: %485*/
	/*   %486 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_write_enable_a = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_a = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep90, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep88, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep85, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep83, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep80, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep78, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_in_a = 32'd0;
	end
	/* main: %42*/
	/*   store i32 %45, i32* %tqmf_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_37)) begin
		memory_controller_in_a = main_42_45;
	end
	/* main: %47*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_in_a = main_14_16_reg;
	end
	/* main: %upzero.exit*/
	/*   store i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_in_a = main_upzeroexit_127;
	end
	/* main: %upzero.exit*/
	/*   store i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_in_a = main_upzeroexit_128_reg;
	end
	/* main: %204*/
	/*   store i32 %207, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_116)) begin
		memory_controller_in_a = main_204_207;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %221, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_in_a = main_upzeroexit29_221;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %222, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_in_a = main_upzeroexit29_222_reg;
	end
	/* main: %uppol2.exit23*/
	/*   store i32 %251, i32* %253, align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_164)) begin
		memory_controller_in_a = main_uppol2exit23_251_reg;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %326, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_in_a = main_upzeroexit18_326;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %327, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_in_a = main_upzeroexit18_327_reg;
	end
	/* main: %395*/
	/*   store i32 %398, i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_262)) begin
		memory_controller_in_a = main_395_398;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %412, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_in_a = main_upzeroexit7_412;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %413, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_in_a = main_upzeroexit7_413_reg;
	end
	/* main: %466*/
	/*   store i32 %467, i32* %ac_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_in_a = main_466_467;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %439, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_in_a = main_uppol2exit_439_reg;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %474, i32* %scevgep41, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_in_a = main_decodeexiti_474;
	end
end
always @(*) begin
	memory_controller_size_a = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_a = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep90, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep88, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep85, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep83, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %9*/
	/*   store i32 0, i32* %scevgep80, align 4*/
	if ((cur_state == LEGUP_F_main_BB__9_13)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep78, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %14*/
	/*   %18 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %14*/
	/*   %16 = load i32* %scevgep75, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %27*/
	/*   %28 = load i32* %tqmf_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %27*/
	/*   %32 = load i32* %scevgep46, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %37*/
	/*   %38 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 22), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %42*/
	/*   store i32 %45, i32* %tqmf_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_37)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %47*/
	/*   store i32 %16, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %47*/
	/*   %49 = load i32* getelementptr inbounds ([6 x i32]* @delay_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %53*/
	/*   %54 = load i32* %.0468, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %quantl.exit.i.i*/
	/*   %88 = load i32* %87, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %logscl.exit.i24.i*/
	/*   %103 = load i32* %102, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexiti24i_65)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %116*/
	/*   %117 = load i32* %scevgep58, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   %127 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   %129 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   store i32 %127, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   store i32 %128, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %uppol2.exit34*/
	/*   %153 = load i32* getelementptr inbounds ([6 x i32]* @delay_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %157*/
	/*   %158 = load i32* %.0471, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %182 = load i32* %181, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %logsch.exit.i27.i*/
	/*   %197 = load i32* %196, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexiti27i_107)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %204*/
	/*   %205 = load i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_113)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %204*/
	/*   store i32 %207, i32* %scevgep70, align 4*/
	if ((cur_state == LEGUP_F_main_BB__204_116)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %210*/
	/*   %211 = load i32* %scevgep68, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   %221 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   %223 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %221, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %222, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %uppol2.exit23*/
	/*   store i32 %251, i32* %253, align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit23_164)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %258*/
	/*   %262 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bpl, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %258*/
	/*   %261 = load i32* %260, align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_201)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %266*/
	/*   %267 = load i32* %.0462, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %283 = load i32* %282, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %logscl.exit.i.i*/
	/*   %302 = load i32* %301, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logsclexitii_214)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %315*/
	/*   %316 = load i32* %scevgep14, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   %326 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   %328 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %326, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %327, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %uppol2.exit12*/
	/*   %352 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_bph, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %356*/
	/*   %357 = load i32* %.0466, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %373 = load i32* %372, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %logsch.exit.i.i*/
	/*   %388 = load i32* %387, align 4*/
	if ((cur_state == LEGUP_F_main_BB_logschexitii_253)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %395*/
	/*   %396 = load i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_259)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %395*/
	/*   store i32 %398, i32* %scevgep26, align 4*/
	if ((cur_state == LEGUP_F_main_BB__395_262)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %401*/
	/*   %402 = load i32* %scevgep24, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   %412 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   %414 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 2), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %412, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 5), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %413, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 4), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   %449 = load i32* %ac_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_281)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   %450 = load i32* %h_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %446*/
	/*   %454 = load i32* %scevgep29, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_283)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %458*/
	/*   %460 = load i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %466*/
	/*   %467 = load i32* %ac_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %466*/
	/*   store i32 %467, i32* %ac_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %439, i32* getelementptr inbounds ([11 x i32]* @accumc, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %474, i32* %scevgep41, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %478*/
	/*   %479 = load i32* %scevgep8, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_size_a = 2'd2;
	end
	/* main: %485*/
	/*   %486 = load i32* %scevgep6, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_size_a = 2'd2;
	end
end
always @(*) begin
	memory_controller_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep87, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %14*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %27*/
	/*   %29 = load i32* %h_ptr.i22.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %27*/
	/*   %33 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %42*/
	/*   %45 = load i32* %tqmf_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_35)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %47*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %53*/
	/*   %55 = load i32* %.0467, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %79*/
	/*   %80 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__79_52)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_58)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %quantl.exit.i.i*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_71)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %110*/
	/*   store i32 %113, i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %116*/
	/*   %122 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %116*/
	/*   store i32 %125, i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_80)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %50, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %90, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %129, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %157*/
	/*   %159 = load i32* %.0472, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %210*/
	/*   %216 = load i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %210*/
	/*   store i32 %219, i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_122)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %154, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %184, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %223, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %266*/
	/*   %268 = load i32* %.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %286 = load i32* %255, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit.i.i*/
	/*   %293 = load i32* %292, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_220)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %309*/
	/*   store i32 %312, i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_223)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %315*/
	/*   %321 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %315*/
	/*   store i32 %324, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_229)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %263, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %285, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %328, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %356*/
	/*   %358 = load i32* %.0465, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %379 = load i32* %378, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %401*/
	/*   %407 = load i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %401*/
	/*   store i32 %410, i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_268)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %353, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %375, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %414, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %466*/
	/*   %468 = load i32* %ad_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %466*/
	/*   store i32 %468, i32* %ad_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %440, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %476, i32* %scevgep40, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %478*/
	/*   %480 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_enable_b = 1'd1;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_enable_b = 1'd1;
	end
end
always @(*) begin
	memory_controller_address_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_address_b = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_address_b = main_3_scevgep89;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep87, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_address_b = main_3_scevgep87_reg;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_address_b = main_6_scevgep84;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_address_b = main_6_scevgep82_reg;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_address_b = main_12_scevgep77;
	end
	/* main: %14*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd1));
	end
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_address_b = main_14_scevgep74_reg;
	end
	/* main: %27*/
	/*   %29 = load i32* %h_ptr.i22.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_address_b = main_27_h_ptri22i0;
	end
	/* main: %27*/
	/*   %33 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_address_b = main_27_scevgep44_reg;
	end
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_address_b = (`TAG_g_tqmf_a + (4 * 32'd23));
	end
	/* main: %42*/
	/*   %45 = load i32* %tqmf_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_35)) begin
		memory_controller_address_b = main_42_tqmf_ptr1ii0;
	end
	/* main: %47*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_address_b = `TAG_g_tqmf_a;
	end
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %53*/
	/*   %55 = load i32* %.0467, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_address_b = main_53_0467;
	end
	/* main: %79*/
	/*   %80 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__79_52)) begin
		memory_controller_address_b = main_79_scevgep55;
	end
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_58)) begin
		memory_controller_address_b = main_quantlexitii_riliii0in;
	end
	/* main: %quantl.exit.i.i*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_address_b = main_quantlexitii_93;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_71)) begin
		memory_controller_address_b = main_preheader44_scevgep60_reg;
	end
	/* main: %110*/
	/*   store i32 %113, i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		memory_controller_address_b = main_preheader44_scevgep60_reg;
	end
	/* main: %116*/
	/*   %122 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_address_b = main_preheader45_scevgep57_reg;
	end
	/* main: %116*/
	/*   store i32 %125, i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_80)) begin
		memory_controller_address_b = main_preheader45_scevgep57_reg;
	end
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd3));
	end
	/* main: %upzero.exit*/
	/*   store i32 %50, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd1));
	end
	/* main: %upzero.exit*/
	/*   store i32 %90, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_address_b = `TAG_g_delay_dltx_a;
	end
	/* main: %upzero.exit*/
	/*   store i32 %129, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_address_b = (`TAG_g_delay_dltx_a + (4 * 32'd3));
	end
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %157*/
	/*   %159 = load i32* %.0472, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_address_b = main_157_0472;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_address_b = main_filtezexit8i26i_187;
	end
	/* main: %210*/
	/*   %216 = load i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_address_b = main_preheader42_scevgep67_reg;
	end
	/* main: %210*/
	/*   store i32 %219, i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_122)) begin
		memory_controller_address_b = main_preheader42_scevgep67_reg;
	end
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd3));
	end
	/* main: %upzero.exit29*/
	/*   store i32 %154, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd1));
	end
	/* main: %upzero.exit29*/
	/*   store i32 %184, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_address_b = `TAG_g_delay_dhx_a;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %223, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_address_b = (`TAG_g_delay_dhx_a + (4 * 32'd3));
	end
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %266*/
	/*   %268 = load i32* %.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_address_b = main_266_0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %286 = load i32* %255, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_address_b = main_254_255_reg;
	end
	/* main: %filtez.exit.i.i*/
	/*   %293 = load i32* %292, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		memory_controller_address_b = main_filtezexitii_292_reg;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_220)) begin
		memory_controller_address_b = main_preheader38_scevgep16_reg;
	end
	/* main: %309*/
	/*   store i32 %312, i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_223)) begin
		memory_controller_address_b = main_preheader38_scevgep16_reg;
	end
	/* main: %315*/
	/*   %321 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_address_b = main_preheader39_scevgep13_reg;
	end
	/* main: %315*/
	/*   store i32 %324, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_229)) begin
		memory_controller_address_b = main_preheader39_scevgep13_reg;
	end
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd3));
	end
	/* main: %upzero.exit18*/
	/*   store i32 %263, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd1));
	end
	/* main: %upzero.exit18*/
	/*   store i32 %285, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_address_b = `TAG_g_dec_del_dltx_a;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %328, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dltx_a + (4 * 32'd3));
	end
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %356*/
	/*   %358 = load i32* %.0465, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_address_b = main_356_0465;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %379 = load i32* %378, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_address_b = main_filtezexit8ii_378;
	end
	/* main: %401*/
	/*   %407 = load i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_address_b = main_preheader36_scevgep23_reg;
	end
	/* main: %401*/
	/*   store i32 %410, i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_268)) begin
		memory_controller_address_b = main_preheader36_scevgep23_reg;
	end
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd3));
	end
	/* main: %upzero.exit7*/
	/*   store i32 %353, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd1));
	end
	/* main: %upzero.exit7*/
	/*   store i32 %375, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_address_b = `TAG_g_dec_del_dhx_a;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %414, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_address_b = (`TAG_g_dec_del_dhx_a + (4 * 32'd3));
	end
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_address_b = main_446_ad_ptrii0_reg;
	end
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_address_b = (`TAG_g_accumd_a + (4 * 32'd10));
	end
	/* main: %466*/
	/*   %468 = load i32* %ad_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_address_b = main_466_ad_ptr1ii0;
	end
	/* main: %466*/
	/*   store i32 %468, i32* %ad_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_address_b = main_466_ad_ptrii1_reg;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %440, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_address_b = `TAG_g_accumd_a;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %476, i32* %scevgep40, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_address_b = main_256_scevgep40_reg;
	end
	/* main: %478*/
	/*   %480 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_address_b = main_478_scevgep7;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_address_b = main_485_scevgep;
	end
end
always @(*) begin
	memory_controller_write_enable_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep87, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %14*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %27*/
	/*   %29 = load i32* %h_ptr.i22.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %27*/
	/*   %33 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %42*/
	/*   %45 = load i32* %tqmf_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_35)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %47*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %53*/
	/*   %55 = load i32* %.0467, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %79*/
	/*   %80 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__79_52)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_58)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %quantl.exit.i.i*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_71)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %110*/
	/*   store i32 %113, i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %116*/
	/*   %122 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %116*/
	/*   store i32 %125, i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_80)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit*/
	/*   store i32 %50, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %90, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit*/
	/*   store i32 %129, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %157*/
	/*   %159 = load i32* %.0472, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %210*/
	/*   %216 = load i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %210*/
	/*   store i32 %219, i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_122)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %154, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %184, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %223, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %266*/
	/*   %268 = load i32* %.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %286 = load i32* %255, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit.i.i*/
	/*   %293 = load i32* %292, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_220)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %309*/
	/*   store i32 %312, i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_223)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %315*/
	/*   %321 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %315*/
	/*   store i32 %324, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_229)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %263, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %285, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %328, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %356*/
	/*   %358 = load i32* %.0465, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %379 = load i32* %378, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %401*/
	/*   %407 = load i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %401*/
	/*   store i32 %410, i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_268)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %353, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %375, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %414, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %466*/
	/*   %468 = load i32* %ad_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %466*/
	/*   store i32 %468, i32* %ad_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %440, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %476, i32* %scevgep40, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_write_enable_b = 1'd1;
	end
	/* main: %478*/
	/*   %480 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_write_enable_b = 1'd0;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_write_enable_b = 1'd0;
	end
end
always @(*) begin
	memory_controller_in_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_in_b = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep87, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_in_b = 32'd0;
	end
	/* main: %47*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_in_b = main_14_17_reg;
	end
	/* main: %110*/
	/*   store i32 %113, i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		memory_controller_in_b = main_110_113;
	end
	/* main: %116*/
	/*   store i32 %125, i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_80)) begin
		memory_controller_in_b = main_116_125;
	end
	/* main: %upzero.exit*/
	/*   store i32 %50, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_in_b = main_47_50_reg;
	end
	/* main: %upzero.exit*/
	/*   store i32 %90, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_in_b = main_quantlexitii_90_reg;
	end
	/* main: %upzero.exit*/
	/*   store i32 %129, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_in_b = main_upzeroexit_129;
	end
	/* main: %210*/
	/*   store i32 %219, i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_122)) begin
		memory_controller_in_b = main_210_219;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %154, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_in_b = main_uppol2exit34_154_reg;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %184, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_in_b = main_filtezexit8i26i_184_reg;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %223, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_in_b = main_upzeroexit29_223;
	end
	/* main: %309*/
	/*   store i32 %312, i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_223)) begin
		memory_controller_in_b = main_309_312;
	end
	/* main: %315*/
	/*   store i32 %324, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_229)) begin
		memory_controller_in_b = main_315_324;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %263, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_in_b = main_258_263_reg;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %285, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_in_b = main_filtezexitii_285_reg;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %328, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_in_b = main_upzeroexit18_328;
	end
	/* main: %401*/
	/*   store i32 %410, i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_268)) begin
		memory_controller_in_b = main_401_410;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %353, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_in_b = main_uppol2exit12_353_reg;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %375, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_in_b = main_filtezexit8ii_375_reg;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %414, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_in_b = main_upzeroexit7_414;
	end
	/* main: %466*/
	/*   store i32 %468, i32* %ad_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_in_b = main_466_468;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %440, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_in_b = main_uppol2exit_440_reg;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %476, i32* %scevgep40, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_in_b = main_decodeexiti_476;
	end
end
always @(*) begin
	memory_controller_size_b = 1'd0;
	if ((cur_state == LEGUP_0)) begin
		memory_controller_size_b = 1'd0;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep89, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_3)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %3*/
	/*   store i32 0, i32* %scevgep87, align 4*/
	if ((cur_state == LEGUP_F_main_BB__3_4)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep84, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_8)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %6*/
	/*   store i32 0, i32* %scevgep82, align 4*/
	if ((cur_state == LEGUP_F_main_BB__6_9)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %12*/
	/*   store i32 0, i32* %scevgep77, align 4*/
	if ((cur_state == LEGUP_F_main_BB__12_17)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %14*/
	/*   %20 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_20)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %14*/
	/*   %17 = load i32* %scevgep74, align 4*/
	if ((cur_state == LEGUP_F_main_BB__14_21)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %27*/
	/*   %29 = load i32* %h_ptr.i22.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_25)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %27*/
	/*   %33 = load i32* %scevgep44, align 4*/
	if ((cur_state == LEGUP_F_main_BB__27_26)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %37*/
	/*   %39 = load i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 23), align 4*/
	if ((cur_state == LEGUP_F_main_BB__37_30)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %42*/
	/*   %45 = load i32* %tqmf_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__42_35)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %47*/
	/*   store i32 %17, i32* getelementptr inbounds ([24 x i32]* @tqmf, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_39)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %47*/
	/*   %50 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__47_40)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %53*/
	/*   %55 = load i32* %.0467, align 4*/
	if ((cur_state == LEGUP_F_main_BB__53_45)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %79*/
	/*   %80 = load i32* %scevgep55, align 4*/
	if ((cur_state == LEGUP_F_main_BB__79_52)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i.i*/
	/*   %ril.i.i.i.0 = load i32* %ril.i.i.i.0.in, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_58)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %quantl.exit.i.i*/
	/*   %94 = load i32* %93, align 4*/
	if ((cur_state == LEGUP_F_main_BB_quantlexitii_60)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %110*/
	/*   %111 = load i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_71)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %110*/
	/*   store i32 %113, i32* %scevgep60, align 4*/
	if ((cur_state == LEGUP_F_main_BB__110_74)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %116*/
	/*   %122 = load i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_77)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %116*/
	/*   store i32 %125, i32* %scevgep57, align 4*/
	if ((cur_state == LEGUP_F_main_BB__116_80)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   %128 = load i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_84)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   store i32 %50, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_85)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   store i32 %90, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_86)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit*/
	/*   store i32 %129, i32* getelementptr inbounds ([6 x i32]* @delay_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit_87)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %uppol2.exit34*/
	/*   %154 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit34_90)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %157*/
	/*   %159 = load i32* %.0472, align 4*/
	if ((cur_state == LEGUP_F_main_BB__157_95)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit8.i26.i*/
	/*   %188 = load i32* %187, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8i26i_102)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %210*/
	/*   %216 = load i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_119)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %210*/
	/*   store i32 %219, i32* %scevgep67, align 4*/
	if ((cur_state == LEGUP_F_main_BB__210_122)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   %222 = load i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_126)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %154, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_127)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %184, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_128)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit29*/
	/*   store i32 %223, i32* getelementptr inbounds ([6 x i32]* @delay_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit29_129)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %258*/
	/*   %263 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB__258_169)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %266*/
	/*   %268 = load i32* %.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__266_205)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %286 = load i32* %255, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_209)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit.i.i*/
	/*   %293 = load i32* %292, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexitii_210)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %309*/
	/*   %310 = load i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_220)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %309*/
	/*   store i32 %312, i32* %scevgep16, align 4*/
	if ((cur_state == LEGUP_F_main_BB__309_223)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %315*/
	/*   %321 = load i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_226)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %315*/
	/*   store i32 %324, i32* %scevgep13, align 4*/
	if ((cur_state == LEGUP_F_main_BB__315_229)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   %327 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_233)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %263, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_234)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %285, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_235)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit18*/
	/*   store i32 %328, i32* getelementptr inbounds ([6 x i32]* @dec_del_dltx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit18_236)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %uppol2.exit12*/
	/*   %353 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_uppol2exit12_239)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %356*/
	/*   %358 = load i32* %.0465, align 4*/
	if ((cur_state == LEGUP_F_main_BB__356_244)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %filtez.exit8.i.i*/
	/*   %379 = load i32* %378, align 4*/
	if ((cur_state == LEGUP_F_main_BB_filtezexit8ii_248)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %401*/
	/*   %407 = load i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_265)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %401*/
	/*   store i32 %410, i32* %scevgep23, align 4*/
	if ((cur_state == LEGUP_F_main_BB__401_268)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   %413 = load i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_272)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %353, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 1), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_273)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %375, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_274)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %upzero.exit7*/
	/*   store i32 %414, i32* getelementptr inbounds ([6 x i32]* @dec_del_dhx, i32 0, i32 3), align 4*/
	if ((cur_state == LEGUP_F_main_BB_upzeroexit7_275)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %446*/
	/*   %453 = load i32* %ad_ptr.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__446_282)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %458*/
	/*   %461 = load i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 10), align 4*/
	if ((cur_state == LEGUP_F_main_BB__458_287)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %466*/
	/*   %468 = load i32* %ad_ptr1.i.i.0, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_291)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %466*/
	/*   store i32 %468, i32* %ad_ptr.i.i.1, align 4*/
	if ((cur_state == LEGUP_F_main_BB__466_293)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %440, i32* getelementptr inbounds ([11 x i32]* @accumd, i32 0, i32 0), align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_295)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %decode.exit.i*/
	/*   store i32 %476, i32* %scevgep40, align 4*/
	if ((cur_state == LEGUP_F_main_BB_decodeexiti_296)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %478*/
	/*   %480 = load i32* %scevgep7, align 4*/
	if ((cur_state == LEGUP_F_main_BB__478_300)) begin
		memory_controller_size_b = 2'd2;
	end
	/* main: %485*/
	/*   %487 = load i32* %scevgep, align 4*/
	if ((cur_state == LEGUP_F_main_BB__485_304)) begin
		memory_controller_size_b = 2'd2;
	end
end
always @(posedge clk) begin
	if ((cur_state == LEGUP_0)) begin
		return_val <= 0;
		if (start == 1'b0 && ^(0) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
	/* main: %498*/
	/*   ret i32 %main_result.2*/
	if ((cur_state == LEGUP_F_main_BB__498_310)) begin
		return_val <= main_preheader_main_result2_reg;
		if (start == 1'b0 && ^(main_preheader_main_result2_reg) === 1'bX) begin $display ("ERROR: Right hand side is 'X'. Assigned to return_val"); $finish; end
	end
end

endmodule 
module ram_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	wren_a,
	wren_b,
	data_a,
	data_b,
	byteena_a,
	byteena_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  width_be_a = 1'd0;
parameter  width_be_b = 1'd0;
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;
input  wren_a;
input  wren_b;
input [(width_a-1):0] data_a;
input [(width_b-1):0] data_b;
// byte enable is unsupported by inferred RAMs
input [width_be_a-1:0] byteena_a;
input [width_be_b-1:0] byteena_b;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin // Port A
if (wren_a)
begin
    ram[address_a] <= data_a;
    q_a_wire <= {width_a{1'bX}};
end
else
    q_a_wire <= ram[address_a];
end
always @ (posedge clk)
if (clken)
begin // Port b
if (wren_b)
begin
    ram[address_b] <= data_b;
    q_b_wire <= {width_b{1'bX}};
end
else
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
module rom_dual_port
(
	clk,
	clken,
	address_a,
	address_b,
	q_a,
	q_b
);

parameter  width_a = 1'd0;
parameter  width_b = 1'd0;
parameter  widthad_a = 1'd0;
parameter  widthad_b = 1'd0;
parameter  numwords_a = 1'd0;
parameter  numwords_b = 1'd0;
parameter  init_file = "UNUSED.mif";
parameter  latency = 1;

input  clk;
input  clken;
input [(widthad_a-1):0] address_a;
input [(widthad_b-1):0] address_b;
output wire [(width_a-1):0] q_a;
output wire [(width_b-1):0] q_b;
reg [(width_a-1):0] q_a_wire;
reg [(width_b-1):0] q_b_wire;

(* ramstyle = "no_rw_check", ram_init_file = init_file *) reg [width_a-1:0] ram[numwords_a-1:0];

/* synthesis translate_off */
integer i;
ALTERA_MF_MEMORY_INITIALIZATION mem ();
reg [8*256:1] ram_ver_file;
initial begin
	if (init_file == "UNUSED.mif")
    begin
		for (i = 0; i < numwords_a; i = i + 1)
			ram[i] = 0;
    end
	else
    begin
        // modelsim can't read .mif files directly. So use Altera function to
        // convert them to .ver files
        mem.convert_to_ver_file(init_file, width_a, ram_ver_file);
        $readmemh(ram_ver_file, ram);
    end
end
/* synthesis translate_on */

always @ (posedge clk)
if (clken)
begin
    q_a_wire <= ram[address_a];
    q_b_wire <= ram[address_b];
end



integer j;
reg [(width_a-1):0] q_a_reg[latency:1], q_b_reg[latency:1];

always @(*)
begin
   q_a_reg[1] <= q_a_wire;
   q_b_reg[1] <= q_b_wire;
end

always @(posedge clk)
if (clken)
begin
   for (j = 1; j < latency; j=j+1)
   begin
       q_a_reg[j+1] <= q_a_reg[j];
       q_b_reg[j+1] <= q_b_reg[j];
   end
end

assign q_a = (clken) ? q_a_reg[latency] : 0;
assign q_b = (clken) ? q_b_reg[latency] : 0;


endmodule
// Adding code from verilog file: /home/x2/jinming-ge/Pass-Order/legup-4.0/examples/../boards/CycloneII/DE2/top.v


module de2 (
	    CLOCK_50,
	    KEY,
	    SW,
	    HEX0,
	    HEX1,
	    HEX2,
	    HEX3,
	    HEX4,
	    HEX5,
	    HEX6,
	    HEX7,
	    LEDG,
		UART_RXD,
		UART_TXD

	    );

   input CLOCK_50;
   input [3:0] KEY;
   input [17:0] SW;
   output [6:0] HEX0, HEX1,  HEX2,  HEX3,  HEX4,  HEX5,  HEX6,  HEX7;
   reg [6:0] 	hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;
   

   output [7:0] LEDG;
    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;

   hex_digits h7( .x(hex7), .hex_LEDs(HEX7));
   hex_digits h6( .x(hex6), .hex_LEDs(HEX6));
   hex_digits h5( .x(hex5), .hex_LEDs(HEX5));
   hex_digits h4( .x(hex4), .hex_LEDs(HEX4));
   hex_digits h3( .x(hex3), .hex_LEDs(HEX3));
   hex_digits h2( .x(hex2), .hex_LEDs(HEX2));
   hex_digits h1( .x(hex1), .hex_LEDs(HEX1));
   hex_digits h0( .x(hex0), .hex_LEDs(HEX0));
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

endmodule

// Adding code from verilog file: /home/x2/jinming-ge/Pass-Order/legup-4.0/examples/../boards/Virtex6/ML605/top.v


module ML605 (
       USER_CLOCK,
	    KEY,
	    SW,	    
       LED,
       LEDG,
		UART_RXD,
		UART_TXD

	    );

   input USER_CLOCK;
   input [4:0] KEY;
   input [7:0] SW;
   output [7:0] LED;
   output [7:0] LEDG;
   wire CLOCK_50;

    input UART_RXD;
    output UART_TXD;    
	wire clk = CLOCK_50;
	wire go = ~KEY[1];



   wire 	reset = ~KEY[0];
   wire 	start;
   wire [31:0] 	return_val;
   reg  [31:0] 	return_val_reg;
   wire 	finish;
   wire [3:0]	state;
   
   reg [6:0]   hex0, hex1, hex2, hex3, hex4, hex5, hex6, hex7;

   assign CLOCK_50 = USER_CLOCK;
   assign LED = 0;
   
	always @ (*) begin
		hex7 <= return_val_reg[31:28];
		hex6 <= return_val_reg[27:24];
		hex5 <= return_val_reg[23:20];
		hex4 <= return_val_reg[19:16];
		hex3 <= return_val_reg[15:12];
		hex2 <= return_val_reg[11:8];
		hex1 <= return_val_reg[7:4];
		hex0 <= return_val_reg[3:0];
	end
assign UART_TXD = 1'b0;

    parameter s_WAIT = 3'b001, s_START = 3'b010, s_EXE = 3'b011,
                s_DONE = 3'b100;

    // state registers
    reg [3:0] y_Q, Y_D;

    assign LEDG[3:0] = y_Q;

    // next state
    always @(*)
    begin
        case (y_Q)
            s_WAIT: if (go) Y_D = s_START; else Y_D = y_Q;

            s_START: Y_D = s_EXE;

            s_EXE: if (!finish) Y_D = s_EXE; else Y_D = s_DONE;

            s_DONE: Y_D = s_DONE;

            default: Y_D = 3'bxxx;
        endcase
    end

    // current state
    always @(posedge clk)
    begin
        if (reset) // synchronous clear
            y_Q <= s_WAIT;
        else
            y_Q <= Y_D;
    end

    always @(posedge clk)
        if (y_Q == s_EXE && finish)
            return_val_reg <= return_val;
        else if (y_Q == s_DONE)
            return_val_reg <= return_val_reg;
        else
            return_val_reg <= 0;


    assign start = (y_Q == s_START);

   
   top top_inst (
      .clk (clk),
      .reset (reset),
      .finish (finish),
      .return_val (return_val),
        .start (start)

    );

   

endmodule

// Adding code from verilog file: /home/x2/jinming-ge/Pass-Order/legup-4.0/examples/../boards/StratixIV/DE4/top.v


module de4 ( 
    	     OSC_50_BANK2, 
             BUTTON, 
             LED, 
    	     SEG0_D, 
    	     SEG1_D 
	     ); 
   input OSC_50_BANK2; 
   input [1:0] BUTTON; 
   output [6:0] SEG0_D; 
   output [6:0] SEG1_D; 
   output [7:0] LED; 
   
   de2 de2_inst ( 
		  .CLOCK_50 (OSC_50_BANK2), 
		  .LEDG (LED), 
		  .KEY (BUTTON), 
		  .SW (), 
		  .HEX0 (SEG0_D), 
		  .HEX1 (SEG1_D), 
		  .HEX2 (), 
		  .HEX3 (), 
		  .HEX4 (), 
		  .HEX5 (), 
		  .HEX6 (), 
		  .HEX7 () 
		  ); 
   
endmodule
module circuit_start_control (
    go,
    control_key
);
    input control_key;
    output go;
    assign go = control_key;
endmodule
module hex_digits(x, hex_LEDs);
    input [3:0] x;
    output [6:0] hex_LEDs;
    
    assign hex_LEDs[0] = (~x[3] & ~x[2] & ~x[1] & x[0]) |
                            (~x[3] & x[2] & ~x[1] & ~x[0]) |
                            (x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & ~x[2] & x[1] & x[0]);
    assign hex_LEDs[1] = (~x[3] & x[2] & ~x[1] & x[0]) |
                            (x[3] & x[1] & x[0]) |
                            (x[3] & x[2] & ~x[0]) |
                            (x[2] & x[1] & ~x[0]);
    assign hex_LEDs[2] = (x[3] & x[2] & ~x[0]) |
                            (x[3] & x[2] & x[1]) |
                            (~x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[3] = (~x[3] & ~x[2] & ~x[1] & x[0]) | 
                            (~x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (x[2] & x[1] & x[0]) | 
                            (x[3] & ~x[2] & x[1] & ~x[0]);
    assign hex_LEDs[4] = (~x[3] & x[0]) |
                            (~x[3] & x[2] & ~x[1]) |
                            (~x[2] & ~x[1] & x[0]);
    assign hex_LEDs[5] = (~x[3] & ~x[2] & x[0]) | 
                            (~x[3] & ~x[2] & x[1]) | 
                            (~x[3] & x[1] & x[0]) | 
                            (x[3] & x[2] & ~x[1] & x[0]);
    assign hex_LEDs[6] = (~x[3] & ~x[2] & ~x[1]) | 
                            (x[3] & x[2] & ~x[1] & ~x[0]) | 
                            (~x[3] & x[2] & x[1] & x[0]);
    
endmodule
`timescale 1 ns / 1 ns
module main_tb
(
);

reg  clk;
reg  reset;
reg  start;
reg  waitrequest;
wire [31:0] return_val;
wire  finish;


top top_inst (
	.clk (clk),
	.reset (reset),
	.start (start),
	.waitrequest (waitrequest),
	.finish (finish),
	.return_val (return_val)
);




initial 
    clk = 0;
always @(clk)
    clk <= #10 ~clk;

initial begin
//$monitor("At t=%t clk=%b %b %b %b %d", $time, clk, reset, start, finish, return_val);
@(negedge clk);
reset <= 1;
@(negedge clk);
reset <= 0;
start <= 1;
@(negedge clk);
start <= 0;
end

always@(finish) begin
    if (finish == 1) begin
        $display("At t=%t clk=%b finish=%b return_val=%d", $time, clk, finish, return_val);
        $display("Cycles: %d", ($time-50)/20);
        $finish;
    end
end

initial begin
waitrequest <= 1;
@(negedge clk);
@(negedge clk);
waitrequest <= 0;
end


endmodule 
